<scope ilk="blob" lang="PHP" name="v2.php" src="/usr/share/pear/PEAR/PackageFile/v2.php"><import line="18" module="PEAR/ErrorStack.php" /><import line="172" module="PEAR/Dependency2.php" /><import line="1884" module="PEAR/PackageFile/v2/rw.php" /><import line="1904" module="PEAR/PackageFile/Generator/v2.php" /><import line="1915" module="PEAR/PackageFile/v2/Validator.php" /><import line="1930" module="PEAR/PackageFile/v2/Validator.php" /><import line="1978" module="PEAR/Task" /><scope doc="@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="29" lineend="2058" name="PEAR_PackageFile_v2"><variable citdl="array" doc="Parsed package information&#xA;@var array&#xA;@access private" line="37" name="_packageInfo" /><variable citdl="string" doc="path to package .tgz or false if this is a local/extracted package.xml&#xA;@var string|false&#xA;@access private" line="44" name="_archiveFile" /><variable citdl="string" doc="path to package .xml or false if this is an abstract parsed-from-string xml&#xA;@var string|false&#xA;@access private" line="51" name="_packageFile" /><variable citdl="PEAR_Common" doc="This is used by file analysis routines to log progress information&#xA;@var PEAR_Common&#xA;@access protected" line="58" name="_logger" /><variable citdl="int" doc="This is set to the highest validation level that has been validated&#xA;&#xA;If the package.xml is invalid or unknown, this is set to 0.  If&#xA;normal validation has occurred, this is set to PEAR_VALIDATE_NORMAL.  If&#xA;downloading/installation validation has occurred it is set to PEAR_VALIDATE_DOWNLOADING&#xA;or INSTALLING, and so on up to PEAR_VALIDATE_PACKAGING.  This allows validation&#xA;&quot;caching&quot; to occur, which is particularly important for package validation, so&#xA;that PHP files are not validated twice&#xA;@var int&#xA;@access private" line="72" name="_isValid" /><variable citdl="boolean" line="78" name="_filesValid" /><variable citdl="PEAR_Registry" doc="@var PEAR_Registry&#xA;@access protected" line="84" name="_registry" /><variable citdl="PEAR_Config" doc="@var PEAR_Config&#xA;@access protected" line="90" name="_config" /><variable citdl="string" doc="Optional Dependency group requested for installation&#xA;@var string&#xA;@access private" line="97" name="_requestedGroup" /><variable citdl="PEAR_ErrorStack" doc="@var PEAR_ErrorStack&#xA;@access protected" line="103" name="_stack" /><variable citdl="str_replace()" line="108" name="_tasksNs" /><variable citdl="boolean" doc="Determines whether this packagefile was initialized only with partial package info&#xA;&#xA;If this package file was constructed via parsing REST, it will only contain&#xA;&#xA;- package name&#xA;- channel name&#xA;- dependencies&#xA;@var boolean&#xA;@access private" line="121" name="_incomplete" /><variable citdl="PEAR_PackageFile_v2_Validator" doc="@var PEAR_PackageFile_v2_Validator" line="126" name="_v2Validator" /><scope attributes="__ctor__" doc="&#xA;The constructor merely sets up the private error stack&#xA;" ilk="function" line="131" lineend="135" name="__construct" signature="__construct()" /><scope attributes="public __ctor__" doc="&#xA;PHP 4 style constructor for backwards compatibility.&#xA;Used by PEAR_PackageFileManager2&#xA;" ilk="function" line="141" lineend="144" name="PEAR_PackageFile_v2" signature="PEAR_PackageFile_v2()" /><scope doc="To make unit-testing easier&#xA;@param PEAR_Frontend_*&#xA;@param array options&#xA;@param PEAR_Config&#xA;@return PEAR_Downloader&#xA;@access protected" ilk="function" line="154" lineend="158" name="getPEARDownloader" returns="PEAR_Downloader" signature="pear_downloader &amp;getPEARDownloader(&amp; $i, $o, &amp; $c)"><variable ilk="argument" line="154" name="i" /><variable ilk="argument" line="154" name="o" /><variable ilk="argument" line="154" name="c" /><variable citdl="PEAR_Downloader" line="156" name="z" /></scope><scope doc="To make unit-testing easier&#xA;@param PEAR_Config&#xA;@param array options&#xA;@param array package name as returned from {@link PEAR_Registry::parsePackageName()}&#xA;@param int PEAR_VALIDATE_* constant&#xA;@return PEAR_Dependency2&#xA;@access protected" ilk="function" line="169" lineend="176" name="getPEARDependency2" returns="PEAR_Dependency2" signature="pear_dependency2 &amp;getPEARDependency2(&amp; $c, $o, $p, $s = PEAR_VALIDATE_INSTALLING)"><variable ilk="argument" line="169" name="c" /><variable ilk="argument" line="169" name="o" /><variable ilk="argument" line="169" name="p" /><variable default="PEAR_VALIDATE_INSTALLING" ilk="argument" line="169" name="s" /><variable citdl="PEAR_Dependency2" line="174" name="z" /></scope><scope ilk="function" line="178" lineend="182" name="getInstalledBinary" signature="getInstalledBinary()" /><scope doc="Installation of source package has failed, attempt to download and install the&#xA;binary version of this package.&#xA;@param PEAR_Installer&#xA;@return array|false" ilk="function" line="190" lineend="263" name="installBinary" returns="array" signature="array installBinary(&amp; $installer)"><variable ilk="argument" line="190" name="installer" /><variable citdl="boolean" line="193" name="a" /><variable citdl="this.getPEARDownloader()" line="224" name="dl" /><variable citdl="dl.config.get()" line="225" name="verbose" /><variable citdl="installer.install()" line="240" name="err" /><variable line="218" name="i" /><variable citdl="this.getPackageType()" line="197" name="releasetype" /><variable citdl="params[]" line="218" name="param" /><variable citdl="installer.getInstallPackages()[]" line="202" name="p" /><variable citdl="this._packageInfo" line="213" name="params" /><variable citdl="dl.download()" line="229" name="ret" /><variable citdl="ret" line="238" name="pf" /></scope><scope doc="&#xA;Returns string|false  - Extension name&#xA;" ilk="function" line="268" lineend="277" name="getProvidesExtension" returns="string" signature="string getProvidesExtension()" /><scope doc="&#xA;&lt;string&gt; Extension  - name&#xA;Returns bool &#xA;" ilk="function" line="283" lineend="290" name="isExtension" returns="bool" signature="bool isExtension($extension)"><variable ilk="argument" line="283" name="extension" /></scope><scope doc="Tests whether every part of the package.xml 1.0 is represented in&#xA;this package.xml 2.0&#xA;@param PEAR_PackageFile_v1&#xA;@return bool" ilk="function" line="298" lineend="379" name="isEquivalent" returns="bool" signature="bool isEquivalent($pf1)"><variable ilk="argument" line="298" name="pf1" /><variable citdl="boolean" line="340" name="reset" /><variable citdl="pf1.getFilelist()[]" line="372" name="atts" /><variable line="339" name="i1" /><variable citdl="pf1.getMaintainers()" line="338" name="yourmaintainers" /><variable line="341" name="i2" /><variable citdl="this.getFilelist()" line="371" name="filelist" /><variable line="372" name="file" /><variable citdl="boolean" line="310" name="pass" /><variable citdl="this.getMaintainers()" line="337" name="mymaintainers" /></scope><scope ilk="function" line="381" lineend="386" name="_differentPackage" signature="_differentPackage($package)"><variable ilk="argument" line="381" name="package" /></scope><scope ilk="function" line="388" lineend="393" name="_differentVersion" signature="_differentVersion($version)"><variable ilk="argument" line="388" name="version" /></scope><scope ilk="function" line="395" lineend="400" name="_differentState" signature="_differentState($state)"><variable ilk="argument" line="395" name="state" /></scope><scope ilk="function" line="402" lineend="407" name="_differentRole" signature="_differentRole($handle, $role, $selfrole)"><variable ilk="argument" line="402" name="handle" /><variable ilk="argument" line="402" name="role" /><variable ilk="argument" line="402" name="selfrole" /></scope><scope ilk="function" line="409" lineend="414" name="_differentEmail" signature="_differentEmail($handle, $email, $selfemail)"><variable ilk="argument" line="409" name="handle" /><variable ilk="argument" line="409" name="email" /><variable ilk="argument" line="409" name="selfemail" /></scope><scope ilk="function" line="416" lineend="421" name="_differentName" signature="_differentName($handle, $name, $selfname)"><variable ilk="argument" line="416" name="handle" /><variable ilk="argument" line="416" name="name" /><variable ilk="argument" line="416" name="selfname" /></scope><scope ilk="function" line="423" lineend="435" name="_unmatchedMaintainers" signature="_unmatchedMaintainers($my, $yours)"><variable ilk="argument" line="423" name="my" /><variable ilk="argument" line="423" name="yours" /><variable citdl="i" line="426" name="i" /></scope><scope ilk="function" line="437" lineend="445" name="_differentNotes" signature="_differentNotes($notes)"><variable ilk="argument" line="437" name="notes" /><variable citdl="strlen()" line="439" name="truncnotes" /><variable citdl="strlen()" line="441" name="truncmynotes" /></scope><scope ilk="function" line="447" lineend="455" name="_differentSummary" signature="_differentSummary($summary)"><variable ilk="argument" line="447" name="summary" /><variable citdl="strlen()" line="449" name="truncsummary" /><variable citdl="strlen()" line="451" name="truncmysummary" /></scope><scope ilk="function" line="457" lineend="465" name="_differentDescription" signature="_differentDescription($description)"><variable ilk="argument" line="457" name="description" /><variable citdl="trim()" line="459" name="truncdescription" /><variable citdl="trim()" line="461" name="truncmydescription" /></scope><scope ilk="function" line="467" lineend="471" name="_missingFile" signature="_missingFile($file)"><variable ilk="argument" line="467" name="file" /></scope><scope doc="&#xA;WARNING - do not use this function unless you know what you&apos;re doing&#xA;" ilk="function" line="476" lineend="482" name="setRawState" signature="setRawState($state)"><variable ilk="argument" line="476" name="state" /></scope><scope doc="&#xA;WARNING - do not use this function unless you know what you&apos;re doing&#xA;" ilk="function" line="487" lineend="490" name="setRawCompatible" signature="setRawCompatible($compatible)"><variable ilk="argument" line="487" name="compatible" /></scope><scope doc="&#xA;WARNING - do not use this function unless you know what you&apos;re doing&#xA;" ilk="function" line="495" lineend="498" name="setRawPackage" signature="setRawPackage($package)"><variable ilk="argument" line="495" name="package" /></scope><scope doc="&#xA;WARNING - do not use this function unless you know what you&apos;re doing&#xA;" ilk="function" line="503" lineend="506" name="setRawChannel" signature="setRawChannel($channel)"><variable ilk="argument" line="503" name="channel" /></scope><scope ilk="function" line="508" lineend="511" name="setRequestedGroup" signature="setRequestedGroup($group)"><variable ilk="argument" line="508" name="group" /></scope><scope ilk="function" line="513" lineend="519" name="getRequestedGroup" returns="this._requestedGroup" signature="getRequestedGroup()" /><scope doc="For saving in the registry.&#xA;&#xA;Set the last version that was installed&#xA;@param string" ilk="function" line="527" lineend="530" name="setLastInstalledVersion" signature="setLastInstalledVersion($version)"><variable ilk="argument" line="527" name="version" /></scope><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="535" lineend="541" name="getLastInstalledVersion" returns="string" signature="string getLastInstalledVersion()" /><scope doc="&#xA;Determines whether this package.xml has post-install scripts or not&#xA;Returns array|false &#xA;" ilk="function" line="547" lineend="585" name="listPostinstallScripts" returns="array" signature="array listPostinstallScripts()"><variable citdl="taskfiles[]" line="567" name="tasks" /><variable citdl="file" line="557" name="atts" /><variable line="567" name="name" /><variable citdl="array()" line="555" name="taskfiles" /><variable citdl="this.getFilelist()" line="549" name="filelist" /><variable citdl="this.getTask()" line="574" name="task" /><variable citdl="tasks[]" line="573" name="raw" /><variable line="573" name="tag" /><variable citdl="PEAR_Common" line="563" name="common" /><variable citdl="contents[]" line="556" name="file" /><variable citdl="this.getContents()" line="550" name="contents" /><variable citdl="array()" line="566" name="ret" /></scope><variable citdl="array()" line="565" name="_scripts" /><scope doc="&#xA;Initialize post-install scripts for running&#xA;This method can be used to detect post-install scripts, as the return value&#xA;indicates whether any exist&#xA;Returns bool &#xA;" ilk="function" line="594" lineend="642" name="initPostinstallScripts" returns="bool" signature="bool initPostinstallScripts()"><variable citdl="taskfiles[]" line="613" name="tasks" /><variable citdl="file" line="604" name="atts" /><variable line="613" name="name" /><variable citdl="array()" line="602" name="taskfiles" /><variable citdl="this.getFilelist()" line="596" name="filelist" /><variable line="621" name="task" /><variable citdl="tasks[]" line="619" name="raw" /><variable line="619" name="tag" /><variable citdl="PEAR_Common" line="610" name="common" /><variable citdl="contents[]" line="603" name="file" /><variable citdl="task.startSession()" line="628" name="res" /><variable citdl="this.getTask()" line="620" name="taskname" /><variable citdl="this.getContents()" line="597" name="contents" /><variable line="626" name="lastversion" /></scope><scope ilk="function" line="644" lineend="652" name="runPostinstallScripts" signature="runPostinstallScripts()"><variable citdl="PEAR_Frontend.singleton()" line="647" name="ui" /></scope><scope doc="&#xA;Convert a recursive set of &lt;dir&gt; and &lt;file&gt; tags into a single &lt;dir&gt; tag with&#xA;&lt;file&gt; tags.&#xA;" ilk="function" line="659" lineend="691" name="flattenFilelist" signature="flattenFilelist()"><variable line="676" name="i" /><variable citdl="this._packageInfo[]" line="676" name="file" /><variable citdl="array()" line="664" name="filelist" /></scope><scope doc="&#xA;&lt;array&gt; the  - final flattened file list&#xA;&lt;array&gt; the  - current directory being processed&#xA;&lt;string|false&gt; any  - recursively inherited baeinstalldir attribute&#xA;&lt;string&gt; private  - recursion variable&#xA;Returns array &#xA;Access protected&#xA;" ilk="function" line="701" lineend="739" name="_getFlattenedFilelist" returns="array" signature="array _getFlattenedFilelist(&amp; $files, $dir, $baseinstall = false, $path = &apos;&apos;)"><variable ilk="argument" line="701" name="files" /><variable ilk="argument" line="701" name="dir" /><variable default="false" ilk="argument" line="701" name="baseinstall" /><variable default="&apos;&apos;" ilk="argument" line="701" name="path" /><variable line="717" name="newpath" /><variable citdl="file" line="727" name="attrs" /><variable citdl="dir[]" line="710" name="subdir" /><variable citdl="dir[]" line="726" name="file" /><variable citdl="string" line="712" name="name" /></scope><scope ilk="function" line="741" lineend="745" name="setConfig" signature="setConfig(&amp; $config)"><variable ilk="argument" line="741" name="config" /></scope><scope ilk="function" line="747" lineend="753" name="setLogger" returns="PEAR.raiseError()" signature="setLogger(&amp; $logger)"><variable ilk="argument" line="747" name="logger" /></scope><scope doc="&#xA;WARNING - do not use this function directly unless you know what you&apos;re doing&#xA;" ilk="function" line="758" lineend="761" name="setDeps" signature="setDeps($deps)"><variable ilk="argument" line="758" name="deps" /></scope><scope doc="&#xA;WARNING - do not use this function directly unless you know what you&apos;re doing&#xA;" ilk="function" line="766" lineend="769" name="setCompatible" signature="setCompatible($compat)"><variable ilk="argument" line="766" name="compat" /></scope><scope ilk="function" line="771" lineend="775" name="setPackagefile" signature="setPackagefile($file, $archive = false)"><variable ilk="argument" line="771" name="file" /><variable default="false" ilk="argument" line="771" name="archive" /></scope><scope doc="&#xA;Wrapper to {@link PEAR_ErrorStack::getErrors()}&#xA;&lt;boolean&gt; determines  - whether to purge the error stack after retrieving&#xA;Returns array &#xA;" ilk="function" line="782" lineend="785" name="getValidationWarnings" returns="array" signature="array getValidationWarnings($purge = true)"><variable default="true" ilk="argument" line="782" name="purge" /></scope><scope ilk="function" line="787" lineend="790" name="getPackageFile" returns="this._packageFile" signature="getPackageFile()" /><scope ilk="function" line="792" lineend="795" name="getArchiveFile" returns="this._archiveFile" signature="getArchiveFile()" /><scope doc="Directly set the array that defines this packagefile&#xA;&#xA;WARNING: no validation.  This should only be performed by internal methods&#xA;inside PEAR or by inputting an array saved from an existing PEAR_PackageFile_v2&#xA;@param array" ilk="function" line="805" lineend="815" name="fromArray" signature="fromArray($pinfo)"><variable ilk="argument" line="805" name="pinfo" /></scope><scope ilk="function" line="817" lineend="820" name="isIncomplete" returns="this._incomplete" signature="isIncomplete()" /><scope doc="&#xA;Returns array &#xA;" ilk="function" line="825" lineend="831" name="toArray" returns="array" signature="array toArray($forreg = false)"><variable default="false" ilk="argument" line="825" name="forreg" /></scope><scope ilk="function" line="833" lineend="858" name="getArray" returns="arr" signature="getArray($forReg = false)"><variable default="false" ilk="argument" line="833" name="forReg" /><variable citdl="this._packageInfo" line="848" name="info" /><variable citdl="this._packageInfo" line="836" name="arr" /></scope><scope ilk="function" line="860" lineend="885" name="packageInfo" returns="arr" signature="packageInfo($field)"><variable ilk="argument" line="860" name="field" /><variable citdl="this.getArray()" line="862" name="arr" /></scope><scope ilk="function" line="887" lineend="890" name="getName" returns="this.getPackage()" signature="getName()" /><scope ilk="function" line="892" lineend="898" name="getPackage" returns="this._packageInfo" signature="getPackage()" /><scope ilk="function" line="900" lineend="909" name="getChannel" returns="string" signature="getChannel()" /><scope ilk="function" line="911" lineend="917" name="getUri" returns="this._packageInfo" signature="getUri()" /><scope ilk="function" line="919" lineend="925" name="getExtends" returns="this._packageInfo" signature="getExtends()" /><scope ilk="function" line="927" lineend="933" name="getSummary" returns="this._packageInfo" signature="getSummary()" /><scope ilk="function" line="935" lineend="941" name="getDescription" returns="this._packageInfo" signature="getDescription()" /><scope ilk="function" line="943" lineend="1007" name="getMaintainers" returns="boolean" signature="getMaintainers($raw = false)"><variable default="false" ilk="argument" line="943" name="raw" /><variable line="960" name="leads" /><variable citdl="maintainer" line="962" name="s" /><variable citdl="leads[]" line="972" name="maintainer" /><variable citdl="leads[]" line="961" name="lead" /><variable citdl="array()" line="949" name="ret" /></scope><scope ilk="function" line="1009" lineend="1015" name="getLeads" returns="this._packageInfo" signature="getLeads()" /><scope ilk="function" line="1017" lineend="1023" name="getDevelopers" returns="this._packageInfo" signature="getDevelopers()" /><scope ilk="function" line="1025" lineend="1031" name="getContributors" returns="this._packageInfo" signature="getContributors()" /><scope ilk="function" line="1033" lineend="1039" name="getHelpers" returns="this._packageInfo" signature="getHelpers()" /><scope ilk="function" line="1041" lineend="1054" name="setDate" signature="setDate($date)"><variable ilk="argument" line="1041" name="date" /></scope><scope ilk="function" line="1056" lineend="1069" name="setTime" signature="setTime($time)"><variable ilk="argument" line="1056" name="time" /></scope><scope ilk="function" line="1071" lineend="1077" name="getDate" returns="this._packageInfo" signature="getDate()" /><scope ilk="function" line="1079" lineend="1085" name="getTime" returns="this._packageInfo" signature="getTime()" /><scope doc="&#xA;&lt;package|api&gt; version  - category to return&#xA;" ilk="function" line="1090" lineend="1096" name="getVersion" returns="this._packageInfo" signature="getVersion($key = &apos;release&apos;)"><variable default="&apos;release&apos;" ilk="argument" line="1090" name="key" /></scope><scope ilk="function" line="1098" lineend="1104" name="getStability" returns="this._packageInfo" signature="getStability()" /><scope ilk="function" line="1106" lineend="1112" name="getState" returns="this._packageInfo" signature="getState($key = &apos;release&apos;)"><variable default="&apos;release&apos;" ilk="argument" line="1106" name="key" /></scope><scope ilk="function" line="1114" lineend="1127" name="getLicense" returns="this._packageInfo" signature="getLicense($raw = false)"><variable default="false" ilk="argument" line="1114" name="raw" /></scope><scope ilk="function" line="1129" lineend="1135" name="getLicenseLocation" returns="boolean" signature="getLicenseLocation()" /><scope ilk="function" line="1137" lineend="1143" name="getNotes" returns="this._packageInfo" signature="getNotes()" /><scope doc="&#xA;Return the &lt;usesrole&gt; tag contents, if any&#xA;Returns array|false &#xA;" ilk="function" line="1149" lineend="1155" name="getUsesrole" returns="array" signature="array getUsesrole()" /><scope doc="&#xA;Return the &lt;usestask&gt; tag contents, if any&#xA;Returns array|false &#xA;" ilk="function" line="1161" lineend="1167" name="getUsestask" returns="array" signature="array getUsestask()" /><scope doc="&#xA;This should only be used to retrieve filenames and install attributes&#xA;" ilk="function" line="1172" lineend="1202" name="getFilelist" returns="this._packageInfo" signature="getFilelist($preserve = false)"><variable default="false" ilk="argument" line="1172" name="preserve" /><variable citdl="contents[]" line="1186" name="file" /><variable citdl="array()" line="1179" name="ret" /><variable citdl="file" line="1190" name="name" /></scope><scope doc="&#xA;Return configure options array, if any&#xA;Returns array|false &#xA;" ilk="function" line="1209" lineend="1233" name="getConfigureOptions" returns="array" signature="array getConfigureOptions()"><variable line="1225" name="i" /><variable citdl="this.getReleases()" line="1215" name="releases" /></scope><scope doc="&#xA;This is only used at install-time, after all serialization&#xA;is over.&#xA;" ilk="function" line="1239" lineend="1242" name="resetFilelist" signature="resetFilelist()" /><scope doc="&#xA;Retrieve a list of files that should be installed on this computer&#xA;Returns array &#xA;" ilk="function" line="1248" lineend="1330" name="getInstallationFilelist" returns="array" signature="array getInstallationFilelist($forfilecheck = false)"><variable default="false" ilk="argument" line="1248" name="forfilecheck" /><variable citdl="ignore[]" line="1299" name="ig" /><variable line="1315" name="file" /><variable citdl="installconditions[]" line="1277" name="conditions" /><variable citdl="this.getPEARDependency2()" line="1271" name="depchecker" /><variable line="1307" name="installas" /><variable citdl="depchecker" line="1282" name="ret" /><variable line="1298" name="ignore" /><variable citdl="release[]" line="1272" name="instance" /><variable citdl="installas[]" line="1308" name="as" /><variable citdl="contents" line="1252" name="base" /><variable citdl="conditions[]" line="1281" name="condition" /><variable citdl="instance" line="1274" name="installconditions" /><variable citdl="this.getReleases()" line="1258" name="release" /><variable line="1277" name="type" /><variable citdl="this.getFilelist()" line="1250" name="contents" /><variable citdl="contents[]" line="1315" name="attrs" /></scope><scope doc="&#xA;This is only used at install-time, after all serialization&#xA;is over.&#xA;&lt;string&gt; file  - name&#xA;&lt;string&gt; installed  - path&#xA;" ilk="function" line="1338" lineend="1344" name="setInstalledAs" returns="this._packageInfo" signature="setInstalledAs($file, $path)"><variable ilk="argument" line="1338" name="file" /><variable ilk="argument" line="1338" name="path" /></scope><scope ilk="function" line="1346" lineend="1352" name="getInstalledLocation" returns="this._packageInfo" signature="getInstalledLocation($file)"><variable ilk="argument" line="1346" name="file" /></scope><scope doc="&#xA;This is only used at install-time, after all serialization&#xA;is over.&#xA;" ilk="function" line="1358" lineend="1366" name="installedFile" signature="installedFile($file, $atts)"><variable ilk="argument" line="1358" name="file" /><variable ilk="argument" line="1358" name="atts" /></scope><scope doc="&#xA;Retrieve the contents tag&#xA;" ilk="function" line="1371" lineend="1377" name="getContents" returns="this._packageInfo" signature="getContents()" /><scope doc="&#xA;&lt;string&gt; full  - path to file&#xA;&lt;string&gt; attribute  - name&#xA;&lt;string&gt; attribute  - value&#xA;&lt;int&gt; risky  - but fast - use this to choose a file based on its position in the list&#xA;           of files.  Index is zero-based like PHP arrays.&#xA;Returns bool  - success of operation&#xA;" ilk="function" line="1387" lineend="1421" name="setFileAttribute" returns="bool" signature="bool setFileAttribute($filename, $attr, $value, $index = false)"><variable ilk="argument" line="1387" name="filename" /><variable ilk="argument" line="1387" name="attr" /><variable ilk="argument" line="1387" name="value" /><variable default="false" ilk="argument" line="1387" name="index" /><variable citdl="this._packageInfo" line="1401" name="files" /><variable citdl="boolean" line="1404" name="ind" /><variable line="1408" name="i" /><variable citdl="files[]" line="1408" name="file" /></scope><scope ilk="function" line="1423" lineend="1429" name="setDirtree" signature="setDirtree($path)"><variable ilk="argument" line="1423" name="path" /></scope><scope ilk="function" line="1431" lineend="1437" name="getDirtree" returns="this._packageInfo" signature="getDirtree()" /><scope ilk="function" line="1439" lineend="1442" name="resetDirtree" signature="resetDirtree()" /><scope doc="Determines whether this package claims it is compatible with the version of&#xA;the package that has a recommended version dependency&#xA;@param PEAR_PackageFile_v2|PEAR_PackageFile_v1|PEAR_Downloader_Package&#xA;@return boolean" ilk="function" line="1450" lineend="1489" name="isCompatible" returns="boolean" signature="boolean isCompatible($pf)"><variable ilk="argument" line="1450" name="pf" /><variable citdl="pf.getVersion()" line="1458" name="me" /><variable citdl="this._packageInfo" line="1459" name="compatible" /><variable citdl="compatible[]" line="1464" name="info" /><variable citdl="info[]" line="1479" name="exclude" /><variable citdl="boolean" line="1463" name="found" /></scope><scope doc="&#xA;Returns array|false &#xA;" ilk="function" line="1494" lineend="1500" name="getCompatible" returns="array" signature="array getCompatible()" /><scope ilk="function" line="1502" lineend="1508" name="getDependencies" returns="this._packageInfo" signature="getDependencies()" /><scope ilk="function" line="1510" lineend="1513" name="isSubpackageOf" returns="p.isSubpackage()" signature="isSubpackageOf($p)"><variable ilk="argument" line="1510" name="p" /></scope><scope doc="Determines whether the passed in package is a subpackage of this package.&#xA;&#xA;No version checking is done, only name verification.&#xA;@param PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@return bool" ilk="function" line="1522" lineend="1567" name="isSubpackage" returns="bool" signature="bool isSubpackage($p)"><variable ilk="argument" line="1522" name="p" /><variable citdl="deps" line="1545" name="sub2" /><variable citdl="array()" line="1524" name="sub" /><variable citdl="this._packageInfo" line="1532" name="sub1" /><variable citdl="sub[]" line="1553" name="dep" /><variable citdl="group[]" line="1543" name="deps" /><variable citdl="this._packageInfo" line="1539" name="group" /></scope><scope ilk="function" line="1569" lineend="1610" name="dependsOn" returns="boolean" signature="dependsOn($package, $channel)"><variable ilk="argument" line="1569" name="package" /><variable ilk="argument" line="1569" name="channel" /><variable citdl="deps[]" line="1580" name="dep" /><variable citdl="array()[]" line="1575" name="needed" /><variable line="1581" name="depchannel" /><variable citdl="array()[]" line="1574" name="type" /><variable citdl="deps[]" line="1593" name="group" /></scope><scope doc="Get the contents of a dependency group&#xA;@param string&#xA;@return array|false" ilk="function" line="1617" lineend="1633" name="getDependencyGroup" returns="array" signature="array getDependencyGroup($name)"><variable ilk="argument" line="1617" name="name" /><variable citdl="groups[]" line="1627" name="group" /><variable citdl="this._packageInfo" line="1623" name="groups" /></scope><scope doc="&#xA;Retrieve a partial package.xml 1.0 representation of dependencies&#xA;a very limited representation of dependencies is returned by this method.&#xA;The &lt;exclude&gt; tag for excluding certain versions of a dependency is&#xA;completely ignored.  In addition, dependency groups are ignored, with the&#xA;assumption that all dependencies in dependency groups are also listed in&#xA;the optional group that work with all dependency groups&#xA;&lt;boolean&gt; return  - package.xml 2.0 &lt;dependencies&gt; tag&#xA;Returns array|false &#xA;" ilk="function" line="1646" lineend="1752" name="getDeps" returns="array" signature="array getDeps($raw = false, $nopearinstaller = false)"><variable default="false" ilk="argument" line="1646" name="raw" /><variable default="false" ilk="argument" line="1646" name="nopearinstaller" /><variable citdl="array()" line="1660" name="map" /><variable citdl="deps[]" line="1674" name="dep" /><variable line="1662" name="optional" /><variable citdl="s" line="1703" name="s1" /><variable citdl="array()" line="1652" name="ret" /><variable citdl="array()" line="1683" name="s" /><variable citdl="this._packageInfo[]" line="1667" name="deps" /><variable line="1667" name="dtype" /><variable citdl="array()[]" line="1661" name="type" /></scope><scope doc="&#xA;Returns php|extsrc|extbin|zendextsrc|zendextbin|bundle|false &#xA;" ilk="function" line="1757" lineend="1778" name="getPackageType" returns="php" signature="php getPackageType()" /><scope doc="&#xA;Returns array|false &#xA;" ilk="function" line="1783" lineend="1793" name="getReleases" returns="array" signature="array getReleases()"><variable citdl="this.getPackageType()" line="1785" name="type" /></scope><scope doc="&#xA;Returns array &#xA;" ilk="function" line="1798" lineend="1804" name="getChangelog" returns="array" signature="array getChangelog()" /><scope ilk="function" line="1806" lineend="1809" name="hasDeps" signature="hasDeps()" /><scope ilk="function" line="1811" lineend="1820" name="getPackagexmlVersion" returns="string" signature="getPackagexmlVersion()" /><scope doc="&#xA;Returns array|false &#xA;" ilk="function" line="1825" lineend="1833" name="getSourcePackage" returns="array" signature="array getSourcePackage()" /><scope ilk="function" line="1835" lineend="1841" name="getBundledPackages" returns="this._packageInfo" signature="getBundledPackages()" /><scope ilk="function" line="1843" lineend="1849" name="getLastModified" returns="this._packageInfo" signature="getLastModified()" /><scope doc="Get the contents of a file listed within the package.xml&#xA;@param string&#xA;@return string" ilk="function" line="1856" lineend="1879" name="getFileContents" returns="string" signature="string getFileContents($file)"><variable ilk="argument" line="1856" name="file" /><variable citdl="Archive_Tar" line="1867" name="tar" /><variable citdl="dirname()" line="1859" name="dir" /></scope><scope ilk="function" line="1881" lineend="1899" name="getRW" returns="a" signature="&amp;getRW()"><variable citdl="PEAR_PackageFile_v2_rw" line="1886" name="a" /><variable citdl="get_object_vars()[]" line="1887" name="unused" /><variable line="1887" name="name" /></scope><scope ilk="function" line="1901" lineend="1908" name="getDefaultGenerator" returns="a" signature="&amp;getDefaultGenerator()"><variable citdl="PEAR_PackageFile_Generator_v2" line="1906" name="a" /></scope><scope ilk="function" line="1910" lineend="1920" name="analyzeSourceCode" returns="this._v2Validator.analyzeSourceCode()" signature="analyzeSourceCode($file, $string = false)"><variable ilk="argument" line="1910" name="file" /><variable default="false" ilk="argument" line="1910" name="string" /></scope><scope ilk="function" line="1922" lineend="1938" name="validate" returns="boolean" signature="validate($state = PEAR_VALIDATE_NORMAL)"><variable default="PEAR_VALIDATE_NORMAL" ilk="argument" line="1922" name="state" /></scope><scope ilk="function" line="1940" lineend="1953" name="getTasksNs" returns="this._tasksNs" signature="getTasksNs()"><variable line="1944" name="name" /><variable citdl="this._packageInfo[]" line="1944" name="value" /></scope><scope doc="Determine whether a task name is a valid task.  Custom tasks may be defined&#xA;using subdirectories by putting a &quot;-&quot; in the name, as in &lt;tasks:mycustom-task&gt;&#xA;&#xA;Note that this method will auto-load the task class file and test for the existence&#xA;of the name with &quot;-&quot; replaced by &quot;_&quot; as in PEAR/Task/mycustom/task.php makes class&#xA;PEAR_Task_mycustom_task&#xA;@param string&#xA;@return boolean" ilk="function" line="1965" lineend="1982" name="getTask" returns="boolean" signature="boolean getTask($task)"><variable ilk="argument" line="1965" name="task" /><variable line="1975" name="fp" /><variable citdl="str_replace()" line="1970" name="taskfile" /></scope><scope doc="&#xA;Key-friendly array_splice&#xA;&lt;tagname&gt; to  - splice a value in before&#xA;&lt;mixed&gt; the  - value to splice in&#xA;&lt;string&gt; the  - new tag name&#xA;" ilk="function" line="1990" lineend="1997" name="_ksplice" returns="array_merge()" signature="_ksplice($array, $key, $value, $newkey)"><variable ilk="argument" line="1990" name="array" /><variable ilk="argument" line="1990" name="key" /><variable ilk="argument" line="1990" name="value" /><variable ilk="argument" line="1990" name="newkey" /><variable citdl="array_slice()" line="1994" name="before" /><variable citdl="array_slice()" line="1993" name="after" /><variable citdl="array_search()" line="1992" name="offset" /></scope><scope doc="&#xA;&lt;array&gt; a  - list of possible keys, in the order they may occur&#xA;&lt;mixed&gt; contents  - of the new package.xml tag&#xA;&lt;string&gt; tag  - name&#xA;Access private&#xA;" ilk="function" line="2005" lineend="2014" name="_insertBefore" returns="array" signature="_insertBefore($array, $keys, $contents, $newkey)"><variable ilk="argument" line="2005" name="array" /><variable ilk="argument" line="2005" name="keys" /><variable ilk="argument" line="2005" name="contents" /><variable ilk="argument" line="2005" name="newkey" /><variable citdl="keys[]" line="2007" name="key" /></scope><scope doc="&#xA;&lt;subsection&gt; of  - {@link $_packageInfo}&#xA;&lt;array|string&gt; tag  - contents&#xA;&lt;array&gt; format:  - &#xA;&lt;pre&gt;&#xA;array(&#xA;  tagname =&gt; array(list of tag names that follow this one),&#xA;  childtagname =&gt; array(list of child tag names that follow this one),&#xA;)&#xA;&lt;/pre&gt;&#xA;This allows construction of nested tags&#xA;Access private&#xA;" ilk="function" line="2030" lineend="2057" name="_mergeTag" returns="manip" signature="_mergeTag($manip, $contents, $order)"><variable ilk="argument" line="2030" name="manip" /><variable ilk="argument" line="2030" name="contents" /><variable ilk="argument" line="2030" name="order" /><variable line="2033" name="tag" /><variable citdl="order[]" line="2033" name="curorder" /></scope></scope></scope>