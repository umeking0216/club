<scope ilk="blob" lang="PHP" name="v1.php" src="/usr/share/pear/PEAR/PackageFile/v1.php"><import line="18" module="PEAR/ErrorStack.php" /><import line="1308" module="PEAR/PackageFile/Generator/v1.php" /><import line="1331" module="Archive/Tar.php" /><variable citdl="int" ilk="constant" line="23" name="PEAR_PACKAGEFILE_ERROR_NO_XML_EXT" /><variable citdl="int" ilk="constant" line="28" name="PEAR_PACKAGEFILE_ERROR_CANT_MAKE_PARSER" /><variable citdl="int" ilk="constant" line="33" name="PEAR_PACKAGEFILE_ERROR_PARSER_ERROR" /><variable citdl="int" ilk="constant" line="38" name="PEAR_PACKAGEFILE_ERROR_NO_NAME" /><variable citdl="int" ilk="constant" line="43" name="PEAR_PACKAGEFILE_ERROR_INVALID_NAME" /><variable citdl="int" ilk="constant" line="48" name="PEAR_PACKAGEFILE_ERROR_NO_SUMMARY" /><variable citdl="int" ilk="constant" line="53" name="PEAR_PACKAGEFILE_ERROR_MULTILINE_SUMMARY" /><variable citdl="int" ilk="constant" line="58" name="PEAR_PACKAGEFILE_ERROR_NO_DESCRIPTION" /><variable citdl="int" ilk="constant" line="63" name="PEAR_PACKAGEFILE_ERROR_NO_LICENSE" /><variable citdl="int" ilk="constant" line="68" name="PEAR_PACKAGEFILE_ERROR_NO_VERSION" /><variable citdl="int" ilk="constant" line="73" name="PEAR_PACKAGEFILE_ERROR_INVALID_VERSION" /><variable citdl="int" ilk="constant" line="78" name="PEAR_PACKAGEFILE_ERROR_NO_STATE" /><variable citdl="int" ilk="constant" line="83" name="PEAR_PACKAGEFILE_ERROR_INVALID_STATE" /><variable citdl="int" ilk="constant" line="88" name="PEAR_PACKAGEFILE_ERROR_NO_DATE" /><variable citdl="int" ilk="constant" line="93" name="PEAR_PACKAGEFILE_ERROR_INVALID_DATE" /><variable citdl="int" ilk="constant" line="98" name="PEAR_PACKAGEFILE_ERROR_NO_NOTES" /><variable citdl="int" ilk="constant" line="103" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTAINERS" /><variable citdl="int" ilk="constant" line="108" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTHANDLE" /><variable citdl="int" ilk="constant" line="113" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTROLE" /><variable citdl="int" ilk="constant" line="118" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTNAME" /><variable citdl="int" ilk="constant" line="123" name="PEAR_PACKAGEFILE_ERROR_NO_MAINTEMAIL" /><variable citdl="int" ilk="constant" line="128" name="PEAR_PACKAGEFILE_ERROR_INVALID_MAINTROLE" /><variable citdl="int" ilk="constant" line="133" name="PEAR_PACKAGEFILE_ERROR_NO_DEPNAME" /><variable citdl="int" ilk="constant" line="138" name="PEAR_PACKAGEFILE_ERROR_NO_DEPTYPE" /><variable citdl="int" ilk="constant" line="143" name="PEAR_PACKAGEFILE_ERROR_NO_DEPREL" /><variable citdl="int" ilk="constant" line="148" name="PEAR_PACKAGEFILE_ERROR_NO_DEPVERSION" /><variable citdl="int" ilk="constant" line="153" name="PEAR_PACKAGEFILE_ERROR_INVALID_DEPREL" /><variable citdl="int" ilk="constant" line="158" name="PEAR_PACKAGEFILE_ERROR_INVALID_DEPTYPE" /><variable citdl="int" ilk="constant" line="163" name="PEAR_PACKAGEFILE_ERROR_INVALID_DEPOPTIONAL" /><variable citdl="int" ilk="constant" line="168" name="PEAR_PACKAGEFILE_ERROR_INVALID_DEPNAME" /><variable citdl="int" ilk="constant" line="173" name="PEAR_PACKAGEFILE_ERROR_UNKNOWN_DEPCHANNEL" /><variable citdl="int" ilk="constant" line="178" name="PEAR_PACKAGEFILE_ERROR_DEPVERSION_IGNORED" /><variable citdl="int" ilk="constant" line="183" name="PEAR_PACKAGEFILE_ERROR_DEPNAME_IGNORED" /><variable citdl="int" ilk="constant" line="188" name="PEAR_PACKAGEFILE_ERROR_NO_CONFNAME" /><variable citdl="int" ilk="constant" line="193" name="PEAR_PACKAGEFILE_ERROR_NO_CONFPROMPT" /><variable citdl="int" ilk="constant" line="198" name="PEAR_PACKAGEFILE_ERROR_INVALID_FILEROLE" /><variable citdl="int" ilk="constant" line="203" name="PEAR_PACKAGEFILE_ERROR_NO_FILEROLE" /><variable citdl="int" ilk="constant" line="208" name="PEAR_PACKAGEFILE_ERROR_INVALID_PHPFILE" /><variable citdl="int" ilk="constant" line="214" name="PEAR_PACKAGEFILE_ERROR_NO_PNAME_PREFIX" /><variable citdl="int" ilk="constant" line="219" name="PEAR_PACKAGEFILE_ERROR_UNKNOWN_CHANNEL" /><variable citdl="int" ilk="constant" line="224" name="PEAR_PACKAGEFILE_ERROR_NO_FILES" /><variable citdl="int" ilk="constant" line="229" name="PEAR_PACKAGEFILE_ERROR_INVALID_FILE" /><variable citdl="int" ilk="constant" line="234" name="PEAR_PACKAGEFILE_ERROR_CHANNELVAL" /><variable citdl="int" ilk="constant" line="239" name="PEAR_PACKAGEFILE_ERROR_PHP5" /><variable citdl="int" ilk="constant" line="244" name="PEAR_PACKAGEFILE_ERROR_FILE_NOTFOUND" /><variable citdl="int" ilk="constant" line="249" name="PEAR_PACKAGEFILE_PHP_NO_NOT" /><variable citdl="int" ilk="constant" line="254" name="PEAR_PACKAGEFILE_ERROR_NON_ISO_CHARS" /><variable citdl="int" ilk="constant" line="259" name="PEAR_PACKAGEFILE_ERROR_NO_DEPPHPVERSION" /><variable citdl="int" ilk="constant" line="264" name="PEAR_PACKAGEFILE_ERROR_NO_LEAD" /><variable citdl="int" ilk="constant" line="269" name="PEAR_PACKAGEFILE_ERROR_INVALID_FILENAME" /><scope doc="package.xml encapsulator&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="281" lineend="1601" name="PEAR_PackageFile_v1"><variable citdl="PEAR_ErrorStack" doc="@access private&#xA;@var PEAR_ErrorStack&#xA;@access private" line="288" name="_stack" /><variable citdl="PEAR_Registry" doc="A registry object, used to access the package name validation regex for non-standard channels&#xA;@var PEAR_Registry&#xA;@access private" line="295" name="_registry" /><variable citdl="logger" doc="An object that contains a log method that matches PEAR_Common::log&apos;s signature&#xA;@var object&#xA;@access private" line="302" name="_logger" /><variable citdl="array" doc="Parsed package information&#xA;@var array&#xA;@access private" line="309" name="_packageInfo" /><variable citdl="string" doc="path to package.xml&#xA;@var string&#xA;@access private" line="316" name="_packageFile" /><variable citdl="string" doc="path to package .tgz or false if this is a local/extracted package.xml&#xA;@var string&#xA;@access private" line="323" name="_archiveFile" /><variable citdl="int" doc="@var int&#xA;@access private" line="329" name="_isValid" /><variable citdl="boolean" doc="Determines whether this packagefile was initialized only with partial package info&#xA;&#xA;If this package file was constructed via parsing REST, it will only contain&#xA;&#xA;- package name&#xA;- channel name&#xA;- dependencies &#xA;@var boolean&#xA;@access private" line="342" name="_incomplete" /><scope attributes="__ctor__" doc="&#xA;&lt;bool&gt; determines  - whether to return a PEAR_Error object, or use the PEAR_ErrorStack&#xA;&lt;string&gt; Name  - of Error Stack class to use.&#xA;" ilk="function" line="348" lineend="353" name="__construct" signature="__construct()" /><scope ilk="function" line="355" lineend="358" name="installBinary" returns="boolean" signature="installBinary($installer)"><variable ilk="argument" line="355" name="installer" /></scope><scope ilk="function" line="360" lineend="363" name="isExtension" returns="boolean" signature="isExtension($name)"><variable ilk="argument" line="360" name="name" /></scope><scope ilk="function" line="365" lineend="369" name="setConfig" signature="setConfig(&amp; $config)"><variable ilk="argument" line="365" name="config" /></scope><variable citdl="config" line="367" name="_config" /><scope ilk="function" line="371" lineend="374" name="setRequestedGroup" signature="setRequestedGroup()" /><scope doc="For saving in the registry.&#xA;&#xA;Set the last version that was installed&#xA;@param string" ilk="function" line="382" lineend="385" name="setLastInstalledVersion" signature="setLastInstalledVersion($version)"><variable ilk="argument" line="382" name="version" /></scope><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="390" lineend="396" name="getLastInstalledVersion" returns="string" signature="string getLastInstalledVersion()" /><scope ilk="function" line="398" lineend="401" name="getInstalledBinary" returns="boolean" signature="getInstalledBinary()" /><scope ilk="function" line="403" lineend="406" name="listPostinstallScripts" returns="boolean" signature="listPostinstallScripts()" /><scope ilk="function" line="408" lineend="411" name="initPostinstallScripts" returns="boolean" signature="initPostinstallScripts()" /><scope ilk="function" line="413" lineend="419" name="setLogger" returns="PEAR.raiseError()" signature="setLogger(&amp; $logger)"><variable ilk="argument" line="413" name="logger" /></scope><scope ilk="function" line="421" lineend="425" name="setPackagefile" signature="setPackagefile($file, $archive = false)"><variable ilk="argument" line="421" name="file" /><variable default="false" ilk="argument" line="421" name="archive" /></scope><scope ilk="function" line="427" lineend="430" name="getPackageFile" signature="getPackageFile()" /><scope ilk="function" line="432" lineend="435" name="getPackageType" returns="string" signature="getPackageType()" /><scope ilk="function" line="437" lineend="440" name="getArchiveFile" returns="this._archiveFile" signature="getArchiveFile()" /><scope ilk="function" line="442" lineend="449" name="packageInfo" returns="boolean" signature="packageInfo($field)"><variable ilk="argument" line="442" name="field" /></scope><scope ilk="function" line="451" lineend="457" name="setDirtree" signature="setDirtree($path)"><variable ilk="argument" line="451" name="path" /></scope><scope ilk="function" line="459" lineend="465" name="getDirtree" returns="this._packageInfo" signature="getDirtree()" /><scope ilk="function" line="467" lineend="470" name="resetDirtree" signature="resetDirtree()" /><scope ilk="function" line="472" lineend="476" name="fromArray" signature="fromArray($pinfo)"><variable ilk="argument" line="472" name="pinfo" /></scope><scope ilk="function" line="478" lineend="481" name="isIncomplete" returns="this._incomplete" signature="isIncomplete()" /><scope ilk="function" line="483" lineend="486" name="getChannel" returns="string" signature="getChannel()" /><scope ilk="function" line="488" lineend="491" name="getUri" returns="boolean" signature="getUri()" /><scope ilk="function" line="493" lineend="496" name="getTime" returns="boolean" signature="getTime()" /><scope ilk="function" line="498" lineend="504" name="getExtends" returns="this._packageInfo" signature="getExtends()" /><scope doc="&#xA;Returns array &#xA;" ilk="function" line="509" lineend="515" name="toArray" returns="array" signature="array toArray()" /><scope ilk="function" line="517" lineend="520" name="getArray" returns="this._packageInfo" signature="getArray()" /><scope ilk="function" line="522" lineend="525" name="getName" returns="this.getPackage()" signature="getName()" /><scope ilk="function" line="527" lineend="533" name="getPackage" returns="this._packageInfo" signature="getPackage()" /><scope doc="&#xA;WARNING - don&apos;t use this unless you know what you are doing&#xA;" ilk="function" line="538" lineend="541" name="setRawPackage" signature="setRawPackage($package)"><variable ilk="argument" line="538" name="package" /></scope><scope ilk="function" line="543" lineend="547" name="setPackage" signature="setPackage($package)"><variable ilk="argument" line="543" name="package" /></scope><scope ilk="function" line="549" lineend="555" name="getVersion" returns="this._packageInfo" signature="getVersion()" /><scope ilk="function" line="557" lineend="561" name="setVersion" signature="setVersion($version)"><variable ilk="argument" line="557" name="version" /></scope><scope ilk="function" line="563" lineend="566" name="clearMaintainers" signature="clearMaintainers()" /><scope ilk="function" line="568" lineend="574" name="getMaintainers" returns="this._packageInfo" signature="getMaintainers()" /><scope doc="&#xA;Adds a new maintainer - no checking of duplicates is performed, use&#xA;updatemaintainer for that purpose.&#xA;" ilk="function" line="580" lineend="585" name="addMaintainer" signature="addMaintainer($role, $handle, $name, $email)"><variable ilk="argument" line="580" name="role" /><variable ilk="argument" line="580" name="handle" /><variable ilk="argument" line="580" name="name" /><variable ilk="argument" line="580" name="email" /></scope><scope ilk="function" line="587" lineend="606" name="updateMaintainer" returns="this.addMaintainer()" signature="updateMaintainer($role, $handle, $name, $email)"><variable ilk="argument" line="587" name="role" /><variable ilk="argument" line="587" name="handle" /><variable ilk="argument" line="587" name="name" /><variable ilk="argument" line="587" name="email" /><variable line="594" name="i" /><variable citdl="boolean" line="589" name="found" /><variable citdl="this._packageInfo[]" line="594" name="maintainer" /></scope><scope ilk="function" line="608" lineend="624" name="deleteMaintainer" returns="boolean" signature="deleteMaintainer($handle)"><variable ilk="argument" line="608" name="handle" /><variable line="611" name="i" /><variable citdl="boolean" line="610" name="found" /><variable citdl="this._packageInfo[]" line="611" name="maintainer" /></scope><scope ilk="function" line="626" lineend="632" name="getState" returns="this._packageInfo" signature="getState()" /><scope ilk="function" line="634" lineend="637" name="setRawState" signature="setRawState($state)"><variable ilk="argument" line="634" name="state" /></scope><scope ilk="function" line="639" lineend="643" name="setState" signature="setState($state)"><variable ilk="argument" line="639" name="state" /></scope><scope ilk="function" line="645" lineend="651" name="getDate" returns="this._packageInfo" signature="getDate()" /><scope ilk="function" line="653" lineend="657" name="setDate" signature="setDate($date)"><variable ilk="argument" line="653" name="date" /></scope><scope ilk="function" line="659" lineend="665" name="getLicense" returns="this._packageInfo" signature="getLicense()" /><scope ilk="function" line="667" lineend="671" name="setLicense" signature="setLicense($date)"><variable ilk="argument" line="667" name="date" /></scope><scope ilk="function" line="673" lineend="679" name="getSummary" returns="this._packageInfo" signature="getSummary()" /><scope ilk="function" line="681" lineend="685" name="setSummary" signature="setSummary($summary)"><variable ilk="argument" line="681" name="summary" /></scope><scope ilk="function" line="687" lineend="693" name="getDescription" returns="this._packageInfo" signature="getDescription()" /><scope ilk="function" line="695" lineend="699" name="setDescription" signature="setDescription($desc)"><variable ilk="argument" line="695" name="desc" /></scope><scope ilk="function" line="701" lineend="707" name="getNotes" returns="this._packageInfo" signature="getNotes()" /><scope ilk="function" line="709" lineend="713" name="setNotes" signature="setNotes($notes)"><variable ilk="argument" line="709" name="notes" /></scope><scope ilk="function" line="715" lineend="721" name="getDeps" returns="this._packageInfo" signature="getDeps()" /><scope doc="&#xA;Reset dependencies prior to adding new ones&#xA;" ilk="function" line="726" lineend="729" name="clearDeps" signature="clearDeps()" /><scope ilk="function" line="731" lineend="738" name="addPhpDep" signature="addPhpDep($version, $rel)"><variable ilk="argument" line="731" name="version" /><variable ilk="argument" line="731" name="rel" /></scope><scope ilk="function" line="740" lineend="752" name="addPackageDep" signature="addPackageDep($name, $version, $rel, $optional = &apos;no&apos;)"><variable ilk="argument" line="740" name="name" /><variable ilk="argument" line="740" name="version" /><variable ilk="argument" line="740" name="rel" /><variable default="&apos;no&apos;" ilk="argument" line="740" name="optional" /><variable citdl="array()" line="747" name="dep" /></scope><scope ilk="function" line="754" lineend="763" name="addExtensionDep" signature="addExtensionDep($name, $version, $rel, $optional = &apos;no&apos;)"><variable ilk="argument" line="754" name="name" /><variable ilk="argument" line="754" name="version" /><variable ilk="argument" line="754" name="rel" /><variable default="&apos;no&apos;" ilk="argument" line="754" name="optional" /></scope><scope doc="&#xA;WARNING - do not use this function directly unless you know what you&apos;re doing&#xA;" ilk="function" line="768" lineend="771" name="setDeps" signature="setDeps($deps)"><variable ilk="argument" line="768" name="deps" /></scope><scope ilk="function" line="773" lineend="777" name="hasDeps" signature="hasDeps()" /><scope ilk="function" line="779" lineend="782" name="getDependencyGroup" returns="boolean" signature="getDependencyGroup($group)"><variable ilk="argument" line="779" name="group" /></scope><scope ilk="function" line="784" lineend="787" name="isCompatible" returns="boolean" signature="isCompatible($pf)"><variable ilk="argument" line="784" name="pf" /></scope><scope ilk="function" line="789" lineend="792" name="isSubpackageOf" returns="p.isSubpackage()" signature="isSubpackageOf($p)"><variable ilk="argument" line="789" name="p" /></scope><scope ilk="function" line="794" lineend="797" name="isSubpackage" returns="boolean" signature="isSubpackage($p)"><variable ilk="argument" line="794" name="p" /></scope><scope ilk="function" line="799" lineend="816" name="dependsOn" returns="boolean" signature="dependsOn($package, $channel)"><variable ilk="argument" line="799" name="package" /><variable ilk="argument" line="799" name="channel" /><variable citdl="deps[]" line="807" name="dep" /></scope><scope ilk="function" line="818" lineend="824" name="getConfigureOptions" returns="this._packageInfo" signature="getConfigureOptions()" /><scope ilk="function" line="826" lineend="830" name="hasConfigureOptions" signature="hasConfigureOptions()" /><scope ilk="function" line="832" lineend="842" name="addConfigureOption" signature="addConfigureOption($name, $prompt, $default = false)"><variable ilk="argument" line="832" name="name" /><variable ilk="argument" line="832" name="prompt" /><variable default="false" ilk="argument" line="832" name="default" /><variable citdl="array()" line="834" name="o" /></scope><scope ilk="function" line="844" lineend="847" name="clearConfigureOptions" signature="clearConfigureOptions()" /><scope ilk="function" line="849" lineend="855" name="getProvides" returns="this._packageInfo" signature="getProvides()" /><scope ilk="function" line="857" lineend="860" name="getProvidesExtension" returns="boolean" signature="getProvidesExtension()" /><scope ilk="function" line="862" lineend="873" name="addFile" signature="addFile($dir, $file, $attrs)"><variable ilk="argument" line="862" name="dir" /><variable ilk="argument" line="862" name="file" /><variable ilk="argument" line="862" name="attrs" /></scope><scope ilk="function" line="875" lineend="878" name="getInstallationFilelist" returns="this.getFilelist()" signature="getInstallationFilelist()" /><scope ilk="function" line="880" lineend="886" name="getFilelist" returns="this._packageInfo" signature="getFilelist()" /><scope ilk="function" line="888" lineend="891" name="setFileAttribute" signature="setFileAttribute($file, $attr, $value)"><variable ilk="argument" line="888" name="file" /><variable ilk="argument" line="888" name="attr" /><variable ilk="argument" line="888" name="value" /></scope><scope ilk="function" line="893" lineend="896" name="resetFilelist" signature="resetFilelist()" /><scope ilk="function" line="898" lineend="904" name="setInstalledAs" returns="this._packageInfo" signature="setInstalledAs($file, $path)"><variable ilk="argument" line="898" name="file" /><variable ilk="argument" line="898" name="path" /></scope><scope ilk="function" line="906" lineend="914" name="installedFile" signature="installedFile($file, $atts)"><variable ilk="argument" line="906" name="file" /><variable ilk="argument" line="906" name="atts" /></scope><scope ilk="function" line="916" lineend="922" name="getChangelog" returns="this._packageInfo" signature="getChangelog()" /><scope ilk="function" line="924" lineend="927" name="getPackagexmlVersion" returns="string" signature="getPackagexmlVersion()" /><scope doc="&#xA;Wrapper to {@link PEAR_ErrorStack::getErrors()}&#xA;&lt;boolean&gt; determines  - whether to purge the error stack after retrieving&#xA;Returns array &#xA;" ilk="function" line="934" lineend="937" name="getValidationWarnings" returns="array" signature="array getValidationWarnings($purge = true)"><variable default="true" ilk="argument" line="934" name="purge" /></scope><scope doc="&#xA;Validation error.  Also marks the object contents as invalid&#xA;&lt;error&gt; code  - &#xA;&lt;array&gt; error  - information&#xA;Access private&#xA;" ilk="function" line="946" lineend="950" name="_validateError" signature="_validateError($code, $params = array())"><variable ilk="argument" line="946" name="code" /><variable default="array()" ilk="argument" line="946" name="params" /></scope><scope doc="&#xA;Validation warning.  Does not mark the object contents invalid.&#xA;&lt;error&gt; code  - &#xA;&lt;array&gt; error  - information&#xA;Access private&#xA;" ilk="function" line="958" lineend="961" name="_validateWarning" signature="_validateWarning($code, $params = array())"><variable ilk="argument" line="958" name="code" /><variable default="array()" ilk="argument" line="958" name="params" /></scope><scope doc="&#xA;&lt;integer&gt; error  - code&#xA;Access protected&#xA;" ilk="function" line="967" lineend="1049" name="_getErrorMessage" returns="array()" signature="_getErrorMessage()" /><scope doc="&#xA;Validate XML package definition file.&#xA;Access public&#xA;Returns boolean &#xA;" ilk="function" line="1057" lineend="1243" name="validate" returns="boolean" signature="boolean validate($state = PEAR_VALIDATE_NORMAL, $nofilechecking = false)"><variable default="PEAR_VALIDATE_NORMAL" ilk="argument" line="1057" name="state" /><variable default="false" ilk="argument" line="1057" name="nofilechecking" /><variable citdl="this._packageInfo" line="1063" name="info" /><variable citdl="info[]" line="1171" name="c" /><variable citdl="info[]" line="1127" name="d" /><variable citdl="int" line="1099" name="i" /><variable citdl="this._registry.getChannel()" line="1218" name="chan" /><variable citdl="info[]" line="1100" name="m" /><variable citdl="boolean" line="1098" name="haslead" /><variable citdl="info[]" line="1187" name="fa" /><variable citdl="chan.getValidationObject()" line="1223" name="validator" /><variable line="1187" name="file" /><variable citdl="failures[]" line="1227" name="error" /><variable citdl="validator.getFailures()" line="1226" name="failures" /><variable citdl="failures[]" line="1230" name="warning" /></scope><variable citdl="pn" line="1066" name="_packageName" /><scope ilk="function" line="1245" lineend="1298" name="_analyzePhpFiles" returns="boolean" signature="_analyzePhpFiles()"><variable citdl="this.getFilelist()" line="1257" name="info" /><variable citdl="array()[]" line="1275" name="what" /><variable citdl="dirname()" line="1253" name="dir_prefix" /><variable line="1275" name="key" /><variable citdl="info[]" line="1258" name="fa" /><variable citdl="PEAR_Common" line="1254" name="common" /><variable line="1258" name="file" /><variable citdl="this._analyzeSourceCode()" line="1266" name="srcinfo" /><variable citdl="strlen()" line="1273" name="pnl" /><variable line="1288" name="type" /><variable line="1256" name="log" /></scope><scope doc="&#xA;Get the default xml generator object&#xA;Returns pear_packagefile_generator_v1 &#xA;" ilk="function" line="1305" lineend="1312" name="getDefaultGenerator" returns="PEAR_PackageFile_Generator_v1" signature="pear_packagefile_generator_v1 &amp;getDefaultGenerator()"><variable citdl="PEAR_PackageFile_Generator_v1" line="1310" name="a" /></scope><scope doc="Get the contents of a file listed within the package.xml&#xA;@param string&#xA;@return string" ilk="function" line="1319" lineend="1345" name="getFileContents" returns="string" signature="string getFileContents($file)"><variable ilk="argument" line="1319" name="file" /><variable citdl="Archive_Tar" line="1333" name="tar" /><variable citdl="dirname()" line="1322" name="dir" /></scope><scope doc="&#xA;Analyze the source code of the given PHP file&#xA;&lt;string&gt; Filename  - of the PHP file&#xA;Returns mixed &#xA;Access private&#xA;" ilk="function" line="1355" lineend="1533" name="_analyzeSourceCode" returns="mixed" signature="mixed _analyzeSourceCode($file)"><variable ilk="argument" line="1355" name="file" /><variable citdl="string" line="1390" name="lastphpdoc" /><variable citdl="string" line="1394" name="current_function" /><variable citdl="int" line="1387" name="paren_level" /><variable citdl="file_get_contents()" line="1373" name="contents" /><variable citdl="array()" line="1399" name="declared_methods" /><variable citdl="string" line="1391" name="current_class" /><variable citdl="array()" line="1397" name="declared_interfaces" /><variable citdl="array()" line="1398" name="declared_functions" /><variable citdl="array()" line="1396" name="declared_classes" /><variable citdl="array()" line="1402" name="extends" /><variable citdl="string" line="1392" name="current_interface" /><variable citdl="array()" line="1401" name="used_functions" /><variable citdl="array()" line="1404" name="nodeps" /><variable citdl="boolean" line="1405" name="inquote" /><variable citdl="token_get_all()" line="1374" name="tokens" /><variable citdl="boolean" line="1406" name="interface" /><variable citdl="brace_level" line="1395" name="current_function_level" /><variable attributes="__not_yet_defined__" citdl="string" line="1409" name="data" /><variable citdl="tokens" line="1516" name="class" /><variable citdl="array()" line="1403" name="implements" /><variable line="1407" name="i" /><variable citdl="array()" line="1492" name="m" /><variable citdl="int" line="1386" name="look_for" /><variable citdl="brace_level" line="1393" name="current_class_level" /><variable attributes="__not_yet_defined__" citdl="tokens" line="1409" name="token" /><variable citdl="int" line="1388" name="bracket_level" /><variable citdl="int" line="1389" name="brace_level" /><variable citdl="array()" line="1400" name="used_classes" /></scope><scope doc="&#xA;Build a &quot;provides&quot; array from data returned by&#xA;analyzeSourceCode().  The format of the built array is like&#xA;this:&#xA; array(&#xA;   &apos;class;MyClass&apos; =&gt; &apos;array(&apos;type&apos; =&gt; &apos;class&apos;, &apos;name&apos; =&gt; &apos;MyClass&apos;),&#xA;   ...&#xA; )&#xA;&lt;array&gt; $srcinfo  - array with information about a source file&#xA;as returned by the analyzeSourceCode() method.&#xA;Returns void &#xA;Access private&#xA;" ilk="function" line="1554" lineend="1598" name="_buildProvidesArray" signature="void _buildProvidesArray(array $srcinfo)"><variable citdl="array" ilk="argument" line="1554" name="srcinfo" /><variable citdl="string" line="1576" name="function" /><variable citdl="basename()" line="1559" name="file" /><variable citdl="srcinfo[]" line="1574" name="methods" /><variable citdl="methods[]" line="1575" name="method" /><variable citdl="strlen()" line="1561" name="pnl" /><variable citdl="string" line="1563" name="key" /><variable citdl="this.getPackage()" line="1560" name="pn" /><variable citdl="srcinfo[]" line="1562" name="class" /></scope></scope><variable citdl="T_COMMENT" ilk="constant" line="1361" name="T_DOC_COMMENT" /><variable ilk="constant" line="1364" name="T_INTERFACE" /><variable ilk="constant" line="1367" name="T_IMPLEMENTS" /></scope>