<scope ilk="blob" lang="PHP" name="PackageFile.php" src="/usr/share/pear/PEAR/PackageFile.php"><import line="19" module="PEAR/Validate.php" /><import line="102" module="PEAR/PackageFile/Parser/v" /><import line="130" module="PEAR/PackageFile/v" /><import line="240" module="PEAR/ErrorStack.php" /><import line="304" module="Archive/Tar.php" /><variable citdl="int" ilk="constant" line="23" name="PEAR_PACKAGEFILE_ERROR_NO_PACKAGEVERSION" /><variable citdl="int" ilk="constant" line="28" name="PEAR_PACKAGEFILE_ERROR_INVALID_PACKAGEVERSION" /><scope doc="Abstraction for the package.xml package description file&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="41" lineend="491" name="PEAR_PackageFile"><variable citdl="PEAR_Config" doc="@var PEAR_Config" line="46" name="_config" /><variable citdl="debug" line="47" name="_debug" /><variable citdl="boolean" line="49" name="_logger" /><variable citdl="boolean" doc="@var boolean" line="53" name="_rawReturn" /><variable citdl="array" doc="helper for extracting Archive_Tar errors&#xA;@var array&#xA;@access private" line="60" name="_extractErrors" /><scope attributes="__ctor__" doc="&#xA;&lt;pear_config&gt; $config  - &#xA;&lt;?&gt; $debug  - &#xA;&lt;string&gt; @tmpdir  - Optional temporary directory for uncompressing&#xA;         files&#xA;" ilk="function" line="69" lineend="73" name="__construct" signature="__construct(PEAR_Config &amp; $config, $debug = false)"><variable citdl="PEAR_Config" ilk="argument" line="69" name="config" /><variable default="false" ilk="argument" line="69" name="debug" /></scope><scope doc="&#xA;Turn off validation - return a parsed package.xml without checking it&#xA;This is used by the package-validate command&#xA;" ilk="function" line="80" lineend="83" name="rawReturn" signature="rawReturn()" /><scope ilk="function" line="85" lineend="88" name="setLogger" signature="setLogger(&amp; $l)"><variable ilk="argument" line="85" name="l" /></scope><scope doc="&#xA;Create a PEAR_PackageFile_Parser_v* of a given version.&#xA;&lt;int&gt; $version  - &#xA;Returns pear_packagefile_parser_v1|pear_packagefile_parser_v1 &#xA;" ilk="function" line="95" lineend="107" name="parserFactory" returns="PEAR_PackageFile_Parser_v1" signature="pear_packagefile_parser_v1 &amp;parserFactory(int $version)"><variable citdl="int" ilk="argument" line="95" name="version" /><variable citdl="boolean" line="98" name="a" /><variable citdl="string" line="104" name="class" /></scope><scope doc="&#xA;For simpler unit-testing&#xA;Returns string &#xA;" ilk="function" line="113" lineend="116" name="getClassPrefix" returns="string" signature="string getClassPrefix()" /><scope doc="&#xA;Create a PEAR_PackageFile_v* of a given version.&#xA;&lt;int&gt; $version  - &#xA;Returns pear_packagefile_v1|pear_packagefile_v1 &#xA;" ilk="function" line="123" lineend="135" name="factory" returns="PEAR_PackageFile_v1" signature="pear_packagefile_v1 &amp;factory(int $version)"><variable citdl="int" ilk="argument" line="123" name="version" /><variable citdl="boolean" line="126" name="a" /><variable citdl="this.getClassPrefix()" line="132" name="class" /></scope><scope doc="&#xA;Create a PEAR_PackageFile_v* from its toArray() method&#xA;WARNING: no validation is performed, the array is assumed to be valid,&#xA;always parse from xml if you want validation.&#xA;&lt;array&gt; $arr  - &#xA;Returns pear_packagefilemanager_v1|pear_packagefilemanager_v2 &#xA;Uses    factory() to construct the returned object.&#xA;" ilk="function" line="146" lineend="172" name="fromArray" returns="PEAR_PackageFileManager_v1" signature="pear_packagefilemanager_v1 &amp;fromArray(array $arr)"><variable citdl="array" ilk="argument" line="146" name="arr" /><variable citdl="this.factory()" line="149" name="obj" /></scope><scope doc="&#xA;Create a PEAR_PackageFile_v* from an XML string.&#xA;Access  public&#xA;&lt;string&gt; $data  - contents of package.xml file&#xA;&lt;int&gt; $state  - package state (one of PEAR_VALIDATE_* constants)&#xA;&lt;string&gt; $file  - full path to the package.xml file (and the files&#xA;         it references)&#xA;&lt;string&gt; $archive  - optional name of the archive that the XML was&#xA;         extracted from, if any&#xA;Returns pear_packagefile_v1|pear_packagefile_v2 &#xA;Uses    parserFactory() to construct a parser to load the package.&#xA;" ilk="function" line="186" lineend="276" name="fromXmlString" returns="PEAR_PackageFile_v1" signature="pear_packagefile_v1 &amp;fromXmlString(string $data, int $state, string $file, string $archive = false)"><variable citdl="string" ilk="argument" line="186" name="data" /><variable citdl="int" ilk="argument" line="186" name="state" /><variable citdl="string" ilk="argument" line="186" name="file" /><variable citdl="string" default="false" ilk="argument" line="186" name="archive" /><variable citdl="PEAR.raiseError()" line="219" name="a" /><variable citdl="pf.getValidationWarnings()[]" line="213" name="warning" /><variable citdl="this.parserFactory()" line="194" name="object" /><variable citdl="object.parse()" line="200" name="pf" /><variable attributes="__not_yet_defined__" line="234" name="packageversion" /></scope><scope attributes="static" doc="&#xA;Register a temporary file or directory.  When the destructor is&#xA;executed, all registered temporary files and directories are&#xA;removed.&#xA;&lt;string&gt; $file  - name of file or directory&#xA;Returns void &#xA;" ilk="function" line="286" lineend="289" name="addTempFile" signature="void addTempFile(string $file)"><variable citdl="string" ilk="argument" line="286" name="file" /></scope><scope doc="&#xA;Create a PEAR_PackageFile_v* from a compressed Tar or Tgz file.&#xA;Access  public&#xA;&lt;string&gt; contents  - of package.xml file&#xA;&lt;int&gt; package  - state (one of PEAR_VALIDATE_* constants)&#xA;Returns pear_packagefile_v1|pear_packagefile_v2 &#xA;Using   Archive_Tar to extract the files&#xA;Using   fromPackageFile() to load the package after the package.xml&#xA;         file is extracted.&#xA;" ilk="function" line="301" lineend="379" name="fromTgzFile" returns="PEAR_PackageFile_v1" signature="pear_packagefile_v1 &amp;fromTgzFile($file, $state)"><variable ilk="argument" line="301" name="file" /><variable ilk="argument" line="301" name="state" /><variable citdl="name" line="335" name="xml" /><variable citdl="file" line="338" name="name" /><variable citdl="Archive_Tar" line="307" name="tar" /><variable citdl="implode()" line="365" name="extra" /><variable citdl="PEAR.raiseError()" line="320" name="ret" /><variable citdl="tar.listContent()" line="312" name="content" /><variable citdl="file" line="336" name="origfile" /><variable citdl="System.mktemp()" line="353" name="tmpdir" /><variable attributes="__not_yet_defined__" line="347" name="match" /></scope><scope doc="&#xA;helper callback for extracting Archive_Tar errors&#xA;&lt;pear_error|null&gt; $err  - &#xA;Returns array &#xA;Access private&#xA;" ilk="function" line="388" lineend="397" name="_extractErrors" returns="array" signature="array _extractErrors($err = null)"><variable default="null" ilk="argument" line="388" name="err" /><variable citdl="array()" line="393" name="errors" /><variable citdl="errors" line="392" name="e" /></scope><variable attributes="static" citdl="array()" line="390" name="errors" /><scope doc="&#xA;Create a PEAR_PackageFile_v* from a package.xml file.&#xA;Access public&#xA;&lt;string&gt; $descfile  - name of package xml file&#xA;&lt;int&gt; $state  - package state (one of PEAR_VALIDATE_* constants)&#xA;&lt;string|false&gt; $archive  - name of the archive this package.xml came&#xA;         from, if any&#xA;Returns pear_packagefile_v1|pear_packagefile_v2 &#xA;Uses    PEAR_PackageFile::fromXmlString to create the oject after the&#xA;         XML is loaded from the package.xml file.&#xA;" ilk="function" line="411" lineend="430" name="fromPackageFile" returns="PEAR_PackageFile_v1" signature="pear_packagefile_v1 &amp;fromPackageFile(string $descfile, int $state, $archive = false)"><variable citdl="string" ilk="argument" line="411" name="descfile" /><variable citdl="int" ilk="argument" line="411" name="state" /><variable default="false" ilk="argument" line="411" name="archive" /><variable citdl="boolean" line="413" name="fp" /><variable citdl="PEAR.raiseError()" line="420" name="a" /><variable citdl="file_get_contents()" line="427" name="data" /><variable citdl="PEAR_PackageFile.fromXmlString()" line="428" name="ret" /></scope><scope doc="&#xA;Create a PEAR_PackageFile_v* from a .tgz archive or package.xml file.&#xA;This method is able to extract information about a package from a .tgz&#xA;archive or from a XML package definition file.&#xA;Access public&#xA;&lt;string&gt; $info  - file name&#xA;&lt;int&gt; $state  - package state (one of PEAR_VALIDATE_* constants)&#xA;Returns pear_packagefile_v1|pear_packagefile_v2 &#xA;Uses    fromPackageFile() if the file appears to be XML&#xA;Uses    fromTgzFile() to load all non-XML files&#xA;" ilk="function" line="445" lineend="490" name="fromAnyFile" returns="PEAR_PackageFile_v1" signature="pear_packagefile_v1 &amp;fromAnyFile(string $info, int $state)"><variable citdl="string" ilk="argument" line="445" name="info" /><variable citdl="int" ilk="argument" line="445" name="state" /><variable citdl="boolean" line="460" name="fp" /><variable citdl="realpath()" line="448" name="dir_name" /><variable citdl="substr()" line="469" name="tmp" /><variable citdl="fread()" line="476" name="test" /></scope></scope></scope>