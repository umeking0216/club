<scope ilk="blob" lang="PHP" name="Config.php" src="/usr/share/pear/PEAR/Config.php"><import line="20" module="PEAR.php" /><import line="21" module="PEAR/Registry.php" /><import line="22" module="PEAR/Installer/Role.php" /><import line="23" module="System.php" /><import line="808" module="PEAR/Common.php" /><import line="811" module="PEAR/FTP.php" /><import line="2067" module="PEAR/REST/" /><variable line="31" name="PEAR_INSTALL_DIR" /><variable citdl="string" ilk="constant" line="45" name="PEAR_RUNTYPE" /><variable citdl="string" ilk="constant" line="49" name="PEAR_CONFIG_DEFAULT_CHANNEL" /><variable citdl="getenv()" ilk="constant" line="55" name="PEAR_CONFIG_SYSCONFDIR" /><variable citdl="getenv()" ilk="constant" line="64" name="PEAR_CONFIG_DEFAULT_MASTER_SERVER" /><variable citdl="getenv()" ilk="constant" line="71" name="PEAR_CONFIG_DEFAULT_HTTP_PROXY" /><variable citdl="getenv()" ilk="constant" line="80" name="PEAR_CONFIG_DEFAULT_PHP_DIR" /><variable citdl="getenv()" ilk="constant" line="91" name="PEAR_CONFIG_DEFAULT_METADATA_DIR" /><variable citdl="getenv()" ilk="constant" line="98" name="PEAR_CONFIG_DEFAULT_EXT_DIR" /><variable citdl="getenv()" ilk="constant" line="114" name="PEAR_CONFIG_DEFAULT_DOC_DIR" /><variable citdl="getenv()" ilk="constant" line="122" name="PEAR_CONFIG_DEFAULT_BIN_DIR" /><variable citdl="getenv()" ilk="constant" line="129" name="PEAR_CONFIG_DEFAULT_DATA_DIR" /><variable citdl="getenv()" ilk="constant" line="137" name="PEAR_CONFIG_DEFAULT_CFG_DIR" /><variable citdl="getenv()" ilk="constant" line="145" name="PEAR_CONFIG_DEFAULT_WWW_DIR" /><variable citdl="getenv()" ilk="constant" line="153" name="PEAR_CONFIG_DEFAULT_MAN_DIR" /><variable citdl="getenv()" ilk="constant" line="165" name="PEAR_CONFIG_DEFAULT_TEST_DIR" /><variable citdl="getenv()" ilk="constant" line="173" name="PEAR_CONFIG_DEFAULT_TEMP_DIR" /><variable citdl="getenv()" ilk="constant" line="182" name="PEAR_CONFIG_DEFAULT_CACHE_DIR" /><variable citdl="getenv()" ilk="constant" line="191" name="PEAR_CONFIG_DEFAULT_DOWNLOAD_DIR" /><variable citdl="getenv()" ilk="constant" line="200" name="PEAR_CONFIG_DEFAULT_PHP_BIN" /><variable citdl="getenv()" ilk="constant" line="208" name="PEAR_CONFIG_DEFAULT_VERBOSE" /><variable citdl="getenv()" ilk="constant" line="215" name="PEAR_CONFIG_DEFAULT_PREFERRED_STATE" /><variable citdl="getenv()" ilk="constant" line="222" name="PEAR_CONFIG_DEFAULT_UMASK" /><variable citdl="getenv()" ilk="constant" line="229" name="PEAR_CONFIG_DEFAULT_CACHE_TTL" /><variable citdl="getenv()" ilk="constant" line="236" name="PEAR_CONFIG_DEFAULT_SIG_TYPE" /><variable citdl="getenv()" ilk="constant" line="243" name="PEAR_CONFIG_DEFAULT_SIG_BIN" /><variable citdl="getenv()" ilk="constant" line="252" name="PEAR_CONFIG_DEFAULT_SIG_KEYDIR" /><scope classrefs="PEAR" doc="This is a class for storing configuration data, keeping track of&#xA;which are system-defined, user-defined or defaulted.&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 0.1" ilk="class" line="271" lineend="2131" name="PEAR_Config"><variable citdl="array" doc="Array of config files used.&#xA;&#xA;@var array layer =&gt; config file" line="281" name="files" /><variable citdl="array()" line="283" name="layers" /><variable citdl="array" doc="Configuration data, two-dimensional array where the first&#xA;dimension is the config layer (&apos;user&apos;, &apos;system&apos; and &apos;default&apos;),&#xA;and the second dimension is keyname =&gt; value.&#xA;&#xA;The order in the first dimension is important!  Earlier&#xA;layers will shadow later ones when a config value is&#xA;requested (if a &apos;user&apos; value exists, it will be returned first,&#xA;then &apos;system&apos; and finally &apos;default&apos;).&#xA;&#xA;@var array layer =&gt; array(keyname =&gt; value, ...)" line="301" name="configuration" /><variable citdl="array" doc="Configuration values that can be set for a channel&#xA;&#xA;All other configuration values can only have a global value&#xA;@var array&#xA;@access private" line="314" name="_channelConfigInfo" /><variable citdl="array" doc="Channels that can be accessed&#xA;@see setChannels()&#xA;@var array&#xA;@access private" line="322" name="_channels" /><variable citdl="string" doc="This variable is used to control the directory values returned&#xA;@see setInstallRoot();&#xA;@var string|false&#xA;@access private" line="330" name="_installRoot" /><variable citdl="PEAR_Registry" doc="If requested, this will always refer to the registry&#xA;contained in php_dir&#xA;@var PEAR_Registry" line="337" name="_registry" /><variable citdl="array" doc="@var array&#xA;@access private" line="343" name="_regInitialized" /><variable citdl="bool" doc="@var bool&#xA;@access private" line="349" name="_noRegistry" /><variable citdl="integer" doc="amount of errors found while parsing config&#xA;@var integer&#xA;@access private" line="356" name="_errorsFound" /><variable line="357" name="_lastError" /><variable citdl="array" doc="Information about the configuration data.  Stores the type,&#xA;default value and a documentation string for each configuration&#xA;value.&#xA;&#xA;@var array layer =&gt; array(infotype =&gt; value, ...)" line="611" name="configuration_info" /><scope attributes="__ctor__" doc="&#xA;Constructor.&#xA;&lt;string&gt; file  - to read user-defined options from&#xA;&lt;string&gt; file  - to read system-wide defaults from&#xA;&lt;bool&gt; determines  - whether a registry object &quot;follows&quot;&#xA;              the value of php_dir (is automatically created&#xA;              and moved when php_dir is changed)&#xA;&lt;bool&gt; if  - true, fails if configuration files cannot be loaded&#xA;Access public&#xA;See PEAR_Config::singleton&#xA;" ilk="function" line="627" lineend="688" name="__construct" signature="__construct($user_file = &apos;&apos;, $system_file = &apos;&apos;, $ftp_file = false, $strict = true)"><variable default="&apos;&apos;" ilk="argument" line="627" name="user_file" /><variable default="&apos;&apos;" ilk="argument" line="627" name="system_file" /><variable default="false" ilk="argument" line="627" name="ftp_file" /><variable default="true" ilk="argument" line="627" name="strict" /><variable citdl="this.configuration_info[]" line="678" name="info" /><variable line="678" name="key" /><variable line="632" name="sl" /></scope><scope attributes="public static" doc="&#xA;Return the default locations of user and system configuration files&#xA;" ilk="function" line="693" lineend="707" name="getDefaultConfigFiles" returns="array()" signature="getDefaultConfigFiles()"><variable line="695" name="sl" /></scope><scope attributes="public static" doc="&#xA;Static singleton method.  If you want to keep only one instance&#xA;of this class in use, this method will give you a reference to&#xA;the last created PEAR_Config object if one exists, or create a&#xA;new object.&#xA;&lt;string&gt; (optional)  - file to read user-defined options from&#xA;&lt;string&gt; (optional)  - file to read system-wide defaults from&#xA;Returns object  - an existing or new PEAR_Config instance&#xA;See PEAR_Config::PEAR_Config&#xA;" ilk="function" line="722" lineend="735" name="singleton" returns="object" signature="object &amp;singleton($user_file = &apos;&apos;, $system_file = &apos;&apos;, $strict = true)"><variable default="&apos;&apos;" ilk="argument" line="722" name="user_file" /><variable default="&apos;&apos;" ilk="argument" line="722" name="system_file" /><variable default="true" ilk="argument" line="722" name="strict" /><variable citdl="PEAR_Config" line="728" name="t_conf" /></scope><scope doc="&#xA;Determine whether any configuration files have been detected, and whether a&#xA;registry object can be retrieved from this configuration.&#xA;Returns bool &#xA;Since PEAR 1.4.0a1&#xA;" ilk="function" line="743" lineend="750" name="validConfiguration" returns="bool" signature="bool validConfiguration()" /><scope doc="&#xA;Reads configuration data from a file.  All existing values in&#xA;the config layer are discarded and replaced with data from the&#xA;file.&#xA;&lt;string&gt; file  - to read from, if NULL or not specified, the&#xA;              last-used file for the same layer (second param) is used&#xA;&lt;string&gt; config  - layer to insert data into (&apos;user&apos; or &apos;system&apos;)&#xA;Returns bool  - TRUE on success or a PEAR error on failure&#xA;" ilk="function" line="761" lineend="797" name="readConfigFile" returns="bool" signature="bool readConfigFile($file = null, $layer = &apos;user&apos;, $strict = true)"><variable default="null" ilk="argument" line="761" name="file" /><variable default="&apos;user&apos;" ilk="argument" line="761" name="layer" /><variable default="true" ilk="argument" line="761" name="strict" /><variable citdl="this._readConfigDataFrom()" line="771" name="data" /></scope><variable citdl="data" line="778" name="lastError" /><scope doc="&#xA;&lt;string&gt; url  - to the remote config file, like ftp://www.example.com/pear/config.ini&#xA;Returns true|pear_error &#xA;" ilk="function" line="803" lineend="870" name="readFTPConfigFile" returns="true" signature="true readFTPConfigFile($path)"><variable ilk="argument" line="803" name="path" /><variable citdl="System.mktemp()" line="827" name="tmp" /><variable citdl="array()" line="845" name="fail" /><variable citdl="this._ftp.init()" line="821" name="e" /><variable citdl="this.configuration_info[]" line="846" name="val" /><variable line="846" name="key" /></scope><variable citdl="PEAR_FTP" line="819" name="_ftp" /><scope doc="&#xA;Reads the existing configurations and creates the _channels array from it&#xA;" ilk="function" line="875" lineend="888" name="_setupChannels" signature="_setupChannels()"><variable citdl="data[]" line="881" name="info" /><variable line="878" name="layer" /><variable citdl="array_flip()" line="877" name="set" /><variable citdl="int" line="879" name="i" /><variable citdl="this.configuration[]" line="878" name="data" /><variable line="881" name="channel" /></scope><scope ilk="function" line="890" lineend="902" name="deleteChannel" signature="deleteChannel($channel)"><variable ilk="argument" line="890" name="channel" /><variable line="893" name="layer" /><variable citdl="strtolower()" line="892" name="ch" /><variable citdl="this.configuration[]" line="893" name="data" /></scope><scope doc="&#xA;Merges data into a config layer from a file.  Does the same&#xA;thing as readConfigFile, except it does not replace all&#xA;existing values in the config layer.&#xA;&lt;string&gt; file  - to read from&#xA;&lt;bool&gt; whether  - to overwrite existing data (default TRUE)&#xA;&lt;string&gt; config  - layer to insert data into (&apos;user&apos; or &apos;system&apos;)&#xA;&lt;string&gt; if  - true, errors are returned if file opening fails&#xA;Returns bool  - TRUE on success or a PEAR error on failure&#xA;" ilk="function" line="914" lineend="956" name="mergeConfigFile" returns="bool" signature="bool mergeConfigFile($file, $override = true, $layer = &apos;user&apos;, $strict = true)"><variable ilk="argument" line="914" name="file" /><variable default="true" ilk="argument" line="914" name="override" /><variable default="&apos;user&apos;" ilk="argument" line="914" name="layer" /><variable default="true" ilk="argument" line="914" name="strict" /><variable citdl="this._readConfigDataFrom()" line="924" name="data" /></scope><scope attributes="public static" doc="@param array&#xA;@param array&#xA;@return array" ilk="function" line="963" lineend="984" name="arrayMergeRecursive" returns="array" signature="array arrayMergeRecursive($arr2, $arr1)"><variable ilk="argument" line="963" name="arr2" /><variable ilk="argument" line="963" name="arr1" /><variable citdl="arr2[]" line="966" name="data" /><variable line="966" name="key" /><variable citdl="array()" line="965" name="ret" /></scope><scope doc="&#xA;Writes data into a config layer from a file.&#xA;&lt;string|null&gt; file  - to read from, or null for default&#xA;&lt;string&gt; config  - layer to insert data into (&apos;user&apos; or&#xA;              &apos;system&apos;)&#xA;&lt;string|null&gt; data  - to write to config file or null for internal data [DEPRECATED]&#xA;Returns bool  - TRUE on success or a PEAR error on failure&#xA;" ilk="function" line="995" lineend="1037" name="writeConfigFile" returns="bool" signature="bool writeConfigFile($file = null, $layer = &apos;user&apos;, $data = null)"><variable default="null" ilk="argument" line="995" name="file" /><variable default="&apos;user&apos;" ilk="argument" line="995" name="layer" /><variable default="null" ilk="argument" line="995" name="data" /><variable citdl="array()" line="1018" name="opt" /><variable line="1027" name="fp" /><variable line="999" name="type" /><variable citdl="string" line="1032" name="contents" /><variable citdl="this.writeConfigFile()" line="1000" name="err" /></scope><scope doc="&#xA;Reads configuration data from a file and returns the parsed data&#xA;in an array.&#xA;&lt;string&gt; file  - to read from&#xA;Returns array  - configuration data or a PEAR error on failure&#xA;Access private&#xA;" ilk="function" line="1047" lineend="1106" name="_readConfigDataFrom" returns="array" signature="array _readConfigDataFrom($file)"><variable ilk="argument" line="1047" name="file" /><variable citdl="boolean" line="1049" name="fp" /><variable citdl="this.raiseError()" line="1086" name="err" /><variable citdl="boolean" line="1065" name="version" /><variable citdl="string" line="1092" name="error" /><variable citdl="array()" line="1080" name="data" /><variable citdl="file_get_contents()" line="1060" name="contents" /><variable citdl="filesize()" line="1058" name="size" /></scope><scope doc="&#xA;Gets the file used for storing the config for a layer&#xA;&lt;string&gt; $layer  - &apos;user&apos; or &apos;system&apos;&#xA;" ilk="function" line="1113" lineend="1116" name="getConfFile" returns="this.files" signature="getConfFile(string $layer)"><variable citdl="string" ilk="argument" line="1113" name="layer" /></scope><scope doc="&#xA;&lt;string&gt; Configuration  - class name, used for detecting duplicate calls&#xA;&lt;array&gt; information  - on a role as parsed from its xml file&#xA;Returns true|pear_error &#xA;Access private&#xA;" ilk="function" line="1124" lineend="1211" name="_addConfigVars" returns="true" signature="true _addConfigVars($class, $vars)"><variable ilk="argument" line="1124" name="class" /><variable ilk="argument" line="1124" name="vars" /><variable citdl="vars[]" line="1136" name="var" /><variable citdl="string" line="1155" name="real_default" /><variable citdl="var[]" line="1156" name="val" /><variable line="1136" name="name" /><variable line="1156" name="config_var" /></scope><variable attributes="static" citdl="array()" line="1126" name="called" /><scope doc="&#xA;Encodes/scrambles configuration data before writing to files.&#xA;Currently, &apos;password&apos; values will be base64-encoded as to avoid&#xA;that people spot cleartext passwords by accident.&#xA;&lt;array&gt; (reference)  - array to encode values in&#xA;Returns bool  - TRUE on success&#xA;Access private&#xA;" ilk="function" line="1222" lineend="1251" name="_encodeOutput" returns="bool" signature="bool _encodeOutput(&amp; $data)"><variable ilk="argument" line="1222" name="data" /><variable citdl="data[]" line="1226" name="blah" /><variable citdl="this.configuration_info" line="1235" name="type" /><variable citdl="data[]" line="1224" name="value" /><variable line="1224" name="key" /><variable line="1226" name="channel" /></scope><scope doc="&#xA;Decodes/unscrambles configuration data after reading from files.&#xA;&lt;array&gt; (reference)  - array to encode values in&#xA;Returns bool  - TRUE on success&#xA;Access private&#xA;See PEAR_Config::_encodeOutput&#xA;" ilk="function" line="1262" lineend="1293" name="_decodeInput" returns="bool" signature="bool _decodeInput(&amp; $data)"><variable ilk="argument" line="1262" name="data" /><variable citdl="data[]" line="1270" name="blah" /><variable citdl="this.configuration_info" line="1279" name="type" /><variable citdl="data[]" line="1268" name="value" /><variable line="1268" name="key" /><variable line="1270" name="channel" /></scope><scope doc="&#xA;Retrieve the default channel.&#xA;On startup, channels are not initialized, so if the default channel is not&#xA;pear.php.net, then initialize the config.&#xA;&lt;string&gt; registry  - layer&#xA;Returns string|false &#xA;" ilk="function" line="1303" lineend="1330" name="getDefaultChannel" returns="string" signature="string getDefaultChannel($layer = null)"><variable default="null" ilk="argument" line="1303" name="layer" /><variable citdl="this.configuration" line="1305" name="ret" /></scope><scope doc="&#xA;Returns a configuration value, prioritizing layers as per the&#xA;layers property.&#xA;&lt;string&gt; config  - key&#xA;Returns mixed  - the config value, or NULL if not found&#xA;Access public&#xA;" ilk="function" line="1340" lineend="1431" name="get" returns="mixed" signature="mixed get($key, $layer = null, $channel = false)"><variable ilk="argument" line="1340" name="key" /><variable default="null" ilk="argument" line="1340" name="layer" /><variable default="false" ilk="argument" line="1340" name="channel" /><variable citdl="this.configuration" line="1363" name="test" /><variable citdl="reg.getChannel()" line="1390" name="chan" /><variable citdl="this.getRegistry()" line="1388" name="reg" /></scope><variable line="1363" name="layer" /><scope doc="&#xA;Returns a channel-specific configuration value, prioritizing layers as per the&#xA;layers property.&#xA;&lt;string&gt; config  - key&#xA;Returns mixed  - the config value, or NULL if not found&#xA;Access private&#xA;" ilk="function" line="1441" lineend="1486" name="_getChannelValue" returns="mixed" signature="mixed _getChannelValue($key, $layer, $channel)"><variable ilk="argument" line="1441" name="key" /><variable ilk="argument" line="1441" name="layer" /><variable ilk="argument" line="1441" name="channel" /><variable citdl="this.layers[]" line="1449" name="ilayer" /><variable citdl="reg.getChannel()" line="1467" name="chan" /><variable citdl="this.getRegistry()" line="1465" name="reg" /><variable citdl="this.configuration" line="1447" name="ret" /></scope><scope doc="&#xA;Set a config value in a specific layer (defaults to &apos;user&apos;).&#xA;Enforces the types defined in the configuration_info array.  An&#xA;integer config variable will be cast to int, and a set config&#xA;variable will be validated against its legal values.&#xA;&lt;string&gt; config  - key&#xA;&lt;string&gt; config  - value&#xA;&lt;string&gt; (optional)  - config layer&#xA;&lt;string&gt; channel  - to set this value for, or null for global value&#xA;Returns bool  - TRUE on success, FALSE on failure&#xA;" ilk="function" line="1500" lineend="1614" name="set" returns="bool" signature="bool set($key, $value, $layer = &apos;user&apos;, $channel = false)"><variable ilk="argument" line="1500" name="key" /><variable ilk="argument" line="1500" name="value" /><variable default="&apos;user&apos;" ilk="argument" line="1500" name="layer" /><variable default="false" ilk="argument" line="1500" name="channel" /><variable attributes="__not_yet_defined__" line="1541" name="type" /><variable citdl="reg.getChannel()" line="1525" name="chan" /><variable citdl="this.getRegistry()" line="1523" name="reg" /></scope><scope ilk="function" line="1616" lineend="1653" name="_lazyChannelSetup" signature="_lazyChannelSetup($uselayer = false)"><variable default="false" ilk="argument" line="1616" name="uselayer" /><variable citdl="boolean" line="1622" name="merge" /><variable line="1623" name="layer" /><variable citdl="this._registry[]" line="1623" name="p" /></scope><scope doc="Set the list of channels.&#xA;&#xA;This should be set via a call to {@link PEAR_Registry::listChannels()}&#xA;@param array&#xA;@param bool&#xA;@return bool success of operation" ilk="function" line="1663" lineend="1693" name="setChannels" returns="bool" signature="bool setChannels($channels, $merge = false)"><variable ilk="argument" line="1663" name="channels" /><variable default="false" ilk="argument" line="1663" name="merge" /><variable citdl="this.layers[]" line="1681" name="layer" /><variable citdl="channels[]" line="1675" name="channel" /></scope><scope doc="&#xA;Get the type of a config value.&#xA;&lt;string&gt; config  - key&#xA;Returns string  - type, one of &quot;string&quot;, &quot;integer&quot;, &quot;file&quot;,&#xA;&quot;directory&quot;, &quot;set&quot; or &quot;password&quot;.&#xA;Access public&#xA;" ilk="function" line="1706" lineend="1712" name="getType" returns="string" signature="string getType($key)"><variable ilk="argument" line="1706" name="key" /></scope><scope doc="&#xA;Get the documentation for a config value.&#xA;&lt;string&gt; config  - key&#xA;Returns string  - documentation string&#xA;Access public&#xA;" ilk="function" line="1723" lineend="1730" name="getDocs" returns="string" signature="string getDocs($key)"><variable ilk="argument" line="1723" name="key" /></scope><scope doc="&#xA;Get the short documentation for a config value.&#xA;&lt;string&gt; config  - key&#xA;Returns string  - short documentation string&#xA;Access public&#xA;" ilk="function" line="1741" lineend="1748" name="getPrompt" returns="string" signature="string getPrompt($key)"><variable ilk="argument" line="1741" name="key" /></scope><scope doc="&#xA;Get the parameter group for a config key.&#xA;&lt;string&gt; config  - key&#xA;Returns string  - parameter group&#xA;Access public&#xA;" ilk="function" line="1759" lineend="1766" name="getGroup" returns="string" signature="string getGroup($key)"><variable ilk="argument" line="1759" name="key" /></scope><scope doc="&#xA;Get the list of parameter groups.&#xA;Returns array  - list of parameter groups&#xA;Access public&#xA;" ilk="function" line="1776" lineend="1784" name="getGroups" returns="array" signature="array getGroups()"><variable citdl="array()" line="1778" name="tmp" /><variable citdl="this.configuration_info[]" line="1779" name="info" /><variable line="1779" name="key" /></scope><scope doc="&#xA;Get the list of the parameters in a group.&#xA;&lt;string&gt; $group  - parameter group&#xA;Returns array  - list of parameters in $group&#xA;Access public&#xA;" ilk="function" line="1795" lineend="1805" name="getGroupKeys" returns="array" signature="array getGroupKeys(string $group)"><variable citdl="string" ilk="argument" line="1795" name="group" /><variable citdl="array()" line="1797" name="keys" /><variable citdl="this.configuration_info[]" line="1798" name="info" /><variable line="1798" name="key" /></scope><scope doc="&#xA;Get the list of allowed set values for a config value.  Returns&#xA;NULL for config values that are not sets.&#xA;&lt;string&gt; config  - key&#xA;Returns array  - enumerated array of set values, or NULL if the&#xA;              config key is unknown or not a set&#xA;Access public&#xA;" ilk="function" line="1818" lineend="1834" name="getSetValues" returns="array" signature="array getSetValues($key)"><variable ilk="argument" line="1818" name="key" /><variable citdl="this.configuration_info" line="1824" name="valid_set" /></scope><scope doc="&#xA;Get all the current config keys.&#xA;Returns array  - simple array of config keys&#xA;Access public&#xA;" ilk="function" line="1843" lineend="1859" name="getKeys" returns="array" signature="array getKeys()"><variable citdl="array_merge()" line="1845" name="keys" /><variable citdl="this.configuration" line="1847" name="test" /><variable citdl="this.layers[]" line="1846" name="layer" /><variable citdl="test[]" line="1849" name="configs" /><variable line="1849" name="channel" /></scope><scope doc="&#xA;Remove the a config key from a specific config layer.&#xA;&lt;string&gt; config  - key&#xA;&lt;string&gt; (optional)  - config layer&#xA;&lt;string&gt; (optional)  - channel (defaults to default channel)&#xA;Returns bool  - TRUE on success, FALSE on failure&#xA;Access public&#xA;" ilk="function" line="1871" lineend="1890" name="remove" returns="bool" signature="bool remove($key, $layer = &apos;user&apos;, $channel = null)"><variable ilk="argument" line="1871" name="key" /><variable default="&apos;user&apos;" ilk="argument" line="1871" name="layer" /><variable default="null" ilk="argument" line="1871" name="channel" /></scope><scope doc="&#xA;Temporarily remove an entire config layer.  USE WITH CARE!&#xA;&lt;string&gt; config  - key&#xA;&lt;string&gt; (optional)  - config layer&#xA;Returns bool  - TRUE on success, FALSE on failure&#xA;Access public&#xA;" ilk="function" line="1901" lineend="1909" name="removeLayer" returns="bool" signature="bool removeLayer($layer)"><variable ilk="argument" line="1901" name="layer" /></scope><scope doc="&#xA;Stores configuration data in a layer.&#xA;&lt;string&gt; config  - layer to store&#xA;Returns bool  - TRUE on success, or PEAR error on failure&#xA;Access public&#xA;" ilk="function" line="1919" lineend="1922" name="store" returns="bool" signature="bool store($layer = &apos;user&apos;, $data = null)"><variable default="&apos;user&apos;" ilk="argument" line="1919" name="layer" /><variable default="null" ilk="argument" line="1919" name="data" /></scope><scope doc="&#xA;Tells what config layer that gets to define a key.&#xA;&lt;string&gt; config  - key&#xA;&lt;boolean&gt; return  - the defining channel&#xA;Returns string|array  - the config layer, or an empty string if not found.&#xA;        if $returnchannel, the return is an array array(&apos;layer&apos; =&gt; layername,&#xA;        &apos;channel&apos; =&gt; channelname), or an empty string if not found&#xA;Access public&#xA;" ilk="function" line="1937" lineend="1959" name="definedBy" returns="string" signature="string definedBy($key, $returnchannel = false)"><variable ilk="argument" line="1937" name="key" /><variable default="false" ilk="argument" line="1937" name="returnchannel" /><variable citdl="this.layers[]" line="1939" name="layer" /><variable citdl="this.getDefaultChannel()" line="1940" name="channel" /></scope><scope doc="&#xA;Tells whether a given key exists as a config value.&#xA;&lt;string&gt; config  - key&#xA;Returns bool  - whether &lt;config key&gt; exists in this object&#xA;Access public&#xA;" ilk="function" line="1969" lineend="1978" name="isDefined" returns="bool" signature="bool isDefined($key)"><variable ilk="argument" line="1969" name="key" /><variable citdl="this.layers[]" line="1971" name="layer" /></scope><scope doc="&#xA;Tells whether a given config layer exists.&#xA;&lt;string&gt; config  - layer&#xA;Returns bool  - whether &lt;config layer&gt; exists in this object&#xA;Access public&#xA;" ilk="function" line="1988" lineend="1991" name="isDefinedLayer" returns="bool" signature="bool isDefinedLayer($layer)"><variable ilk="argument" line="1988" name="layer" /></scope><scope doc="&#xA;Returns the layers defined (except the &apos;default&apos; one)&#xA;Returns array  - of the defined layers&#xA;" ilk="function" line="1998" lineend="2003" name="getLayers" returns="array" signature="array getLayers()"><variable citdl="this.configuration" line="2000" name="cf" /></scope><scope ilk="function" line="2005" lineend="2008" name="apiVersion" returns="string" signature="apiVersion()" /><scope doc="&#xA;Returns pear_registry &#xA;" ilk="function" line="2013" lineend="2030" name="getRegistry" returns="PEAR_Registry" signature="pear_registry &amp;getRegistry($use = null)"><variable default="null" ilk="argument" line="2013" name="use" /><variable citdl="boolean" line="2023" name="a" /><variable citdl="use" line="2015" name="layer" /></scope><scope doc="This is to allow customization like the use of installroot&#xA;@param PEAR_Registry&#xA;@return bool" ilk="function" line="2037" lineend="2053" name="setRegistry" returns="bool" signature="bool setRegistry(&amp; $reg, $layer = &apos;user&apos;)"><variable ilk="argument" line="2037" name="reg" /><variable default="&apos;user&apos;" ilk="argument" line="2037" name="layer" /></scope><scope ilk="function" line="2055" lineend="2058" name="noRegistry" signature="noRegistry()" /><scope doc="&#xA;Returns pear_rest &#xA;" ilk="function" line="2063" lineend="2072" name="getREST" returns="PEAR_REST" signature="pear_rest &amp;getREST($version, $options = array())"><variable ilk="argument" line="2063" name="version" /><variable default="array()" ilk="argument" line="2063" name="options" /><variable line="2070" name="remote" /></scope><scope doc="&#xA;The ftp server is set in {@link readFTPConfigFile()}.  It exists only if a&#xA;remote configuration file has been specified&#xA;Returns pear_ftp|false &#xA;" ilk="function" line="2079" lineend="2087" name="getFTP" returns="PEAR_FTP" signature="pear_ftp &amp;getFTP()"><variable citdl="boolean" line="2085" name="a" /></scope><scope attributes="static" ilk="function" line="2089" lineend="2104" name="_prependPath" returns="path" signature="_prependPath($path, $prepend)"><variable ilk="argument" line="2089" name="path" /><variable ilk="argument" line="2089" name="prepend" /></scope><scope doc="&#xA;&lt;string|false&gt; installation  - directory to prepend to all _dir variables, or false to&#xA;                    disable&#xA;" ilk="function" line="2110" lineend="2130" name="setInstallRoot" signature="setInstallRoot($root)"><variable ilk="argument" line="2110" name="root" /><variable citdl="array_keys()[]" line="2118" name="layer" /><variable citdl="this._installRoot" line="2115" name="old" /></scope></scope></scope>