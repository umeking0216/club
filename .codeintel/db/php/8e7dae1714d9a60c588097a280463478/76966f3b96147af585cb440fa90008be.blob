<scope ilk="blob" lang="PHP" name="ErrorStack.php" src="/usr/share/pear/PEAR/ErrorStack.php"><import line="972" module="PEAR.php" /><variable citdl="int" ilk="constant" line="91" name="PEAR_ERRORSTACK_PUSHANDLOG" /><variable citdl="int" ilk="constant" line="96" name="PEAR_ERRORSTACK_PUSH" /><variable citdl="int" ilk="constant" line="101" name="PEAR_ERRORSTACK_LOG" /><variable citdl="int" ilk="constant" line="105" name="PEAR_ERRORSTACK_IGNORE" /><variable citdl="int" ilk="constant" line="109" name="PEAR_ERRORSTACK_DIE" /><variable citdl="int" ilk="constant" line="116" name="PEAR_ERRORSTACK_ERR_NONCLASS" /><variable citdl="int" ilk="constant" line="122" name="PEAR_ERRORSTACK_ERR_OBJTOSTRING" /><scope doc="Error Stack Implementation&#xA;&#xA;Usage:&#xA;&lt;code&gt;&#xA;// global error stack&#xA;$global_stack = &amp;PEAR_ErrorStack::singleton(&apos;MyPackage&apos;);&#xA;// local error stack&#xA;$local_stack = new PEAR_ErrorStack(&apos;MyPackage&apos;);&#xA;&lt;/code&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@version    1.10.12&#xA;@package    PEAR_ErrorStack&#xA;@category   Debugging&#xA;@copyright  2004-2008 Greg Beaver&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@link       http://pear.php.net/package/PEAR_ErrorStack" ilk="class" line="141" lineend="976" name="PEAR_ErrorStack"><variable citdl="array" doc="Errors are stored in the order that they are pushed on the stack.&#xA;@since 0.4alpha Errors are no longer organized by error level.&#xA;This renders pop() nearly unusable, and levels could be more easily&#xA;handled in a callback anyway&#xA;@var array&#xA;@access private" line="150" name="_errors" /><variable citdl="array" doc="Storage of errors by level.&#xA;&#xA;Allows easy retrieval and deletion of only errors from a particular level&#xA;@since PEAR 1.4.0dev&#xA;@var array&#xA;@access private" line="160" name="_errorsByLevel" /><variable citdl="string" doc="Package name this error stack represents&#xA;@var string&#xA;@access protected" line="167" name="_package" /><variable citdl="boolean" doc="Determines whether a PEAR_Error is thrown upon every error addition&#xA;@var boolean&#xA;@access private" line="174" name="_compat" /><variable citdl="false" doc="If set to a valid callback, this will be used to generate the error&#xA;message from the error code, otherwise the message passed in will be&#xA;used&#xA;@var false|string|array&#xA;@access private" line="183" name="_msgCallback" /><variable citdl="false" doc="If set to a valid callback, this will be used to generate the error&#xA;context for an error.  For PHP-related errors, this will be a file&#xA;and line number as retrieved from debug_backtrace(), but can be&#xA;customized for other purposes.  The error might actually be in a separate&#xA;configuration file, or in a database query.&#xA;@var false|string|array&#xA;@access protected" line="194" name="_contextCallback" /><variable citdl="false" doc="If set to a valid callback, this will be called every time an error&#xA;is pushed onto the stack.  The return value will be used to determine&#xA;whether to allow an error to be pushed or logged.&#xA;&#xA;The return value must be one an PEAR_ERRORSTACK_* constant&#xA;@see PEAR_ERRORSTACK_PUSHANDLOG, PEAR_ERRORSTACK_PUSH, PEAR_ERRORSTACK_LOG&#xA;@var false|string|array&#xA;@access protected" line="206" name="_errorCallback" /><variable citdl="false" doc="PEAR::Log object for logging errors&#xA;@var false|Log&#xA;@access protected" line="213" name="_logger" /><variable citdl="array" doc="Error messages - designed to be overridden&#xA;@var array&#xA;@abstract" line="220" name="_errorMsgs" /><scope attributes="__ctor__" doc="&#xA;Set up a new error stack&#xA;&lt;string&gt; $package  - name of the package this error stack represents&#xA;&lt;callback&gt; $msgCallback  - callback used for error message generation&#xA;&lt;callback&gt; $contextCallback  - callback used for context generation,&#xA;                defaults to {@link getFileLine()}&#xA;&lt;boolean&gt; $throwPEAR_Error  - &#xA;" ilk="function" line="231" lineend="238" name="__construct" signature="__construct(string $package, callback $msgCallback = false, callback $contextCallback = false, boolean $throwPEAR_Error = false)"><variable citdl="string" ilk="argument" line="231" name="package" /><variable citdl="callback" default="false" ilk="argument" line="231" name="msgCallback" /><variable citdl="callback" default="false" ilk="argument" line="231" name="contextCallback" /><variable citdl="boolean" default="false" ilk="argument" line="231" name="throwPEAR_Error" /></scope><scope attributes="public static" doc="&#xA;Return a single error stack for this package.&#xA;Note that all parameters are ignored if the stack for package $package&#xA;has already been instantiated&#xA;&lt;string&gt; $package  - name of the package this error stack represents&#xA;&lt;callback&gt; $msgCallback  - callback used for error message generation&#xA;&lt;callback&gt; $contextCallback  - callback used for context generation,&#xA;                defaults to {@link getFileLine()}&#xA;&lt;boolean&gt; $throwPEAR_Error  - &#xA;&lt;string&gt; $stackClass  - class to instantiate&#xA;Returns pear_errorstack &#xA;" ilk="function" line="254" lineend="274" name="singleton" returns="PEAR_ErrorStack" signature="pear_errorstack &amp;singleton(string $package, callback $msgCallback = false, callback $contextCallback = false, boolean $throwPEAR_Error = false, string $stackClass = &apos;PEAR_ErrorStack&apos;)"><variable citdl="string" ilk="argument" line="254" name="package" /><variable citdl="callback" default="false" ilk="argument" line="254" name="msgCallback" /><variable citdl="callback" default="false" ilk="argument" line="254" name="contextCallback" /><variable citdl="boolean" default="false" ilk="argument" line="254" name="throwPEAR_Error" /><variable citdl="string" default="&apos;PEAR_ErrorStack&apos;" ilk="argument" line="254" name="stackClass" /><variable citdl="debug_backtrace()" line="263" name="trace" /></scope><scope doc="&#xA;Internal error handler for PEAR_ErrorStack class&#xA;Dies if the error is an exception (and would have died anyway)&#xA;Access private&#xA;" ilk="function" line="282" lineend="294" name="_handleError" signature="_handleError($err)"><variable ilk="argument" line="282" name="err" /><variable citdl="err" line="285" name="message" /></scope><scope attributes="public static" doc="&#xA;Set up a PEAR::Log object for all error stacks that don&apos;t have one&#xA;&lt;log&gt; $log  - &#xA;" ilk="function" line="300" lineend="307" name="setDefaultLogger" signature="setDefaultLogger(Log &amp; $log)"><variable citdl="Log" ilk="argument" line="300" name="log" /></scope><scope doc="&#xA;Set up a PEAR::Log object for this error stack&#xA;&lt;log&gt; $log  - &#xA;" ilk="function" line="313" lineend="320" name="setLogger" signature="setLogger(Log &amp; $log)"><variable citdl="Log" ilk="argument" line="313" name="log" /></scope><scope doc="&#xA;Set an error code =&gt; error message mapping callback&#xA;This method sets the callback that can be used to generate error&#xA;messages for any instance&#xA;&lt;array|string&gt; Callback  - function/method&#xA;" ilk="function" line="329" lineend="338" name="setMessageCallback" signature="setMessageCallback($msgCallback)"><variable ilk="argument" line="329" name="msgCallback" /></scope><scope doc="&#xA;Get an error code =&gt; error message mapping callback&#xA;This method returns the current callback that can be used to generate error&#xA;messages&#xA;Returns array|string|false  - Callback function/method or false if none&#xA;" ilk="function" line="347" lineend="350" name="getMessageCallback" returns="array" signature="array getMessageCallback()" /><scope attributes="public static" doc="&#xA;Sets a default callback to be used by all error stacks&#xA;This method sets the callback that can be used to generate error&#xA;messages for a singleton&#xA;&lt;array|string&gt; Callback  - function/method&#xA;&lt;string&gt; Package  - name, or false for all packages&#xA;" ilk="function" line="360" lineend="367" name="setDefaultCallback" signature="setDefaultCallback($callback = false, $package = false)"><variable default="false" ilk="argument" line="360" name="callback" /><variable default="false" ilk="argument" line="360" name="package" /></scope><scope doc="&#xA;Set a callback that generates context information (location of error) for an error stack&#xA;This method sets the callback that can be used to generate context&#xA;information for an error.  Passing in NULL will disable context generation&#xA;and remove the expensive call to debug_backtrace()&#xA;&lt;array|string|null&gt; Callback  - function/method&#xA;" ilk="function" line="377" lineend="389" name="setContextCallback" returns="this._contextCallback" signature="setContextCallback($contextCallback)"><variable ilk="argument" line="377" name="contextCallback" /></scope><scope doc="&#xA;Set an error Callback&#xA;If set to a valid callback, this will be called every time an error&#xA;is pushed onto the stack.  The return value will be used to determine&#xA;whether to allow an error to be pushed or logged.&#xA;The return value must be one of the ERRORSTACK_* constants.&#xA;This functionality can be used to emulate PEAR&apos;s pushErrorHandling, and&#xA;the PEAR_ERROR_CALLBACK mode, without affecting the integrity of&#xA;the error stack or logging&#xA;See PEAR_ERRORSTACK_PUSHANDLOG, PEAR_ERRORSTACK_PUSH, PEAR_ERRORSTACK_LOG&#xA;See popCallback()&#xA;&lt;string|array&gt; $cb  - &#xA;" ilk="function" line="406" lineend="409" name="pushCallback" signature="pushCallback($cb)"><variable ilk="argument" line="406" name="cb" /></scope><scope doc="&#xA;Remove a callback from the error callback stack&#xA;See pushCallback()&#xA;Returns array|string|false &#xA;" ilk="function" line="416" lineend="422" name="popCallback" returns="array" signature="array popCallback()" /><scope attributes="public static" doc="&#xA;Set a temporary overriding error callback for every package error stack&#xA;Use this to temporarily disable all existing callbacks (can be used&#xA;to emulate the @ operator, for instance)&#xA;See PEAR_ERRORSTACK_PUSHANDLOG, PEAR_ERRORSTACK_PUSH, PEAR_ERRORSTACK_LOG&#xA;See staticPopCallback(), pushCallback()&#xA;&lt;string|array&gt; $cb  - &#xA;" ilk="function" line="433" lineend="436" name="staticPushCallback" signature="staticPushCallback($cb)"><variable ilk="argument" line="433" name="cb" /></scope><scope attributes="public static" doc="&#xA;Remove a temporary overriding error callback&#xA;See staticPushCallback()&#xA;Returns array|string|false &#xA;" ilk="function" line="443" lineend="450" name="staticPopCallback" returns="array" signature="array staticPopCallback()"><variable citdl="array_pop()" line="445" name="ret" /></scope><scope doc="&#xA;Add an error to the stack&#xA;If the message generator exists, it is called with 2 parameters.&#xA; - the current Error Stack object&#xA; - an array that is in the same format as an error.  Available indices&#xA;   are &apos;code&apos;, &apos;package&apos;, &apos;time&apos;, &apos;params&apos;, &apos;level&apos;, and &apos;context&apos;&#xA;Next, if the error should contain context information, this is&#xA;handled by the context grabbing method.&#xA;Finally, the error is pushed onto the proper error stack&#xA;&lt;int&gt; $code  - Package-specific error code&#xA;&lt;string&gt; $level  - Error level. This is NOT spell-checked&#xA;&lt;array&gt; $params  - associative array of error parameters&#xA;&lt;string&gt; $msg  - Error message, or a portion of it if the message&#xA;                         is to be generated&#xA;&lt;array&gt; $repackage  - If this error re-packages an error pushed by&#xA;                         another package, place the array returned from&#xA;                         {@link pop()} in this parameter&#xA;&lt;array&gt; $backtrace  - Protected parameter: use this to pass in the&#xA;                         {@link debug_backtrace()} that should be used&#xA;                         to find error context&#xA;Returns pear_error|array  - if compatibility mode is on, a PEAR_Error is also&#xA;thrown.  If a PEAR_Error is returned, the userinfo&#xA;property is set to the following array:&#xA;&lt;code&gt;&#xA;array(&#xA;   &apos;code&apos; =&gt; $code,&#xA;   &apos;params&apos; =&gt; $params,&#xA;   &apos;package&apos; =&gt; $this-&gt;_package,&#xA;   &apos;level&apos; =&gt; $level,&#xA;   &apos;time&apos; =&gt; time(),&#xA;   &apos;context&apos; =&gt; $context,&#xA;   &apos;message&apos; =&gt; $msg,&#xA;//[&apos;repackage&apos; =&gt; $err] repackaged error array/Exception class&#xA;);&#xA;&lt;/code&gt;&#xA;Normally, the previous array is returned.&#xA;" ilk="function" line="493" lineend="583" name="push" returns="PEAR_Error" signature="pear_error push(int $code, string $level = &apos;error&apos;, array $params = array(), string $msg = false, array $repackage = false, array $backtrace = false)"><variable citdl="int" ilk="argument" line="493" name="code" /><variable citdl="string" default="&apos;error&apos;" ilk="argument" line="493" name="level" /><variable citdl="array" default="array()" ilk="argument" line="493" name="params" /><variable citdl="string" default="false" ilk="argument" line="493" name="msg" /><variable citdl="array" default="false" ilk="argument" line="493" name="repackage" /><variable citdl="array" default="false" ilk="argument" line="493" name="backtrace" /><variable citdl="boolean" line="553" name="log" /><variable citdl="array()" line="516" name="err" /><variable citdl="boolean" line="529" name="die" /><variable citdl="this.staticPopCallback()" line="531" name="callback" /><variable citdl="boolean" line="496" name="context" /><variable citdl="explode()" line="506" name="time" /><variable citdl="log" line="528" name="push" /></scope><scope attributes="public static" doc="&#xA;Static version of {@link push()}&#xA;&lt;string&gt; $package  - Package name this error belongs to&#xA;&lt;int&gt; $code  - Package-specific error code&#xA;&lt;string&gt; $level  - Error level. This is NOT spell-checked&#xA;&lt;array&gt; $params  - associative array of error parameters&#xA;&lt;string&gt; $msg  - Error message, or a portion of it if the message&#xA;                         is to be generated&#xA;&lt;array&gt; $repackage  - If this error re-packages an error pushed by&#xA;                         another package, place the array returned from&#xA;                         {@link pop()} in this parameter&#xA;&lt;array&gt; $backtrace  - Protected parameter: use this to pass in the&#xA;                         {@link debug_backtrace()} that should be used&#xA;                         to find error context&#xA;Returns pear_error|array  - if compatibility mode is on, a PEAR_Error is also&#xA;                         thrown.  see docs for {@link push()}&#xA;" ilk="function" line="603" lineend="616" name="staticPush" returns="PEAR_Error" signature="pear_error staticPush(string $package, int $code, string $level = &apos;error&apos;, array $params = array(), string $msg = false, array $repackage = false, array $backtrace = false)"><variable citdl="string" ilk="argument" line="603" name="package" /><variable citdl="int" ilk="argument" line="603" name="code" /><variable citdl="string" default="&apos;error&apos;" ilk="argument" line="603" name="level" /><variable citdl="array" default="array()" ilk="argument" line="603" name="params" /><variable citdl="string" default="false" ilk="argument" line="603" name="msg" /><variable citdl="array" default="false" ilk="argument" line="603" name="repackage" /><variable citdl="array" default="false" ilk="argument" line="603" name="backtrace" /><variable citdl="PEAR_ErrorStack.singleton()" line="607" name="s" /></scope><scope doc="&#xA;Log an error using PEAR::Log&#xA;&lt;array&gt; $err  - Error array&#xA;&lt;array&gt; $levels  - Error level =&gt; Log constant map&#xA;Access protected&#xA;" ilk="function" line="624" lineend="650" name="_log" signature="_log(array $err, array $levels)"><variable citdl="array" ilk="argument" line="624" name="err" /><variable citdl="array" ilk="argument" line="624" name="levels" /><variable citdl="this._logger" line="627" name="logger" /><variable citdl="levels" line="642" name="level" /></scope><scope doc="&#xA;Pop an error off of the error stack&#xA;Returns false|array &#xA;Since 0.4alpha it is no longer possible to specify a specific error&#xA;level to return - the last error pushed will be returned, instead&#xA;" ilk="function" line="660" lineend="670" name="pop" returns="false" signature="false pop()"><variable line="662" name="err" /></scope><scope attributes="static" doc="&#xA;Pop an error off of the error stack, static method&#xA;&lt;string&gt; package  - name&#xA;Returns boolean &#xA;Since PEAR1.5.0a1&#xA;" ilk="function" line="679" lineend="687" name="staticPop" returns="boolean" signature="boolean staticPop($package)"><variable ilk="argument" line="679" name="package" /></scope><scope doc="&#xA;Determine whether there are any errors on the stack&#xA;&lt;string|array&gt; Level  - name. Use to determine if any errors&#xA;of level (string), or levels (array) have been pushed&#xA;Returns boolean &#xA;" ilk="function" line="695" lineend="701" name="hasErrors" returns="boolean" signature="boolean hasErrors($level = false)"><variable default="false" ilk="argument" line="695" name="level" /></scope><scope doc="&#xA;Retrieve all errors since last purge&#xA;&lt;boolean&gt; set  - in order to empty the error stack&#xA;&lt;string&gt; level  - name, to return only errors of a particular severity&#xA;Returns array &#xA;" ilk="function" line="710" lineend="738" name="getErrors" returns="array" signature="array getErrors($purge = false, $level = false)"><variable default="false" ilk="argument" line="710" name="purge" /><variable default="false" ilk="argument" line="710" name="level" /><variable line="725" name="i" /><variable citdl="this._errorsByLevel[]" line="725" name="unused" /><variable citdl="this._errorsByLevel" line="724" name="ret" /></scope><scope attributes="public static" doc="&#xA;Determine whether there are any errors on a single error stack, or on any error stack&#xA;The optional parameter can be used to test the existence of any errors without the need of&#xA;singleton instantiation&#xA;&lt;string|false&gt; Package  - name to check for errors&#xA;&lt;string&gt; Level  - name to check for a particular severity&#xA;Returns boolean &#xA;" ilk="function" line="749" lineend="763" name="staticHasErrors" returns="boolean" signature="boolean staticHasErrors($package = false, $level = false)"><variable default="false" ilk="argument" line="749" name="package" /><variable default="false" ilk="argument" line="749" name="level" /><variable citdl="GLOBALS[]" line="757" name="obj" /></scope><scope attributes="public static" doc="&#xA;Get a list of all errors since last purge, organized by package&#xA;Since PEAR 1.4.0dev BC break! $level is now in the place $merge used to be&#xA;&lt;boolean&gt; $purge  - Set to purge the error stack of existing errors&#xA;&lt;string&gt; $level  - Set to a level name in order to retrieve only errors of a particular level&#xA;&lt;boolean&gt; $merge  - Set to return a flat array, not organized by package&#xA;&lt;array&gt; $sortfunc  - Function used to sort a merged array - default&#xA;       sorts by time, and should be good for most cases&#xA;Returns array &#xA;" ilk="function" line="776" lineend="798" name="staticGetErrors" returns="array" signature="array staticGetErrors(boolean $purge = false, string $level = false, boolean $merge = false, array $sortfunc = array(&apos;PEAR_ErrorStack&apos;,&apos;_sortErrors&apos;))"><variable citdl="boolean" default="false" ilk="argument" line="776" name="purge" /><variable citdl="string" default="false" ilk="argument" line="776" name="level" /><variable citdl="boolean" default="false" ilk="argument" line="776" name="merge" /><variable citdl="array" default="array(&apos;PEAR_ErrorStack&apos;,&apos;_sortErrors&apos;)" ilk="argument" line="776" name="sortfunc" /><variable citdl="GLOBALS" line="785" name="test" /><variable citdl="GLOBALS[]" line="784" name="obj" /><variable citdl="array()" line="780" name="ret" /><variable line="784" name="package" /></scope><scope attributes="public static" doc="&#xA;Error sorting function, sorts by time&#xA;Access private&#xA;" ilk="function" line="804" lineend="813" name="_sortErrors" returns="int" signature="_sortErrors($a, $b)"><variable ilk="argument" line="804" name="a" /><variable ilk="argument" line="804" name="b" /></scope><scope attributes="public static" doc="Standard file/line number/function/class context callback&#xA;&#xA;This function uses a backtrace generated from {@link debug_backtrace()}&#xA;and so will not work at all in PHP &lt; 4.3.0.  The frame should&#xA;reference the frame that contains the source of the error.&#xA;@return array|false either array(&apos;file&apos; =&gt; file, &apos;line&apos; =&gt; line,&#xA;        &apos;function&apos; =&gt; function name, &apos;class&apos; =&gt; class name) or&#xA;        if this doesn&apos;t work, then false&#xA;@param unused&#xA;@param integer backtrace frame.&#xA;@param array Results of debug_backtrace()" ilk="function" line="828" lineend="874" name="getFileLine" returns="array" signature="array getFileLine($code, $params, $backtrace = null)"><variable ilk="argument" line="828" name="code" /><variable ilk="argument" line="828" name="params" /><variable default="null" ilk="argument" line="828" name="backtrace" /><variable citdl="int" line="833" name="frame" /><variable citdl="backtrace" line="849" name="filebacktrace" /><variable citdl="int" line="834" name="functionframe" /><variable citdl="array()" line="851" name="ret" /><variable citdl="backtrace" line="848" name="funcbacktrace" /></scope><scope attributes="public static" doc="Standard error message generation callback&#xA;&#xA;This method may also be called by a custom error message generator&#xA;to fill in template values from the params array, simply&#xA;set the third parameter to the error message template string to use&#xA;&#xA;The special variable %__msg% is reserved: use it only to specify&#xA;where a message passed in by the user should be placed in the template,&#xA;like so:&#xA;&#xA;Error message: %msg% - internal error&#xA;&#xA;If the message passed like so:&#xA;&#xA;&lt;code&gt;&#xA;$stack-&gt;push(ERROR_CODE, &apos;error&apos;, array(), &apos;server error 500&apos;);&#xA;&lt;/code&gt;&#xA;&#xA;The returned error message will be &quot;Error message: server error 500 -&#xA;internal error&quot;&#xA;@param PEAR_ErrorStack&#xA;@param array&#xA;@param string|false Pre-generated error message template&#xA;&#xA;@return string" ilk="function" line="903" lineend="931" name="getErrorMessage" returns="string" signature="string getErrorMessage(&amp; $stack, $err, $template = false)"><variable ilk="argument" line="903" name="stack" /><variable ilk="argument" line="903" name="err" /><variable default="false" ilk="argument" line="903" name="template" /><variable citdl="str_replace()" line="906" name="mainmsg" /><variable line="912" name="name" /><variable citdl="err[]" line="912" name="val" /></scope><scope doc="&#xA;Standard Error Message Template generator from code&#xA;Returns string &#xA;" ilk="function" line="937" lineend="943" name="getErrorMessageTemplate" returns="string" signature="string getErrorMessageTemplate($code)"><variable ilk="argument" line="937" name="code" /></scope><scope doc="&#xA;Set the Error Message Template array&#xA;The array format must be:&#xA;&lt;pre&gt;&#xA;array(error code =&gt; &apos;message template&apos;,...)&#xA;&lt;/pre&gt;&#xA;Error message parameters passed into {@link push()} will be used as input&#xA;for the error message.  If the template is &apos;message %foo% was %bar%&apos;, and the&#xA;parameters are array(&apos;foo&apos; =&gt; &apos;one&apos;, &apos;bar&apos; =&gt; &apos;six&apos;), the error message returned will&#xA;be &apos;message one was six&apos;&#xA;Returns string &#xA;" ilk="function" line="959" lineend="962" name="setErrorMessageTemplate" returns="string" signature="string setErrorMessageTemplate($template)"><variable ilk="argument" line="959" name="template" /></scope><scope doc="&#xA;emulate PEAR::raiseError()&#xA;Returns pear_error &#xA;" ilk="function" line="970" lineend="975" name="raiseError" returns="PEAR_Error" signature="pear_error raiseError()"><variable citdl="func_get_args()" line="973" name="args" /></scope></scope><variable citdl="PEAR_ErrorStack.singleton()" line="977" name="stack" /></scope>