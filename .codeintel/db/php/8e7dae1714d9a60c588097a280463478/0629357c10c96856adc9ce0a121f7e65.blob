<scope ilk="blob" lang="PHP" name="ChannelFile.php" src="/usr/share/pear/PEAR/ChannelFile.php"><import line="19" module="PEAR/ErrorStack.php" /><import line="20" module="PEAR/XMLParser.php" /><import line="21" module="PEAR/Common.php" /><import line="392" module="PEAR.php" /><import line="428" module="PEAR.php" /><import line="1492" module="PEAR/Validate.php" /><import line="1513" module="_" /><variable citdl="int" ilk="constant" line="26" name="PEAR_CHANNELFILE_ERROR_NO_VERSION" /><variable citdl="int" ilk="constant" line="31" name="PEAR_CHANNELFILE_ERROR_INVALID_VERSION" /><variable citdl="int" ilk="constant" line="36" name="PEAR_CHANNELFILE_ERROR_NO_XML_EXT" /><variable citdl="int" ilk="constant" line="41" name="PEAR_CHANNELFILE_ERROR_CANT_MAKE_PARSER" /><variable citdl="int" ilk="constant" line="46" name="PEAR_CHANNELFILE_ERROR_PARSER_ERROR" /><variable citdl="int" ilk="constant" line="54" name="PEAR_CHANNELFILE_ERROR_NO_NAME" /><variable citdl="int" ilk="constant" line="58" name="PEAR_CHANNELFILE_ERROR_INVALID_NAME" /><variable citdl="int" ilk="constant" line="62" name="PEAR_CHANNELFILE_ERROR_NO_SUMMARY" /><variable citdl="int" ilk="constant" line="66" name="PEAR_CHANNELFILE_ERROR_MULTILINE_SUMMARY" /><variable citdl="int" ilk="constant" line="70" name="PEAR_CHANNELFILE_ERROR_NO_HOST" /><variable citdl="int" ilk="constant" line="74" name="PEAR_CHANNELFILE_ERROR_INVALID_HOST" /><variable citdl="int" ilk="constant" line="78" name="PEAR_CHANNELFILE_ERROR_INVALID_MIRROR" /><variable citdl="int" ilk="constant" line="82" name="PEAR_CHANNELFILE_ERROR_INVALID_MIRRORTYPE" /><variable citdl="int" ilk="constant" line="86" name="PEAR_CHANNELFILE_ERROR_INVALID" /><variable citdl="int" ilk="constant" line="90" name="PEAR_CHANNELFILE_ERROR_EMPTY_REGEX" /><variable citdl="int" ilk="constant" line="94" name="PEAR_CHANNELFILE_ERROR_NO_FUNCTIONVERSION" /><variable citdl="int" ilk="constant" line="98" name="PEAR_CHANNELFILE_ERROR_NO_FUNCTIONNAME" /><variable citdl="int" ilk="constant" line="102" name="PEAR_CHANNELFILE_ERROR_NOVALIDATE_NAME" /><variable citdl="int" ilk="constant" line="106" name="PEAR_CHANNELFILE_ERROR_NOVALIDATE_VERSION" /><variable citdl="int" ilk="constant" line="111" name="PEAR_CHANNELFILE_ERROR_MIRROR_NOT_FOUND" /><variable citdl="int" ilk="constant" line="115" name="PEAR_CHANNELFILE_ERROR_INVALID_PORT" /><variable citdl="int" ilk="constant" line="119" name="PEAR_CHANNELFILE_ERROR_NO_STATICVERSION" /><variable citdl="int" ilk="constant" line="123" name="PEAR_CHANNELFILE_ERROR_NOBASEURLTYPE" /><variable citdl="int" ilk="constant" line="127" name="PEAR_CHANNELFILE_URI_CANT_MIRROR" /><variable citdl="int" ilk="constant" line="131" name="PEAR_CHANNELFILE_ERROR_INVALID_SSL" /><scope doc="The Channel handling class&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="152" lineend="1560" name="PEAR_ChannelFile"><variable citdl="PEAR_ErrorStack" doc="@access private&#xA;@var PEAR_ErrorStack&#xA;@access private" line="159" name="_stack" /><variable citdl="array" doc="Supported channel.xml versions, for parsing&#xA;@var array&#xA;@access private" line="166" name="_supportedVersions" /><variable citdl="array" doc="Parsed channel information&#xA;@var array&#xA;@access private" line="173" name="_channelInfo" /><variable citdl="int" doc="index into the subchannels array, used for parsing xml&#xA;@var int&#xA;@access private" line="180" name="_subchannelIndex" /><variable citdl="int" doc="index into the mirrors array, used for parsing xml&#xA;@var int&#xA;@access private" line="187" name="_mirrorIndex" /><variable citdl="boolean" doc="Flag used to determine the validity of parsed content&#xA;@var boolean&#xA;@access private" line="194" name="_isValid" /><scope attributes="__ctor__" ilk="function" line="196" lineend="201" name="__construct" signature="__construct()" /><scope doc="&#xA;Returns array &#xA;Access protected&#xA;" ilk="function" line="207" lineend="262" name="_getErrorMessage" returns="array" signature="array _getErrorMessage()" /><scope doc="&#xA;&lt;string&gt; contents  - of package.xml file&#xA;Returns bool  - success of parsing&#xA;" ilk="function" line="268" lineend="293" name="fromXmlString" returns="bool" signature="bool fromXmlString($data)"><variable ilk="argument" line="268" name="data" /><variable citdl="PEAR_XMLParser" line="276" name="parser" /><variable citdl="parser.parse()" line="277" name="result" /></scope><scope doc="&#xA;Returns array &#xA;" ilk="function" line="298" lineend="304" name="toArray" returns="array" signature="array toArray()" /><scope attributes="public static" doc="@param array&#xA;&#xA;@return PEAR_ChannelFile|false false if invalid" ilk="function" line="311" lineend="321" name="fromArray" returns="PEAR_ChannelFile" signature="pear_channelfile &amp;fromArray($data, $compatibility = false, $stackClass = &apos;PEAR_ErrorStack&apos;)"><variable ilk="argument" line="311" name="data" /><variable default="false" ilk="argument" line="311" name="compatibility" /><variable default="&apos;PEAR_ErrorStack&apos;" ilk="argument" line="311" name="stackClass" /><variable citdl="PEAR_ChannelFile" line="314" name="a" /></scope><scope attributes="public static" doc="Unlike {@link fromArray()} this does not do any validation&#xA;&#xA;@param array&#xA;&#xA;@return PEAR_ChannelFile" ilk="function" line="330" lineend="336" name="fromArrayWithErrors" returns="PEAR_ChannelFile" signature="pear_channelfile &amp;fromArrayWithErrors($data, $compatibility = false, $stackClass = &apos;PEAR_ErrorStack&apos;)"><variable ilk="argument" line="330" name="data" /><variable default="false" ilk="argument" line="330" name="compatibility" /><variable default="&apos;PEAR_ErrorStack&apos;" ilk="argument" line="330" name="stackClass" /><variable citdl="PEAR_ChannelFile" line="333" name="a" /></scope><scope doc="@param array&#xA;@access private" ilk="function" line="342" lineend="345" name="_fromArray" signature="_fromArray($data)"><variable ilk="argument" line="342" name="data" /></scope><scope doc="&#xA;Wrapper to {@link PEAR_ErrorStack::getErrors()}&#xA;&lt;boolean&gt; determines  - whether to purge the error stack after retrieving&#xA;Returns array &#xA;" ilk="function" line="352" lineend="355" name="getErrors" returns="array" signature="array getErrors($purge = false)"><variable default="false" ilk="argument" line="352" name="purge" /></scope><scope doc="&#xA;Unindent given string (?)&#xA;&lt;string&gt; $str  - The string that has to be unindented.&#xA;Returns string &#xA;Access private&#xA;" ilk="function" line="364" lineend="379" name="_unIndent" returns="string" signature="string _unIndent(string $str)"><variable citdl="string" ilk="argument" line="364" name="str" /><variable citdl="substr()" line="370" name="indent" /><variable citdl="explode()[]" line="373" name="line" /><variable citdl="strspn()" line="369" name="indent_len" /><variable citdl="string" line="371" name="data" /></scope><scope doc="&#xA;Parse a channel.xml file.  Expects the name of&#xA;a channel xml file as input.&#xA;&lt;string&gt; $descfile  - name of channel xml file&#xA;Returns bool  - success of parsing&#xA;" ilk="function" line="388" lineend="401" name="fromXmlFile" returns="bool" signature="bool fromXmlFile(string $descfile)"><variable citdl="string" ilk="argument" line="388" name="descfile" /><variable citdl="file_get_contents()" line="399" name="data" /></scope><scope doc="&#xA;Parse channel information from different sources&#xA;This method is able to extract information about a channel&#xA;from an .xml file or a string&#xA;Access public&#xA;&lt;string&gt; Filename  - of the source or the source itself&#xA;Returns bool &#xA;" ilk="function" line="413" lineend="436" name="fromAny" returns="bool" signature="bool fromAny($info)"><variable ilk="argument" line="413" name="info" /><variable citdl="substr()" line="416" name="tmp" /><variable citdl="fopen()" line="420" name="fp" /><variable citdl="fread()" line="421" name="test" /></scope><scope doc="&#xA;Return an XML document based on previous parsing and modifications&#xA;Returns string  - XML data&#xA;Access public&#xA;" ilk="function" line="445" lineend="493" name="toXml" returns="string" signature="string toXml()"><variable citdl="string" line="455" name="ret" /><variable citdl="this._channelInfo" line="454" name="channelInfo" /></scope><scope doc="&#xA;Generate the &lt;rest&gt; tag&#xA;Access private&#xA;" ilk="function" line="499" lineend="514" name="_makeRestXml" returns="ret" signature="_makeRestXml($info, $indent)"><variable ilk="argument" line="499" name="info" /><variable ilk="argument" line="499" name="indent" /><variable citdl="info[]" line="507" name="url" /><variable citdl="indent" line="501" name="ret" /></scope><scope doc="&#xA;Generate the &lt;mirrors&gt; tag&#xA;Access private&#xA;" ilk="function" line="520" lineend="545" name="_makeMirrorsXml" returns="ret" signature="_makeMirrorsXml($channelInfo)"><variable ilk="argument" line="520" name="channelInfo" /><variable citdl="string" line="522" name="ret" /><variable citdl="channelInfo[]" line="526" name="mirror" /></scope><scope doc="&#xA;Generate the &lt;functions&gt; tag&#xA;Access private&#xA;" ilk="function" line="551" lineend="565" name="_makeFunctionsXml" returns="ret" signature="_makeFunctionsXml($functions, $indent, $rest = false)"><variable ilk="argument" line="551" name="functions" /><variable ilk="argument" line="551" name="indent" /><variable default="false" ilk="argument" line="551" name="rest" /><variable citdl="functions[]" line="557" name="function" /><variable citdl="string" line="553" name="ret" /></scope><scope doc="&#xA;Validation error.  Also marks the object contents as invalid&#xA;&lt;error&gt; code  - &#xA;&lt;array&gt; error  - information&#xA;Access private&#xA;" ilk="function" line="573" lineend="577" name="_validateError" signature="_validateError($code, $params = array())"><variable ilk="argument" line="573" name="code" /><variable default="array()" ilk="argument" line="573" name="params" /></scope><scope doc="&#xA;Validation warning.  Does not mark the object contents invalid.&#xA;&lt;error&gt; code  - &#xA;&lt;array&gt; error  - information&#xA;Access private&#xA;" ilk="function" line="585" lineend="588" name="_validateWarning" signature="_validateWarning($code, $params = array())"><variable ilk="argument" line="585" name="code" /><variable default="array()" ilk="argument" line="585" name="params" /></scope><scope doc="&#xA;Validate parsed file.&#xA;Access public&#xA;Returns boolean &#xA;" ilk="function" line="596" lineend="682" name="validate" returns="boolean" signature="boolean validate()"><variable citdl="this._channelInfo" line="599" name="info" /><variable line="633" name="content" /><variable citdl="info[]" line="663" name="mirror" /></scope><scope doc="&#xA;&lt;string&gt; rest  - - protocol name this function applies to&#xA;&lt;array&gt; the  - functions&#xA;&lt;string&gt; the  - name of the parent element (mirror name, for instance)&#xA;" ilk="function" line="689" lineend="715" name="_validateFunctions" signature="_validateFunctions($protocol, $functions, $parent = &apos;&apos;)"><variable ilk="argument" line="689" name="protocol" /><variable ilk="argument" line="689" name="functions" /><variable default="&apos;&apos;" ilk="argument" line="689" name="parent" /><variable citdl="functions[]" line="695" name="function" /></scope><scope doc="&#xA;Test whether a string contains a valid channel server.&#xA;&lt;string&gt; $ver  - the package version to test&#xA;Returns bool &#xA;" ilk="function" line="722" lineend="728" name="validChannelServer" returns="bool" signature="bool validChannelServer($server, string $ver)"><variable ilk="argument" line="722" name="server" /><variable citdl="string" ilk="argument" line="722" name="ver" /></scope><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="733" lineend="740" name="getName" returns="string" signature="string getName()" /><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="745" lineend="752" name="getServer" returns="string" signature="string getServer()" /><scope doc="&#xA;Returns int|80  - port number to connect to&#xA;" ilk="function" line="757" lineend="784" name="getPort" returns="int" signature="int getPort($mirror = false)"><variable default="false" ilk="argument" line="757" name="mirror" /></scope><scope doc="&#xA;Returns bool  - Determines whether secure sockets layer (SSL) is used to connect to this channel&#xA;" ilk="function" line="789" lineend="808" name="getSSL" returns="bool" signature="bool getSSL($mirror = false)"><variable default="false" ilk="argument" line="789" name="mirror" /></scope><scope doc="&#xA;Returns string|false &#xA;" ilk="function" line="813" lineend="820" name="getSummary" returns="string" signature="string getSummary()" /><scope doc="&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string&gt; Mirror  - name&#xA;Returns array|false &#xA;" ilk="function" line="827" lineend="849" name="getFunctions" returns="array" signature="array getFunctions($protocol, $mirror = false)"><variable ilk="argument" line="827" name="protocol" /><variable default="false" ilk="argument" line="827" name="mirror" /><variable citdl="protocol" line="833" name="function" /></scope><scope doc="&#xA;&lt;string&gt; Protocol  - type&#xA;&lt;string&gt; Function  - name (null to return the&#xA;              first protocol of the type requested)&#xA;&lt;string&gt; Mirror  - name, if any&#xA;Returns array &#xA;" ilk="function" line="858" lineend="878" name="getFunction" returns="array" signature="array getFunction($type, $name = null, $mirror = false)"><variable ilk="argument" line="858" name="type" /><variable default="null" ilk="argument" line="858" name="name" /><variable default="false" ilk="argument" line="858" name="mirror" /><variable citdl="protocols[]" line="865" name="protocol" /><variable citdl="this.getFunctions()" line="860" name="protocols" /></scope><scope doc="&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string&gt; protocol  - name&#xA;&lt;string&gt; version  - &#xA;&lt;string&gt; mirror  - name&#xA;Returns boolean &#xA;" ilk="function" line="887" lineend="911" name="supports" returns="boolean" signature="boolean supports($type, $name = null, $mirror = false, $version = &apos;1.0&apos;)"><variable ilk="argument" line="887" name="type" /><variable default="null" ilk="argument" line="887" name="name" /><variable default="false" ilk="argument" line="887" name="mirror" /><variable default="&apos;1.0&apos;" ilk="argument" line="887" name="version" /><variable citdl="protocols[]" line="894" name="protocol" /><variable citdl="this.getFunctions()" line="889" name="protocols" /></scope><scope doc="Determines whether a channel supports Representational State Transfer (REST) protocols&#xA;for retrieving channel information&#xA;@param string&#xA;@return bool" ilk="function" line="919" lineend="934" name="supportsREST" returns="bool" signature="bool supportsREST($mirror = false)"><variable default="false" ilk="argument" line="919" name="mirror" /></scope><scope doc="&#xA;Get the URL to access a base resource.&#xA;Hyperlinks in the returned xml will be used to retrieve the proper information&#xA;needed.  This allows extreme extensibility and flexibility in implementation&#xA;&lt;string&gt; Resource  - Type to retrieve&#xA;" ilk="function" line="943" lineend="971" name="getBaseURL" returns="boolean" signature="getBaseURL($resourceType, $mirror = false)"><variable ilk="argument" line="943" name="resourceType" /><variable default="false" ilk="argument" line="943" name="mirror" /><variable citdl="this.getMirror()" line="950" name="mir" /><variable citdl="rest[]" line="964" name="baseurl" /><variable citdl="mir" line="955" name="rest" /></scope><scope doc="&#xA;Since REST does not implement RPC, provide this as a logical wrapper around&#xA;resetFunctions for REST&#xA;&lt;string|false&gt; mirror  - name, if any&#xA;" ilk="function" line="978" lineend="981" name="resetREST" returns="this.resetFunctions()" signature="resetREST($mirror = false)"><variable default="false" ilk="argument" line="978" name="mirror" /></scope><scope doc="&#xA;Empty all protocol definitions&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string|false&gt; mirror  - name, if any&#xA;" ilk="function" line="988" lineend="1018" name="resetFunctions" returns="boolean" signature="resetFunctions($type, $mirror = false)"><variable ilk="argument" line="988" name="type" /><variable default="false" ilk="argument" line="988" name="mirror" /><variable line="997" name="i" /><variable citdl="mirrors[]" line="997" name="mir" /><variable citdl="this._channelInfo" line="992" name="mirrors" /></scope><scope doc="&#xA;Set a channel&apos;s protocols to the protocols supported by pearweb&#xA;" ilk="function" line="1023" lineend="1042" name="setDefaultPEARProtocols" returns="boolean" signature="setDefaultPEARProtocols($version = &apos;1.0&apos;, $mirror = false)"><variable default="&apos;1.0&apos;" ilk="argument" line="1023" name="version" /><variable default="false" ilk="argument" line="1023" name="mirror" /></scope><scope doc="&#xA;Returns array &#xA;" ilk="function" line="1047" lineend="1059" name="getMirrors" returns="array" signature="array getMirrors()"><variable citdl="this._channelInfo" line="1050" name="mirrors" /></scope><scope doc="&#xA;Get the unserialized XML representing a mirror&#xA;Returns array|false &#xA;" ilk="function" line="1065" lineend="1074" name="getMirror" returns="array" signature="array getMirror($server)"><variable ilk="argument" line="1065" name="server" /><variable citdl="this.getMirrors()[]" line="1067" name="mirror" /></scope><scope doc="@param string&#xA;@return string|false&#xA;@error PEAR_CHANNELFILE_ERROR_NO_NAME&#xA;@error PEAR_CHANNELFILE_ERROR_INVALID_NAME" ilk="function" line="1082" lineend="1085" name="setName" returns="string" signature="string setName($name)"><variable ilk="argument" line="1082" name="name" /></scope><scope doc="Set the socket number (port) that is used to connect to this channel&#xA;@param integer&#xA;@param string|false name of the mirror server, or false for the primary" ilk="function" line="1092" lineend="1120" name="setPort" returns="boolean" signature="setPort($port, $mirror = false)"><variable ilk="argument" line="1092" name="port" /><variable default="false" ilk="argument" line="1092" name="mirror" /><variable line="1102" name="i" /><variable citdl="this._channelInfo[]" line="1102" name="mir" /></scope><scope doc="&#xA;Set the socket number (port) that is used to connect to this channel&#xA;&lt;bool&gt; Determines  - whether to turn on SSL support or turn it off&#xA;&lt;string|false&gt; name  - of the mirror server, or false for the primary&#xA;" ilk="function" line="1127" lineend="1177" name="setSSL" returns="boolean" signature="setSSL($ssl = true, $mirror = false)"><variable default="true" ilk="argument" line="1127" name="ssl" /><variable default="false" ilk="argument" line="1127" name="mirror" /><variable line="1137" name="i" /><variable citdl="this._channelInfo[]" line="1137" name="mir" /></scope><scope doc="@param string&#xA;@return string|false&#xA;@error PEAR_CHANNELFILE_ERROR_NO_SERVER&#xA;@error PEAR_CHANNELFILE_ERROR_INVALID_SERVER" ilk="function" line="1185" lineend="1217" name="setServer" returns="string" signature="string setServer($server, $mirror = false)"><variable ilk="argument" line="1185" name="server" /><variable default="false" ilk="argument" line="1185" name="mirror" /><variable line="1198" name="i" /><variable citdl="boolean" line="1197" name="found" /><variable citdl="this._channelInfo[]" line="1198" name="mir" /></scope><scope doc="@param string&#xA;@return boolean success&#xA;@error PEAR_CHANNELFILE_ERROR_NO_SUMMARY&#xA;@warning PEAR_CHANNELFILE_ERROR_MULTILINE_SUMMARY" ilk="function" line="1225" lineend="1237" name="setSummary" returns="boolean" signature="boolean setSummary($summary)"><variable ilk="argument" line="1225" name="summary" /></scope><scope doc="@param string&#xA;@param boolean determines whether the alias is in channel.xml or local&#xA;@return boolean success" ilk="function" line="1244" lineend="1259" name="setAlias" returns="boolean" signature="boolean setAlias($alias, $local = false)"><variable ilk="argument" line="1244" name="alias" /><variable default="false" ilk="argument" line="1244" name="local" /></scope><scope doc="&#xA;Returns string &#xA;" ilk="function" line="1264" lineend="1276" name="getAlias" returns="string" signature="string getAlias()" /><scope doc="&#xA;Set the package validation object if it differs from PEAR&apos;s default&#xA;The class must be includeable via changing _ in the classname to path separator,&#xA;but no checking of this is made.&#xA;&lt;string|false&gt; pass  - in false to reset to the default packagename regex&#xA;Returns boolean  - success&#xA;" ilk="function" line="1285" lineend="1292" name="setValidationPackage" returns="boolean" signature="boolean setValidationPackage($validateclass, $version)"><variable ilk="argument" line="1285" name="validateclass" /><variable ilk="argument" line="1285" name="version" /></scope><scope doc="&#xA;Add a protocol to the provides section&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string&gt; protocol  - version&#xA;&lt;string&gt; protocol  - name, if any&#xA;&lt;string&gt; mirror  - name, if this is a mirror&apos;s protocol&#xA;Returns bool &#xA;" ilk="function" line="1302" lineend="1327" name="addFunction" returns="bool" signature="bool addFunction($type, $version, $name = &apos;&apos;, $mirror = false)"><variable ilk="argument" line="1302" name="type" /><variable ilk="argument" line="1302" name="version" /><variable default="&apos;&apos;" ilk="argument" line="1302" name="name" /><variable default="false" ilk="argument" line="1302" name="mirror" /><variable citdl="array()" line="1308" name="set" /></scope><scope doc="&#xA;Add a protocol to a mirror&apos;s provides section&#xA;&lt;string&gt; mirror  - name (server)&#xA;&lt;string&gt; protocol  - type&#xA;&lt;string&gt; protocol  - version&#xA;&lt;string&gt; protocol  - name, if any&#xA;" ilk="function" line="1335" lineend="1375" name="addMirrorFunction" returns="boolean" signature="addMirrorFunction($mirror, $type, $version, $name = &apos;&apos;)"><variable ilk="argument" line="1335" name="mirror" /><variable ilk="argument" line="1335" name="type" /><variable ilk="argument" line="1335" name="version" /><variable default="&apos;&apos;" ilk="argument" line="1335" name="name" /><variable citdl="this._channelInfo" line="1343" name="setmirror" /><variable line="1345" name="i" /><variable citdl="this._channelInfo[]" line="1345" name="mir" /><variable citdl="array()" line="1363" name="set" /></scope><scope doc="&#xA;&lt;string&gt; Resource  - Type this url links to&#xA;&lt;string&gt; URL  - &#xA;&lt;string|false&gt; mirror  - name, if this is not a primary server REST base URL&#xA;" ilk="function" line="1382" lineend="1432" name="setBaseURL" returns="boolean" signature="setBaseURL($resourceType, $url, $mirror = false)"><variable ilk="argument" line="1382" name="resourceType" /><variable ilk="argument" line="1382" name="url" /><variable default="false" ilk="argument" line="1382" name="mirror" /><variable citdl="this._channelInfo" line="1391" name="setmirror" /><variable line="1393" name="i" /><variable citdl="this._channelInfo[]" line="1393" name="mir" /><variable citdl="array()" line="1408" name="set" /></scope><scope doc="&#xA;&lt;string&gt; mirror  - server&#xA;&lt;int&gt; mirror  - http port&#xA;Returns boolean &#xA;" ilk="function" line="1439" lineend="1462" name="addMirror" returns="boolean" signature="boolean addMirror($server, $port = null)"><variable ilk="argument" line="1439" name="server" /><variable default="null" ilk="argument" line="1439" name="port" /><variable citdl="array()" line="1445" name="set" /></scope><scope doc="&#xA;Retrieve the name of the validation package for this channel&#xA;Returns string|false &#xA;" ilk="function" line="1468" lineend="1480" name="getValidationPackage" returns="string" signature="string getValidationPackage()" /><scope doc="&#xA;Retrieve the object that can be used for custom validation&#xA;&lt;string|false&gt; the  - name of the package to validate. If the package is&#xA;                    the channel validation package, PEAR_Validate is returned&#xA;Returns pear_validate|false  - false is returned if the validation package&#xA;        cannot be located&#xA;" ilk="function" line="1489" lineend="1532" name="getValidationObject" returns="PEAR_Validate" signature="pear_validate &amp;getValidationObject($package = false)"><variable default="false" ilk="argument" line="1489" name="package" /><variable citdl="boolean" line="1497" name="a" /><variable citdl="str_replace()" line="1516" name="vclass" /><variable citdl="PEAR_Validate" line="1505" name="val" /></scope><scope ilk="function" line="1534" lineend="1545" name="isIncludeable" returns="boolean" signature="isIncludeable($path)"><variable ilk="argument" line="1534" name="path" /><variable citdl="explode()" line="1536" name="possibilities" /><variable citdl="possibilities[]" line="1537" name="dir" /></scope><scope doc="&#xA;This function is used by the channel updater and retrieves a value set by&#xA;the registry, or the current time if it has not been set&#xA;Returns string &#xA;" ilk="function" line="1552" lineend="1559" name="lastModified" returns="string" signature="string lastModified()" /></scope></scope>