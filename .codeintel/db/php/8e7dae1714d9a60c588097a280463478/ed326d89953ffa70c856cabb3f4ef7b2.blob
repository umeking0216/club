<scope ilk="blob" lang="PHP" name="Frontend.php" src="/usr/share/pear/PEAR/Frontend.php"><scope classrefs="PEAR" doc="Singleton-based frontend for PEAR user input/output&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1" ilk="class" line="45" lineend="223" name="PEAR_Frontend"><scope attributes="public static" doc="&#xA;Retrieve the frontend object&#xA;Returns pear_frontend_cli|pear_frontend_web|pear_frontend_gtk &#xA;" ilk="function" line="51" lineend="63" name="singleton" returns="PEAR_Frontend_CLI" signature="pear_frontend_cli &amp;singleton($type = null)"><variable default="null" ilk="argument" line="51" name="type" /><variable citdl="boolean" line="55" name="a" /></scope><scope attributes="public static" doc="&#xA;Set the frontend class that will be used by calls to {@link singleton()}&#xA;Frontends are expected to conform to the PEAR naming standard of&#xA;_ =&gt; DIRECTORY_SEPARATOR (PEAR_Frontend_CLI is in PEAR/Frontend/CLI.php)&#xA;&lt;string&gt; $uiclass  - full class name&#xA;Returns pear_frontend &#xA;" ilk="function" line="73" lineend="103" name="setFrontendClass" returns="PEAR_Frontend" signature="pear_frontend &amp;setFrontendClass(string $uiclass)"><variable citdl="string" ilk="argument" line="73" name="uiclass" /><variable line="88" name="obj" /><variable citdl="PEAR.raiseError()" line="97" name="err" /><variable citdl="str_replace()" line="81" name="file" /></scope><scope attributes="public static" doc="Set the frontend class that will be used by calls to {@link singleton()}&#xA;&#xA;Frontends are expected to be a descendant of PEAR_Frontend&#xA;@param PEAR_Frontend&#xA;@return PEAR_Frontend" ilk="function" line="112" lineend="128" name="setFrontendObject" returns="PEAR_Frontend" signature="pear_frontend &amp;setFrontendObject($uiobject)"><variable ilk="argument" line="112" name="uiobject" /><variable citdl="PEAR.raiseError()" line="121" name="err" /></scope><scope attributes="public static" doc="&#xA;&lt;string&gt; $path  - relative or absolute include path&#xA;Returns boolean &#xA;" ilk="function" line="134" lineend="147" name="isIncludeable" returns="boolean" signature="boolean isIncludeable(string $path)"><variable citdl="string" ilk="argument" line="134" name="path" /><variable line="140" name="fp" /></scope><scope doc="@param PEAR_Config" ilk="function" line="152" lineend="154" name="setConfig" signature="setConfig(&amp; $config)"><variable ilk="argument" line="152" name="config" /></scope><scope attributes="static" doc="&#xA;This can be overridden to allow session-based temporary file management&#xA;By default, all files are deleted at the end of a session.  The web installer&#xA;needs to be able to sustain a list over many sessions in order to support&#xA;user interaction with install scripts&#xA;" ilk="function" line="163" lineend="166" name="addTempFile" signature="addTempFile($file)"><variable ilk="argument" line="163" name="file" /></scope><scope doc="&#xA;Log an action&#xA;&lt;string&gt; $msg  - the message to log&#xA;&lt;boolean&gt; $append_crlf  - &#xA;Returns boolean  - true&#xA;Abstract&#xA;" ilk="function" line="176" lineend="178" name="log" returns="boolean" signature="boolean log(string $msg, boolean $append_crlf = true)"><variable citdl="string" ilk="argument" line="176" name="msg" /><variable citdl="boolean" default="true" ilk="argument" line="176" name="append_crlf" /></scope><scope doc="&#xA;Run a post-installation script&#xA;&lt;array&gt; $scripts  - array of post-install scripts&#xA;Abstract&#xA;" ilk="function" line="186" lineend="188" name="runPostinstallScripts" signature="runPostinstallScripts(array &amp; $scripts)"><variable citdl="array" ilk="argument" line="186" name="scripts" /></scope><scope doc="&#xA;Display human-friendly output formatted depending on the&#xA;$command parameter.&#xA;This should be able to handle basic output data with no command&#xA;&lt;mixed&gt; $data  - data structure containing the information to display&#xA;&lt;string&gt; $command  - command from which this method was called&#xA;Abstract&#xA;" ilk="function" line="199" lineend="201" name="outputData" signature="outputData(mixed $data, string $command = &apos;_default&apos;)"><variable citdl="mixed" ilk="argument" line="199" name="data" /><variable citdl="string" default="&apos;_default&apos;" ilk="argument" line="199" name="command" /></scope><scope doc="&#xA;Display a modal form dialog and return the given input&#xA;A frontend that requires multiple requests to retrieve and process&#xA;data must take these needs into account, and implement the request&#xA;handling code.&#xA;&lt;string&gt; $command  - command from which this method was called&#xA;&lt;array&gt; $prompts  - associative array. keys are the input field names&#xA;                        and values are the description&#xA;&lt;array&gt; $types  - array of input field types (text, password,&#xA;                        etc.) keys have to be the same like in $prompts&#xA;&lt;array&gt; $defaults  - array of default values. again keys have&#xA;                        to be the same like in $prompts.  Do not depend&#xA;                        on a default value being set.&#xA;Returns array  - input sent by the user&#xA;Abstract&#xA;" ilk="function" line="220" lineend="222" name="userDialog" returns="array" signature="array userDialog(string $command, array $prompts, array $types = array(), array $defaults = array())"><variable citdl="string" ilk="argument" line="220" name="command" /><variable citdl="array" ilk="argument" line="220" name="prompts" /><variable citdl="array" default="array()" ilk="argument" line="220" name="types" /><variable citdl="array" default="array()" ilk="argument" line="220" name="defaults" /></scope></scope></scope>