<scope ilk="blob" lang="PHP" name="Common.php" src="/usr/share/pear/PEAR/Common.php"><import line="22" module="PEAR.php" /><import line="187" module="System.php" /><import line="211" module="PEAR/Frontend.php" /><import line="231" module="System.php" /><import line="248" module="PEAR/Frontend.php" /><import line="276" module="System.php" /><import line="724" module="PEAR/PackageFile/v2/Validator.php" /><import line="828" module="PEAR/Downloader.php" /><import line="837" module="PEAR/Config.php" /><import line="838" module="PEAR/PackageFile.php" /><variable citdl="int" ilk="constant" line="27" name="PEAR_COMMON_ERROR_INVALIDPHP" /><variable citdl="string" ilk="constant" line="28" name="_PEAR_COMMON_PACKAGE_NAME_PREG" /><variable citdl="string" ilk="constant" line="29" name="PEAR_COMMON_PACKAGE_NAME_PREG" /><variable citdl="string" ilk="constant" line="32" name="_PEAR_COMMON_PACKAGE_VERSION_PREG" /><variable citdl="string" ilk="constant" line="33" name="PEAR_COMMON_PACKAGE_VERSION_PREG" /><variable citdl="string" ilk="constant" line="36" name="_PEAR_COMMON_PACKAGE_DOWNLOAD_PREG" /><variable citdl="string" ilk="constant" line="38" name="PEAR_COMMON_PACKAGE_DOWNLOAD_PREG" /><variable citdl="string" ilk="constant" line="41" name="_PEAR_CHANNELS_NAME_PREG" /><variable citdl="string" ilk="constant" line="42" name="PEAR_CHANNELS_NAME_PREG" /><variable citdl="string" ilk="constant" line="45" name="_PEAR_CHANNELS_SERVER_PREG" /><variable citdl="string" ilk="constant" line="46" name="PEAR_CHANNELS_SERVER_PREG" /><variable citdl="string" ilk="constant" line="48" name="_PEAR_CHANNELS_PACKAGE_PREG" /><variable citdl="string" ilk="constant" line="50" name="PEAR_CHANNELS_PACKAGE_PREG" /><variable citdl="string" ilk="constant" line="52" name="_PEAR_COMMON_CHANNEL_DOWNLOAD_PREG" /><variable citdl="string" ilk="constant" line="54" name="PEAR_COMMON_CHANNEL_DOWNLOAD_PREG" /><scope classrefs="PEAR" doc="Class providing common functionality for PEAR administration classes.&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V. V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.4.0a1&#xA;@deprecated This class will disappear, and its components will be spread&#xA;            into smaller classes, like the AT&amp;T breakup, as of Release 1.4.0a1" ilk="class" line="126" lineend="835" name="PEAR_Common"><variable citdl="ui" doc="User Interface object (PEAR_Frontend_* class).  If null,&#xA;the log() method uses print.&#xA;@var object" line="133" name="ui" /><variable citdl="PEAR_Config" doc="Configuration object (PEAR_Config).&#xA;@var PEAR_Config" line="139" name="config" /><variable citdl="array()" line="142" name="element_stack" /><variable line="145" name="current_element" /><variable citdl="array()" line="148" name="current_attributes" /><variable citdl="array()" line="151" name="pkginfo" /><variable line="153" name="current_path" /><variable citdl="boolean" doc="Flag variable used to mark a valid package file&#xA;@var boolean&#xA;@access private" line="160" name="_validPackageFile" /><scope attributes="__ctor__" doc="&#xA;PEAR_Common constructor&#xA;Access public&#xA;" ilk="function" line="167" lineend="172" name="__construct" signature="__construct()" /><variable citdl="this.config.get()" line="171" name="debug" /><scope doc="&#xA;PEAR_Common destructor&#xA;Access private&#xA;" ilk="function" line="179" lineend="195" name="_PEAR_Common" signature="_PEAR_Common()"><variable citdl="GLOBALS" line="183" name="tempfiles" /><variable line="184" name="file" /></scope><scope attributes="static" doc="&#xA;Register a temporary file or directory.  When the destructor is&#xA;executed, all registered temporary files and directories are&#xA;removed.&#xA;&lt;string&gt; $file  - name of file or directory&#xA;Returns void &#xA;Access public&#xA;" ilk="function" line="208" lineend="214" name="addTempFile" signature="void addTempFile(string $file)"><variable citdl="string" ilk="argument" line="208" name="file" /></scope><scope doc="&#xA;Wrapper to System::mkDir(), creates a directory as well as&#xA;any necessary parent directories.&#xA;&lt;string&gt; $dir  - directory name&#xA;Returns bool  - TRUE on success, or a PEAR error&#xA;Access public&#xA;" ilk="function" line="226" lineend="234" name="mkDirHier" returns="bool" signature="bool mkDirHier(string $dir)"><variable citdl="string" ilk="argument" line="226" name="dir" /></scope><scope attributes="public" doc="&#xA;Logging method.&#xA;&lt;int&gt; $level  - log level (0 is quiet, higher is noisier)&#xA;&lt;string&gt; $msg  - message to write to the log&#xA;Returns void &#xA;" ilk="function" line="244" lineend="258" name="log" signature="void log(int $level, string $msg, $append_crlf = true)"><variable citdl="int" ilk="argument" line="244" name="level" /><variable citdl="string" ilk="argument" line="244" name="msg" /><variable default="true" ilk="argument" line="244" name="append_crlf" /><variable citdl="PEAR_Frontend.singleton()" line="251" name="ui" /></scope><scope doc="&#xA;Create and register a temporary directory.&#xA;&lt;string&gt; $tmpdir  - (optional) Directory to use as tmpdir.&#xA;                      Will use system defaults (for example&#xA;                      /tmp or c:\windows\temp) if not specified&#xA;Returns string  - name of created directory&#xA;Access public&#xA;" ilk="function" line="271" lineend="285" name="mkTempDir" returns="string" signature="string mkTempDir(string $tmpdir = &apos;&apos;)"><variable citdl="string" default="&apos;&apos;" ilk="argument" line="271" name="tmpdir" /><variable citdl="tmpdir" line="273" name="topt" /></scope><scope doc="&#xA;Set object that represents the frontend to be used.&#xA;&lt;object&gt; Reference  - of the frontend object&#xA;Returns void &#xA;Access public&#xA;" ilk="function" line="294" lineend="297" name="setFrontendObject" signature="void setFrontendObject(&amp; $ui)"><variable ilk="argument" line="294" name="ui" /></scope><scope attributes="static" doc="&#xA;Return an array containing all of the states that are more stable than&#xA;or equal to the passed in state&#xA;&lt;string&gt; Release  - state&#xA;&lt;boolean&gt; Determines  - whether to include $state in the list&#xA;Returns false|array  - False if $state is not a valid release state&#xA;" ilk="function" line="307" lineend="318" name="betterStates" returns="false" signature="false betterStates($state, $include = false)"><variable ilk="argument" line="307" name="state" /><variable default="false" ilk="argument" line="307" name="include" /><variable citdl="array_search()" line="310" name="i" /></scope><variable attributes="static" citdl="array()" line="309" name="states" /><scope attributes="public static" doc="&#xA;Get the valid roles for a PEAR package maintainer&#xA;Returns array &#xA;" ilk="function" line="325" lineend="328" name="getUserRoles" returns="array" signature="array getUserRoles()" /><scope attributes="public static" doc="&#xA;Get the valid package release states of packages&#xA;Returns array &#xA;" ilk="function" line="335" lineend="338" name="getReleaseStates" returns="array" signature="array getReleaseStates()" /><scope attributes="public static" doc="&#xA;Get the implemented dependency types (php, ext, pkg etc.)&#xA;Returns array &#xA;" ilk="function" line="345" lineend="348" name="getDependencyTypes" returns="array" signature="array getDependencyTypes()" /><scope attributes="public static" doc="&#xA;Get the implemented dependency relations (has, lt, ge etc.)&#xA;Returns array &#xA;" ilk="function" line="355" lineend="358" name="getDependencyRelations" returns="array" signature="array getDependencyRelations()" /><scope attributes="public static" doc="&#xA;Get the implemented file roles&#xA;Returns array &#xA;" ilk="function" line="365" lineend="368" name="getFileRoles" returns="array" signature="array getFileRoles()" /><scope attributes="public static" doc="&#xA;Get the implemented file replacement types in&#xA;Returns array &#xA;" ilk="function" line="375" lineend="378" name="getReplacementTypes" returns="array" signature="array getReplacementTypes()" /><scope attributes="public static" doc="&#xA;Get the implemented file replacement types in&#xA;Returns array &#xA;" ilk="function" line="385" lineend="388" name="getProvideTypes" returns="array" signature="array getProvideTypes()" /><scope attributes="public static" doc="&#xA;Get the implemented file replacement types in&#xA;Returns array &#xA;" ilk="function" line="395" lineend="398" name="getScriptPhases" returns="array" signature="array getScriptPhases()" /><scope doc="&#xA;Test whether a string contains a valid package name.&#xA;&lt;string&gt; $name  - the package name to test&#xA;Returns bool &#xA;Access public&#xA;" ilk="function" line="409" lineend="412" name="validPackageName" returns="bool" signature="bool validPackageName(string $name)"><variable citdl="string" ilk="argument" line="409" name="name" /></scope><scope doc="&#xA;Test whether a string contains a valid package version.&#xA;&lt;string&gt; $ver  - the package version to test&#xA;Returns bool &#xA;Access public&#xA;" ilk="function" line="423" lineend="426" name="validPackageVersion" returns="bool" signature="bool validPackageVersion(string $ver)"><variable citdl="string" ilk="argument" line="423" name="ver" /></scope><scope attributes="public static" doc="&#xA;&lt;string&gt; $path  - relative or absolute include path&#xA;Returns boolean &#xA;" ilk="function" line="432" lineend="447" name="isIncludeable" returns="boolean" signature="boolean isIncludeable(string $path)"><variable citdl="string" ilk="argument" line="432" name="path" /><variable citdl="realpath()" line="440" name="test" /><variable citdl="explode()" line="438" name="ipath" /><variable citdl="ipath[]" line="439" name="include" /></scope><scope ilk="function" line="449" lineend="463" name="_postProcessChecks" returns="this._postProcessValidPackagexml()" signature="_postProcessChecks($pf)"><variable ilk="argument" line="449" name="pf" /><variable citdl="pf.getUserinfo()" line="455" name="errs" /><variable citdl="this.raiseError()" line="458" name="e" /><variable citdl="errs[]" line="457" name="error" /></scope><scope doc="&#xA;Returns information about a package file.  Expects the name of&#xA;a gzipped tar file as input.&#xA;&lt;string&gt; $file  - name of .tgz file&#xA;Returns array  - array with package information&#xA;Access public&#xA;Deprecated use PEAR_PackageFile-&gt;fromTgzFile() instead&#xA;" ilk="function" line="477" lineend="482" name="infoFromTgzFile" returns="array" signature="array infoFromTgzFile(string $file)"><variable citdl="string" ilk="argument" line="477" name="file" /><variable citdl="PEAR_PackageFile" line="479" name="packagefile" /><variable citdl="packagefile.fromTgzFile()" line="480" name="pf" /></scope><scope doc="&#xA;Returns information about a package file.  Expects the name of&#xA;a package xml file as input.&#xA;&lt;string&gt; $descfile  - name of package xml file&#xA;Returns array  - array with package information&#xA;Access public&#xA;Deprecated use PEAR_PackageFile-&gt;fromPackageFile() instead&#xA;" ilk="function" line="496" lineend="501" name="infoFromDescriptionFile" returns="array" signature="array infoFromDescriptionFile(string $descfile)"><variable citdl="string" ilk="argument" line="496" name="descfile" /><variable citdl="PEAR_PackageFile" line="498" name="packagefile" /><variable citdl="packagefile.fromPackageFile()" line="499" name="pf" /></scope><scope doc="&#xA;Returns information about a package file.  Expects the contents&#xA;of a package xml file as input.&#xA;&lt;string&gt; $data  - contents of package.xml file&#xA;Returns array  - array with package information&#xA;Access public&#xA;Deprecated use PEAR_PackageFile-&gt;fromXmlstring() instead&#xA;" ilk="function" line="515" lineend="520" name="infoFromString" returns="array" signature="array infoFromString(string $data)"><variable citdl="string" ilk="argument" line="515" name="data" /><variable citdl="PEAR_PackageFile" line="517" name="packagefile" /><variable citdl="packagefile.fromXmlString()" line="518" name="pf" /></scope><scope doc="@param PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@return array" ilk="function" line="526" lineend="545" name="_postProcessValidPackagexml" returns="array" signature="array _postProcessValidPackagexml(&amp; $pf)"><variable ilk="argument" line="526" name="pf" /><variable citdl="pf.toArray()" line="535" name="arr" /></scope><scope doc="&#xA;Returns package information from different sources&#xA;This method is able to extract information about a package&#xA;from a .tgz archive or from a XML package definition file.&#xA;Access public&#xA;&lt;string&gt; Filename  - of the source (&apos;package.xml&apos;, &apos;&lt;package&gt;.tgz&apos;)&#xA;Returns string &#xA;Deprecated use PEAR_PackageFile-&gt;fromAnyFile() instead&#xA;" ilk="function" line="558" lineend="578" name="infoFromAny" returns="string" signature="string infoFromAny($info)"><variable ilk="argument" line="558" name="info" /><variable citdl="pf.getUserinfo()" line="564" name="errs" /><variable citdl="PEAR_PackageFile" line="561" name="packagefile" /><variable citdl="packagefile.fromAnyFile()" line="562" name="pf" /><variable citdl="this.raiseError()" line="567" name="e" /><variable citdl="errs[]" line="566" name="error" /></scope><scope doc="&#xA;Return an XML document based on the package info (as returned&#xA;by the PEAR_Common::infoFrom* methods).&#xA;&lt;array&gt; $pkginfo  - package info&#xA;Returns string  - XML data&#xA;Access public&#xA;Deprecated use a PEAR_PackageFile_v* object&apos;s generator instead&#xA;" ilk="function" line="591" lineend="598" name="xmlFromInfo" returns="string" signature="string xmlFromInfo(array $pkginfo)"><variable citdl="array" ilk="argument" line="591" name="pkginfo" /><variable citdl="PEAR_PackageFile" line="594" name="packagefile" /><variable citdl="PEAR_Config.singleton()" line="593" name="config" /><variable citdl="pf.getDefaultGenerator()" line="596" name="gen" /><variable citdl="packagefile.fromArray()" line="595" name="pf" /></scope><scope doc="&#xA;Validate XML package definition file.&#xA;&lt;string&gt; $info  - Filename of the package archive or of the&#xA;               package definition file&#xA;&lt;array&gt; $errors  - Array that will contain the errors&#xA;&lt;array&gt; $warnings  - Array that will contain the warnings&#xA;&lt;string&gt; $dir_prefix  - (optional) directory where source files&#xA;               may be found, or empty if they are not available&#xA;Access public&#xA;Returns boolean &#xA;Deprecated use the validation of PEAR_PackageFile objects&#xA;" ilk="function" line="613" lineend="641" name="validatePackageInfo" returns="boolean" signature="boolean validatePackageInfo(string $info, array &amp; $errors, array &amp; $warnings, string $dir_prefix = &apos;&apos;)"><variable citdl="string" ilk="argument" line="613" name="info" /><variable citdl="array" ilk="argument" line="613" name="errors" /><variable citdl="array" ilk="argument" line="613" name="warnings" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="613" name="dir_prefix" /><variable citdl="pf.getUserinfo()" line="626" name="errs" /><variable citdl="PEAR_PackageFile" line="616" name="packagefile" /><variable citdl="errs[]" line="628" name="error" /><variable citdl="PEAR_Config.singleton()" line="615" name="config" /><variable citdl="packagefile.fromXmlString()" line="619" name="pf" /></scope><scope doc="&#xA;Build a &quot;provides&quot; array from data returned by&#xA;analyzeSourceCode().  The format of the built array is like&#xA;this:&#xA; array(&#xA;   &apos;class;MyClass&apos; =&gt; &apos;array(&apos;type&apos; =&gt; &apos;class&apos;, &apos;name&apos; =&gt; &apos;MyClass&apos;),&#xA;   ...&#xA; )&#xA;&lt;array&gt; $srcinfo  - array with information about a source file&#xA;as returned by the analyzeSourceCode() method.&#xA;Returns void &#xA;Access public&#xA;" ilk="function" line="662" lineend="712" name="buildProvidesArray" signature="void buildProvidesArray(array $srcinfo)"><variable citdl="array" ilk="argument" line="662" name="srcinfo" /><variable citdl="string" line="687" name="function" /><variable citdl="basename()" line="664" name="file" /><variable citdl="srcinfo[]" line="685" name="methods" /><variable citdl="methods[]" line="686" name="method" /><variable citdl="strlen()" line="670" name="pnl" /><variable citdl="string" line="672" name="key" /><variable citdl="string" line="665" name="pn" /><variable citdl="srcinfo[]" line="671" name="class" /></scope><scope attributes="static" doc="&#xA;Analyze the source code of the given PHP file&#xA;&lt;string&gt; Filename  - of the PHP file&#xA;Returns mixed &#xA;Access public&#xA;" ilk="function" line="721" lineend="729" name="analyzeSourceCode" returns="mixed" signature="mixed analyzeSourceCode($file)"><variable ilk="argument" line="721" name="file" /><variable citdl="PEAR_PackageFile_v2_Validator" line="727" name="a" /></scope><scope ilk="function" line="731" lineend="767" name="detectDependencies" returns="boolean" signature="detectDependencies($any, $status_callback = null)"><variable ilk="argument" line="731" name="any" /><variable default="null" ilk="argument" line="731" name="status_callback" /><variable citdl="this.analyzeSourceCode()" line="748" name="tmp" /><variable citdl="array_diff()" line="758" name="undecl_c" /><variable citdl="array()" line="745" name="deps" /><variable citdl="info[]" line="747" name="fa" /><variable line="752" name="decl_m" /><variable line="747" name="file" /><variable line="753" name="inheri" /><variable line="751" name="decl_f" /><variable citdl="decl_c" line="746" name="used_c" /><variable citdl="array_unique()" line="750" name="decl_c" /></scope><scope doc="&#xA;Download a file through HTTP.  Considers suggested file name in&#xA;Content-disposition: header and can run a callback function for&#xA;different events.  The callback will be called with two&#xA;parameters: the callback type, and parameters.  The implemented&#xA;callback types are:&#xA; &apos;setup&apos;       called at the very beginning, parameter is a UI object&#xA;               that should be used for all output&#xA; &apos;message&apos;     the parameter is a string with an informational message&#xA; &apos;saveas&apos;      may be used to save with a different file name, the&#xA;               parameter is the filename that is about to be used.&#xA;               If a &apos;saveas&apos; callback returns a non-empty string,&#xA;               that file name will be used as the filename instead.&#xA;               Note that $save_dir will not be affected by this, only&#xA;               the basename of the file.&#xA; &apos;start&apos;       download is starting, parameter is number of bytes&#xA;               that are expected, or -1 if unknown&#xA; &apos;bytesread&apos;   parameter is the number of bytes read so far&#xA; &apos;done&apos;        download is complete, parameter is the total number&#xA;               of bytes read&#xA; &apos;connfailed&apos;  if the TCP connection fails, this callback is called&#xA;               with array(host,port,errno,errmsg)&#xA; &apos;writefailed&apos; if writing to disk fails, this callback is called&#xA;               with array(destfile,errmsg)&#xA;If an HTTP proxy has been configured (http_proxy PEAR_Config&#xA;setting), the proxy will be used.&#xA;&lt;string&gt; $url  - the URL to download&#xA;&lt;object&gt; $ui  - PEAR_Frontend_* instance&#xA;&lt;object&gt; $config  - PEAR_Config instance&#xA;&lt;string&gt; $save_dir  - (optional) directory to save file in&#xA;&lt;mixed&gt; $callback  - (optional) function/method to call for status&#xA;                          updates&#xA;&lt;false|string|array&gt; $lastmodified  - header values to check against&#xA;                                        for caching&#xA;                                        use false to return the header&#xA;                                        values from this download&#xA;&lt;false|array&gt; $accept  - Accept headers to send&#xA;&lt;false|string&gt; $channel  - Channel to use for retrieving&#xA;                                        authentication&#xA;Returns mixed  - Returns the full path of the downloaded file or a PEAR&#xA;               error on failure.  If the error is caused by&#xA;               socket-related errors, the error object will&#xA;               have the fsockopen error code available through&#xA;               getCode().  If caching is requested, then return the header&#xA;               values.&#xA;               If $lastmodified was given and the there are no changes,&#xA;               boolean false is returned.&#xA;Access public&#xA;" ilk="function" line="823" lineend="834" name="downloadHttp" returns="mixed" signature="mixed downloadHttp(string $url, object &amp; $ui, string $save_dir = &apos;.&apos;, mixed $callback = null, $lastmodified = null, $accept = false, $channel = false, object $config)"><variable citdl="string" ilk="argument" line="823" name="url" /><variable citdl="object" ilk="argument" line="823" name="ui" /><variable citdl="string" default="&apos;.&apos;" ilk="argument" line="823" name="save_dir" /><variable citdl="mixed" default="null" ilk="argument" line="823" name="callback" /><variable default="null" ilk="argument" line="823" name="lastmodified" /><variable default="false" ilk="argument" line="823" name="accept" /><variable default="false" ilk="argument" line="823" name="channel" /><variable citdl="object" ilk="argument" line="823" name="config" /></scope></scope></scope>