<scope ilk="blob" lang="PHP" name="Downloader.php" src="/usr/share/pear/PEAR/Downloader.php"><import line="22" module="PEAR/Common.php" /><import line="23" module="PEAR/Proxy.php" /><import line="207" module="System.php" /><import line="227" module="PEAR/ChannelFile.php" /><import line="259" module="PEAR/Downloader/Package.php" /><import line="275" module="PEAR/Dependency2.php" /><import line="333" module="System.php" /><import line="753" module="System.php" /><import line="911" module="PEAR/PackageFile/v2.php" /><import line="918" module="PEAR/PackageFile/v1.php" /><import line="1050" module="PEAR/PackageFile/v2.php" /><import line="1056" module="PEAR/PackageFile/v1.php" /><import line="1213" module="Structures/Graph.php" /><import line="1214" module="Structures/Graph/Node.php" /><import line="1215" module="Structures/Graph/Manipulator/TopologicalSorter.php" /><variable citdl="int" ilk="constant" line="25" name="PEAR_INSTALLER_OK" /><variable citdl="int" ilk="constant" line="26" name="PEAR_INSTALLER_FAILED" /><variable ilk="constant" line="27" name="PEAR_INSTALLER_SKIPPED" /><variable citdl="int" ilk="constant" line="28" name="PEAR_INSTALLER_ERROR_NO_PREF_STATE" /><scope classrefs="PEAR_Common" doc="Administration class used to download anything from the internet (PEAR Packages,&#xA;static URLs, xml files)&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V. V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Martin Jansen &lt;mj@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 1.3.0" ilk="class" line="46" lineend="1767" name="PEAR_Downloader"><variable citdl="PEAR_Registry" doc="@var PEAR_Registry&#xA;@access private" line="52" name="_registry" /><variable citdl="string" doc="Preferred Installation State (snapshot, devel, alpha, beta, stable)&#xA;@var string|null&#xA;@access private" line="59" name="_preferredState" /><variable citdl="array" doc="Options from command-line passed to Install.&#xA;&#xA;Recognized options:&lt;br /&gt;&#xA; - onlyreqdeps      : install all required dependencies as well&#xA; - alldeps          : install all dependencies, including optional&#xA; - installroot      : base relative path to install files in&#xA; - force            : force a download even if warnings would prevent it&#xA; - nocompress       : download uncompressed tarballs&#xA; - configureoptions : additional configure options&#xA;@see PEAR_Command_Install&#xA;@access private&#xA;@var array" line="75" name="_options" /><variable citdl="array" doc="Downloaded Packages after a call to download().&#xA;&#xA;Format of each entry:&#xA;&#xA;&lt;code&gt;&#xA;array(&apos;pkg&apos; =&gt; &apos;package_name&apos;, &apos;file&apos; =&gt; &apos;/path/to/local/file&apos;,&#xA;   &apos;info&apos; =&gt; array() // parsed package.xml&#xA;);&#xA;&lt;/code&gt;&#xA;@access private&#xA;@var array" line="90" name="_downloadedPackages" /><variable citdl="array" doc="Packages slated for download.&#xA;&#xA;This is used to prevent downloading a package more than once should it be a dependency&#xA;for two packages to be installed.&#xA;Format of each entry:&#xA;&#xA;&lt;pre&gt;&#xA;array(&apos;package_name1&apos; =&gt; parsed package.xml, &apos;package_name2&apos; =&gt; parsed package.xml,&#xA;);&#xA;&lt;/pre&gt;&#xA;@access private&#xA;@var array" line="106" name="_toDownload" /><variable citdl="array" doc="Array of every package installed, with names lower-cased.&#xA;&#xA;Format:&#xA;&lt;code&gt;&#xA;array(&apos;package1&apos; =&gt; 0, &apos;package2&apos; =&gt; 1, );&#xA;&lt;/code&gt;&#xA;@var array" line="117" name="_installed" /><variable citdl="array" doc="@var array&#xA;@access private" line="123" name="_errorStack" /><variable citdl="boolean" doc="@var boolean&#xA;@access private" line="129" name="_internalDownload" /><variable citdl="array" doc="Temporary variable used in sorting packages by dependency in {@link sortPkgDeps()}&#xA;@var array&#xA;@access private" line="136" name="_packageSortTree" /><variable citdl="string" doc="Temporary directory, or configuration value where downloads will occur&#xA;@var string" line="142" name="_downloadDir" /><variable attributes="protected static" citdl="array" doc="List of methods that can be called both statically and non-statically.&#xA;@var array" line="155" name="bivalentMethods" /><scope attributes="__ctor__" doc="@param PEAR_Frontend_*&#xA;@param array&#xA;@param PEAR_Config" ilk="function" line="162" lineend="193" name="__construct" returns="strtolower()" signature="__construct($ui = null, $options = array(), $config = null)"><variable default="null" ilk="argument" line="162" name="ui" /><variable default="array()" ilk="argument" line="162" name="options" /><variable default="null" ilk="argument" line="162" name="config" /><variable citdl="this._installed[]" line="185" name="unused" /><variable line="185" name="key" /><variable line="189" name="strtolower" /></scope><variable citdl="config" line="167" name="config" /><variable citdl="ui" line="170" name="ui" /><scope doc="Attempt to discover a channel&apos;s remote capabilities from&#xA;its server name&#xA;@param string&#xA;@return boolean" ilk="function" line="201" lineend="249" name="discover" returns="boolean" signature="boolean discover($channel)"><variable ilk="argument" line="201" name="channel" /><variable citdl="System.mktemp()" line="211" name="tmp" /><variable citdl="this.downloadHttp()" line="212" name="a" /><variable citdl="PEAR_ChannelFile" line="230" name="b" /><variable citdl="b.getName()" line="235" name="alias" /><variable attributes="__not_yet_defined__" line="225" name="lastmodified" /><variable citdl="this.ui" line="205" name="callback" /><variable citdl="this.config.get()" line="210" name="tmpdir" /></scope><scope doc="For simpler unit-testing&#xA;@param PEAR_Downloader&#xA;@return PEAR_Downloader_Package" ilk="function" line="256" lineend="263" name="newDownloaderPackage" returns="PEAR_Downloader_Package" signature="pear_downloader_package newDownloaderPackage(&amp; $t)"><variable ilk="argument" line="256" name="t" /><variable citdl="PEAR_Downloader_Package" line="261" name="a" /></scope><scope doc="For simpler unit-testing&#xA;@param PEAR_Config&#xA;@param array&#xA;@param array&#xA;@param int" ilk="function" line="272" lineend="279" name="getDependency2Object" returns="z" signature="&amp;getDependency2Object(&amp; $c, $i, $p, $s)"><variable ilk="argument" line="272" name="c" /><variable ilk="argument" line="272" name="i" /><variable ilk="argument" line="272" name="p" /><variable ilk="argument" line="272" name="s" /><variable citdl="PEAR_Dependency2" line="277" name="z" /></scope><scope ilk="function" line="281" lineend="511" name="download" returns="a" signature="&amp;download($params)"><variable ilk="argument" line="281" name="params" /><variable citdl="array()" line="284" name="a" /><variable citdl="array()" line="467" name="newparams" /><variable citdl="array()" line="292" name="channelschecked" /><variable citdl="this._registry.parsedPackageNameToString()" line="442" name="name" /><variable citdl="this.analyzeDependencies()" line="297" name="err" /><variable citdl="params[]" line="473" name="package" /><variable line="294" name="i" /><variable citdl="this._registry.getChannel()" line="336" name="curchannel" /><variable citdl="params[]" line="294" name="param" /><variable citdl="string" line="348" name="url" /><variable citdl="boolean" line="472" name="somefailed" /><variable citdl="params" line="413" name="ret" /><variable citdl="this.config.get()" line="347" name="mirror" /><variable citdl="boolean" line="406" name="reverify" /><variable citdl="params" line="475" name="pf" /><variable citdl="this._prependPath()" line="376" name="checkdir" /><variable citdl="array()" line="438" name="errorparams" /></scope><scope doc="&#xA;&lt;array&gt; all  - packages to be installed&#xA;" ilk="function" line="516" lineend="731" name="analyzeDependencies" signature="analyzeDependencies(&amp; $params, $force = false)"><variable ilk="argument" line="516" name="params" /><variable default="false" ilk="argument" line="516" name="force" /><variable citdl="boolean" line="524" name="reset" /><variable citdl="deps[]" line="578" name="dep" /><variable attributes="__not_yet_defined__" line="588" name="e" /><variable citdl="dep[]" line="594" name="d" /><variable citdl="boolean" line="539" name="hasfailed" /><variable citdl="param.getGroup()" line="645" name="groupname" /><variable line="527" name="i" /><variable line="578" name="type" /><variable citdl="this.getDependency2Object()" line="531" name="depchecker" /><variable citdl="depchecker.validatePackage()" line="534" name="installcheck" /><variable citdl="params[]" line="527" name="param" /><variable citdl="deps[]" line="652" name="group" /><variable citdl="boolean" line="543" name="failed" /><variable citdl="param.getPackageFile()" line="532" name="send" /><variable citdl="param.getDeps()" line="528" name="deps" /><variable citdl="boolean" line="651" name="found" /><variable citdl="boolean" line="523" name="redo" /></scope><scope doc="&#xA;Retrieve the directory that downloads will happen in&#xA;Access private&#xA;Returns string &#xA;" ilk="function" line="738" lineend="772" name="getDownloadDir" returns="string" signature="string getDownloadDir()"><variable citdl="this.config.get()" line="744" name="downloaddir" /></scope><scope ilk="function" line="774" lineend="784" name="setDownloadDir" returns="PEAR.raiseError()" signature="setDownloadDir($dir)"><variable ilk="argument" line="774" name="dir" /></scope><scope ilk="function" line="786" lineend="794" name="configSet" signature="configSet($key, $value, $layer = &apos;user&apos;, $channel = false)"><variable ilk="argument" line="786" name="key" /><variable ilk="argument" line="786" name="value" /><variable default="&apos;user&apos;" ilk="argument" line="786" name="layer" /><variable default="false" ilk="argument" line="786" name="channel" /></scope><scope ilk="function" line="796" lineend="799" name="setOptions" signature="setOptions($options)"><variable ilk="argument" line="796" name="options" /></scope><scope ilk="function" line="801" lineend="804" name="getOptions" returns="this._options" signature="getOptions()" /><scope doc="&#xA;&lt;array&gt; output  - of {@link parsePackageName()}&#xA;Access private&#xA;" ilk="function" line="811" lineend="941" name="_getPackageDownloadUrl" returns="PEAR.raiseError()" signature="_getPackageDownloadUrl($parr)"><variable ilk="argument" line="811" name="parr" /><variable citdl="string" line="931" name="ext" /><variable citdl="rest.getDownloadURL()" line="871" name="url" /><variable citdl="boolean" line="863" name="downloadVersion" /><variable citdl="this._registry.getChannel()" line="830" name="chan" /><variable citdl="stability" line="818" name="state" /><variable citdl="this.config.getREST()" line="857" name="rest" /><variable citdl="this.config.get()" line="813" name="curchannel" /><variable citdl="this._registry.packageInfo()" line="837" name="stability" /><variable citdl="boolean" line="843" name="base2" /><variable citdl="this._registry.packageInfo()" line="836" name="version" /><variable citdl="PEAR_PackageFile_v2" line="912" name="pf" /><variable citdl="base2" line="858" name="base" /><variable citdl="this.config.get()" line="845" name="preferred_mirror" /></scope><scope doc="&#xA;&lt;array&gt; dependency  - array&#xA;Access private&#xA;" ilk="function" line="947" lineend="1083" name="_getDepPackageDownloadUrl" returns="chan" signature="_getDepPackageDownloadUrl($dep, $parr)"><variable ilk="argument" line="947" name="dep" /><variable ilk="argument" line="947" name="parr" /><variable citdl="this.newDownloaderPackage()" line="993" name="info" /><variable citdl="string" line="949" name="xsdversion" /><variable citdl="info.initialize()" line="995" name="err" /><variable citdl="dep" line="962" name="remotechannel" /><variable citdl="rest.getDepDownloadURL()" line="1029" name="url" /><variable line="1013" name="base2" /><variable citdl="string" line="1070" name="ext" /><variable citdl="this._registry.getChannel()" line="953" name="chan" /><variable citdl="this.config.get()" line="950" name="curchannel" /><variable citdl="info.getChannel()" line="1008" name="param" /><variable line="987" name="state" /><variable citdl="this._registry.packageInfo()" line="958" name="version" /><variable citdl="PEAR_PackageFile_v2" line="1052" name="pf" /><variable citdl="this.config.getREST()" line="1023" name="rest" /><variable citdl="base2" line="1013" name="base" /></scope><scope doc="&#xA;Deprecated in favor of _getPackageDownloadUrl&#xA;" ilk="function" line="1088" lineend="1106" name="getPackageDownloadUrl" returns="string" signature="getPackageDownloadUrl($package, $version = null, $channel = false)"><variable ilk="argument" line="1088" name="package" /><variable default="null" ilk="argument" line="1088" name="version" /><variable default="false" ilk="argument" line="1088" name="channel" /><variable citdl="this._registry.getChannel()" line="1096" name="chan" /></scope><scope doc="&#xA;Retrieve a list of downloaded packages after a call to {@link download()}.&#xA;Also resets the list of downloaded packages.&#xA;Returns array &#xA;" ilk="function" line="1114" lineend="1120" name="getDownloadedPackages" returns="array" signature="array getDownloadedPackages()"><variable citdl="this._downloadedPackages" line="1116" name="ret" /></scope><scope ilk="function" line="1122" lineend="1152" name="_downloadCallback" signature="_downloadCallback($msg, $params = null)"><variable ilk="argument" line="1122" name="msg" /><variable default="null" ilk="argument" line="1122" name="params" /><variable citdl="string" line="1143" name="length" /><variable citdl="int" line="1134" name="bytes" /></scope><variable attributes="static" line="1132" name="bytes" /><scope ilk="function" line="1154" lineend="1169" name="_prependPath" returns="path" signature="_prependPath($path, $prepend)"><variable ilk="argument" line="1154" name="path" /><variable ilk="argument" line="1154" name="prepend" /></scope><scope doc="@param string&#xA;@param integer" ilk="function" line="1175" lineend="1178" name="pushError" signature="pushError($errmsg, $code = -1)"><variable ilk="argument" line="1175" name="errmsg" /><variable default="-1" ilk="argument" line="1175" name="code" /></scope><scope ilk="function" line="1180" lineend="1189" name="getErrorMsgs" returns="msgs" signature="getErrorMsgs()"><variable citdl="this._errorStack" line="1183" name="errs" /><variable citdl="errs[]" line="1184" name="err" /><variable citdl="array()" line="1182" name="msgs" /></scope><scope doc="&#xA;for BC&#xA;Deprecated&#xA;" ilk="function" line="1196" lineend="1201" name="sortPkgDeps" signature="sortPkgDeps(&amp; $packages, $uninstall = false)"><variable ilk="argument" line="1196" name="packages" /><variable default="false" ilk="argument" line="1196" name="uninstall" /></scope><scope doc="&#xA;Sort a list of arrays of array(downloaded packagefilename) by dependency.&#xA;This uses the topological sort method from graph theory, and the&#xA;Structures_Graph package to properly sort dependencies for installation.&#xA;&lt;array&gt; an  - array of downloaded PEAR_Downloader_Packages&#xA;Returns array  - array of array(packagefilename, package.xml contents)&#xA;" ilk="function" line="1211" lineend="1366" name="sortPackagesForInstall" returns="array" signature="array sortPackagesForInstall(&amp; $packages)"><variable ilk="argument" line="1211" name="packages" /><variable citdl="Structures_Graph_Manipulator_TopologicalSorter.sort()" line="1351" name="installOrder" /><variable citdl="array()" line="1352" name="ret" /><variable line="1354" name="index" /><variable citdl="pdeps[]" line="1295" name="group" /><variable citdl="pf.getDeps()" line="1233" name="pdeps" /><variable citdl="array()" line="1230" name="deplinks" /><variable citdl="node.getData()" line="1232" name="pf" /><variable citdl="deplinks[]" line="1345" name="parents" /><variable citdl="array()" line="1217" name="nodes" /><variable citdl="this.config.getRegistry()" line="1218" name="reg" /><variable citdl="nodes[]" line="1231" name="node" /><variable citdl="pdeps[]" line="1239" name="dep" /><variable line="1346" name="parent" /><variable line="1345" name="dependent" /><variable citdl="parents[]" line="1346" name="unused" /><variable citdl="reg.parsedPackageNameToString()" line="1224" name="pname" /><variable citdl="Structures_Graph" line="1216" name="depgraph" /><variable citdl="installOrder" line="1355" name="data" /><variable line="1353" name="count" /><variable citdl="packages[]" line="1219" name="package" /><variable citdl="reg.parsedPackageNameToString()" line="1249" name="dname" /><variable line="1219" name="i" /><variable citdl="array()" line="1282" name="t" /><variable citdl="installOrder[]" line="1354" name="sortedpackage" /></scope><scope doc="Detect recursive links between dependencies and break the cycles&#xA;&#xA;@param array&#xA;@access private" ilk="function" line="1374" lineend="1394" name="_detectDepCycle" signature="_detectDepCycle(&amp; $deplinks)"><variable ilk="argument" line="1374" name="deplinks" /><variable line="1378" name="dep" /><variable citdl="parents[]" line="1379" name="unused" /><variable citdl="boolean" line="1377" name="keepgoing" /><variable citdl="deplinks[]" line="1378" name="parents" /><variable line="1379" name="parent" /></scope><scope ilk="function" line="1396" lineend="1428" name="_testCycle" returns="boolean" signature="_testCycle($test, $deplinks, $dep)"><variable ilk="argument" line="1396" name="test" /><variable ilk="argument" line="1396" name="deplinks" /><variable ilk="argument" line="1396" name="dep" /><variable citdl="deplinks[]" line="1420" name="unused" /><variable citdl="array()" line="1400" name="visited" /><variable line="1420" name="parent" /></scope><variable attributes="static" citdl="array()" line="1398" name="visited" /><scope doc="&#xA;Set up the dependency for installation parsing&#xA;&lt;array&gt; $t  - dependency information&#xA;&lt;pear_registry&gt; $reg  - &#xA;&lt;array&gt; $deplinks  - list of dependency links already established&#xA;&lt;array&gt; $nodes  - all existing package nodes&#xA;&lt;string&gt; $package  - parent package name&#xA;Access private&#xA;" ilk="function" line="1440" lineend="1457" name="_setupGraph" signature="_setupGraph(array $t, PEAR_Registry $reg, array &amp; $deplinks, array &amp; $nodes, string $package)"><variable citdl="array" ilk="argument" line="1440" name="t" /><variable citdl="PEAR_Registry" ilk="argument" line="1440" name="reg" /><variable citdl="array" ilk="argument" line="1440" name="deplinks" /><variable citdl="array" ilk="argument" line="1440" name="nodes" /><variable citdl="string" ilk="argument" line="1440" name="package" /><variable citdl="t[]" line="1442" name="dep" /><variable citdl="reg.parsedPackageNameToString()" line="1448" name="dname" /><variable line="1443" name="depchannel" /></scope><scope ilk="function" line="1459" lineend="1462" name="_dependsOn" returns="this._checkDepTree()" signature="_dependsOn($a, $b)"><variable ilk="argument" line="1459" name="a" /><variable ilk="argument" line="1459" name="b" /></scope><scope ilk="function" line="1464" lineend="1485" name="_checkDepTree" returns="boolean" signature="_checkDepTree($channel, $package, $b, $checked = array())"><variable ilk="argument" line="1464" name="channel" /><variable ilk="argument" line="1464" name="package" /><variable ilk="argument" line="1464" name="b" /><variable default="array()" ilk="argument" line="1464" name="checked" /><variable line="1477" name="pa" /><variable line="1476" name="ch" /><variable citdl="packages[]" line="1477" name="true" /><variable citdl="this._depTree[]" line="1476" name="packages" /></scope><scope ilk="function" line="1487" lineend="1506" name="_sortInstall" returns="int" signature="_sortInstall($a, $b)"><variable ilk="argument" line="1487" name="a" /><variable ilk="argument" line="1487" name="b" /></scope><scope attributes="public static" doc="&#xA;Download a file through HTTP.  Considers suggested file name in&#xA;Content-disposition: header and can run a callback function for&#xA;different events.  The callback will be called with two&#xA;parameters: the callback type, and parameters.  The implemented&#xA;callback types are:&#xA; &apos;setup&apos;       called at the very beginning, parameter is a UI object&#xA;               that should be used for all output&#xA; &apos;message&apos;     the parameter is a string with an informational message&#xA; &apos;saveas&apos;      may be used to save with a different file name, the&#xA;               parameter is the filename that is about to be used.&#xA;               If a &apos;saveas&apos; callback returns a non-empty string,&#xA;               that file name will be used as the filename instead.&#xA;               Note that $save_dir will not be affected by this, only&#xA;               the basename of the file.&#xA; &apos;start&apos;       download is starting, parameter is number of bytes&#xA;               that are expected, or -1 if unknown&#xA; &apos;bytesread&apos;   parameter is the number of bytes read so far&#xA; &apos;done&apos;        download is complete, parameter is the total number&#xA;               of bytes read&#xA; &apos;connfailed&apos;  if the TCP/SSL connection fails, this callback is called&#xA;               with array(host,port,errno,errmsg)&#xA; &apos;writefailed&apos; if writing to disk fails, this callback is called&#xA;               with array(destfile,errmsg)&#xA;If an HTTP proxy has been configured (http_proxy PEAR_Config&#xA;setting), the proxy will be used.&#xA;&lt;string&gt; $url  - the URL to download&#xA;&lt;object&gt; $ui  - PEAR_Frontend_* instance&#xA;&lt;object&gt; $config  - PEAR_Config instance&#xA;&lt;string&gt; $save_dir  - directory to save file in&#xA;&lt;mixed&gt; $callback  - function/method to call for status&#xA;                          updates&#xA;&lt;false|string|array&gt; $lastmodified  - header values to check against for caching&#xA;                          use false to return the header values from this download&#xA;&lt;false|array&gt; $accept  - Accept headers to send&#xA;&lt;false|string&gt; $channel  - Channel to use for retrieving authentication&#xA;Returns mixed  - Returns the full path of the downloaded file or a PEAR&#xA;               error on failure.  If the error is caused by&#xA;               socket-related errors, the error object will&#xA;               have the fsockopen error code available through&#xA;               getCode().  If caching is requested, then return the header&#xA;               values.&#xA;               If $lastmodified was given and the there are no changes,&#xA;               boolean false is returned.&#xA;Access public&#xA;" ilk="function" line="1558" lineend="1766" name="_downloadHttp" returns="mixed" signature="mixed _downloadHttp($object, string $url, object &amp; $ui, string $save_dir = &apos;.&apos;, mixed $callback = null, $lastmodified = null, $accept = false, $channel = false, object $config)"><variable ilk="argument" line="1558" name="object" /><variable citdl="string" ilk="argument" line="1558" name="url" /><variable citdl="object" ilk="argument" line="1558" name="ui" /><variable citdl="string" default="&apos;.&apos;" ilk="argument" line="1558" name="save_dir" /><variable citdl="mixed" default="null" ilk="argument" line="1558" name="callback" /><variable default="null" ilk="argument" line="1558" name="lastmodified" /><variable default="false" ilk="argument" line="1558" name="accept" /><variable default="false" ilk="argument" line="1558" name="channel" /><variable citdl="object" ilk="argument" line="1558" name="config" /><variable citdl="proxy.openSocket()" line="1602" name="fp" /><variable line="1600" name="secure" /><variable citdl="int" line="1724" name="bytes" /><variable citdl="fp.getMessage()" line="1606" name="errstr" /><variable line="1580" name="port" /><variable citdl="int" line="1565" name="redirect" /><variable citdl="basename()" line="1696" name="save_as" /><variable citdl="fp.getCode()" line="1605" name="errno" /><variable attributes="__not_yet_defined__" line="1668" name="matches" /><variable citdl="int" line="1664" name="reply" /><variable line="1599" name="scheme" /><variable citdl="config.get()" line="1642" name="username" /><variable citdl="base64_encode()" line="1645" name="tmp" /><variable citdl="redirect" line="1564" name="wasredirect" /><variable line="1579" name="host" /><variable citdl="PEAR_Proxy" line="1589" name="proxy" /><variable line="1581" name="path" /><variable line="1665" name="line" /><variable citdl="config.get()" line="1643" name="password" /><variable line="1729" name="data" /><variable citdl="string" line="1625" name="ifmodifiedsince" /><variable citdl="parse_url()" line="1570" name="info" /><variable citdl="path" line="1613" name="requestPath" /><variable citdl="string" line="1619" name="request" /><variable citdl="array()" line="1663" name="headers" /><variable line="1722" name="length" /><variable citdl="proxy.getProxyAuth()" line="1650" name="proxyAuth" /><variable citdl="save_dir" line="1708" name="dest_file" /></scope><variable attributes="static" citdl="int" line="1562" name="redirect" /></scope></scope>