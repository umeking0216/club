<scope ilk="blob" lang="PHP" name="Installer.php" src="/usr/share/pear/PEAR/Installer.php"><import line="22" module="OS/Guess.php" /><import line="23" module="PEAR/Downloader.php" /><import line="168" module="PEAR/Task/Common.php" /><import line="169" module="PEAR/Task/Replace.php" /><import line="170" module="PEAR/Task/Unixeol.php" /><import line="171" module="PEAR/Task/Windowseol.php" /><import line="172" module="PEAR/PackageFile/v1.php" /><import line="173" module="PEAR/PackageFile/v2.php" /><import line="174" module="PEAR/PackageFile/Generator/v1.php" /><import line="175" module="PEAR/PackageFile/Generator/v2.php" /><import line="1517" module="PEAR/Builder.php" /><import line="1663" module="PEAR/Dependency2.php" /><variable ilk="constant" line="25" name="PEAR_INSTALLER_NOBINARY" /><scope classrefs="PEAR_Downloader" doc="Administration class used to install PEAR packages and maintain the&#xA;installed package database.&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V.V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Martin Jansen &lt;mj@php.net&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2009 The Authors&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 0.1" ilk="class" line="42" lineend="1807" name="PEAR_Installer"><variable citdl="string" doc="name of the package directory, for example Foo-1.0&#xA;@var string" line="49" name="pkgdir" /><variable citdl="string" doc="directory where PHP code files go&#xA;@var string" line="54" name="phpdir" /><variable citdl="string" doc="directory where PHP extension files go&#xA;@var string" line="59" name="extdir" /><variable citdl="string" doc="directory where documentation goes&#xA;@var string" line="64" name="docdir" /><variable citdl="string" doc="installation root directory (ala PHP&apos;s INSTALL_ROOT or&#xA;automake&apos;s DESTDIR&#xA;@var string" line="70" name="installroot" /><variable citdl="int" doc="debug level&#xA;@var int" line="75" name="debug" /><variable citdl="string" doc="temporary directory&#xA;@var string" line="80" name="tmpdir" /><variable citdl="PEAR_Registry" doc="PEAR_Registry object used by the installer&#xA;@var PEAR_Registry" line="86" name="registry" /><variable citdl="array" doc="array of PEAR_Downloader_Packages&#xA;@var array" line="92" name="_downloadedPackages" /><variable citdl="array" doc="List of file transactions queued for an install/upgrade/uninstall.&#xA;&#xA; Format:&#xA;   array(&#xA;     0 =&gt; array(&quot;rename =&gt; array(&quot;from-file&quot;, &quot;to-file&quot;)),&#xA;     1 =&gt; array(&quot;delete&quot; =&gt; array(&quot;file-to-delete&quot;)),&#xA;     ...&#xA;   )&#xA;&#xA;@var array" line="105" name="file_operations" /><scope attributes="__ctor__" doc="&#xA;PEAR_Installer constructor.&#xA;&lt;object&gt; $ui  - user interface object (instance of PEAR_Frontend_*)&#xA;Access public&#xA;" ilk="function" line="118" lineend="123" name="__construct" signature="__construct(object &amp; $ui)"><variable citdl="object" ilk="argument" line="118" name="ui" /></scope><scope ilk="function" line="125" lineend="128" name="setOptions" signature="setOptions($options)"><variable ilk="argument" line="125" name="options" /></scope><variable citdl="options" line="127" name="_options" /><scope ilk="function" line="130" lineend="134" name="setConfig" signature="setConfig(&amp; $config)"><variable ilk="argument" line="130" name="config" /></scope><variable citdl="config" line="132" name="config" /><variable citdl="this.config.getRegistry()" line="133" name="_registry" /><scope doc="&#xA;}}}&#xA;" ilk="function" line="138" lineend="143" name="_removeBackups" signature="_removeBackups($files)"><variable ilk="argument" line="138" name="files" /><variable citdl="files[]" line="140" name="path" /></scope><scope doc="&#xA;Delete a package&apos;s installed files, does not remove empty directories.&#xA;&lt;string&gt; package  - name&#xA;&lt;string&gt; channel  - name&#xA;&lt;bool&gt; if  - true, then files are backed up first&#xA;Returns bool  - TRUE on success, or a PEAR error on failure&#xA;Access protected&#xA;" ilk="function" line="156" lineend="203" name="_deletePackageFiles" returns="bool" signature="bool _deletePackageFiles($package, $channel = false, $backup = false)"><variable ilk="argument" line="156" name="package" /><variable default="false" ilk="argument" line="156" name="channel" /><variable default="false" ilk="argument" line="156" name="backup" /><variable citdl="props" line="189" name="path" /><variable line="184" name="file" /><variable citdl="array()" line="183" name="ret" /><variable citdl="this._registry.packageInfo()" line="178" name="filelist" /><variable citdl="filelist[]" line="184" name="props" /></scope><scope doc="&#xA;&lt;string&gt; filename  - &#xA;&lt;array&gt; attributes  - from &lt;file&gt; tag in package.xml&#xA;&lt;string&gt; path  - to install the file in&#xA;&lt;array&gt; options  - from command-line&#xA;Access private&#xA;" ilk="function" line="215" lineend="490" name="_installFile" returns="PEAR_INSTALLER_SKIPPED" signature="_installFile($file, $atts, $tmp_path, $options)"><variable ilk="argument" line="215" name="file" /><variable ilk="argument" line="215" name="atts" /><variable ilk="argument" line="215" name="tmp_path" /><variable ilk="argument" line="215" name="options" /><variable citdl="atts[]" line="352" name="a" /><variable citdl="this.config.get()" line="477" name="loc" /><variable citdl="md5_file()" line="333" name="md5sum" /><variable citdl="this.config.get()" line="353" name="to" /><variable citdl="dirname()" line="293" name="installedas_dest_dir" /><variable citdl="this._registry.getChannel()" line="365" name="chan" /><variable citdl="installed_as" line="291" name="final_dest_file" /><variable line="285" name="ds2" /><variable citdl="tmp_path" line="282" name="orig_file" /><variable citdl="dest_dir" line="294" name="installedas_dest_file" /><variable citdl="substr()" line="230" name="platform" /><variable line="401" name="wp" /><variable citdl="dest_dir" line="278" name="dest_file" /><variable citdl="file_get_contents()" line="342" name="contents" /><variable citdl="this.config.get()" line="254" name="dest_dir" /><variable citdl="boolean" line="229" name="negate" /><variable citdl="subst_to" line="351" name="subst_from" /><variable citdl="dest_dir" line="268" name="save_destdir" /><variable citdl="OS_Guess" line="225" name="os" /><variable citdl="this.pkginfo.getChannel()" line="243" name="channel" /><variable citdl="int" line="448" name="mode" /></scope><variable attributes="static" line="218" name="os" /><scope doc="@param PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@param string filename&#xA;@param array attributes from &lt;file&gt; tag in package.xml&#xA;@param string path to install the file in&#xA;@param array options from command-line&#xA;@access private" ilk="function" line="503" lineend="703" name="_installFile2" returns="this.raiseError()" signature="_installFile2(&amp; $pkg, $file, &amp; $real_atts, $tmp_path, $options)"><variable ilk="argument" line="503" name="pkg" /><variable ilk="argument" line="503" name="file" /><variable ilk="argument" line="503" name="real_atts" /><variable ilk="argument" line="503" name="tmp_path" /><variable ilk="argument" line="503" name="options" /><variable citdl="role.processInstallation()" line="528" name="info" /><variable citdl="atts" line="558" name="attribs" /><variable citdl="string" line="595" name="task" /><variable citdl="real_atts" line="505" name="atts" /><variable citdl="role.setup()" line="519" name="err" /><variable citdl="this.config.get()" line="695" name="loc" /><variable citdl="task.startSession()" line="599" name="res" /><variable citdl="md5_file()" line="576" name="md5sum" /><variable attributes="__not_yet_defined__" line="533" name="orig_file" /><variable line="611" name="wp" /><variable citdl="atts[]" line="593" name="raw" /><variable citdl="str_replace()" line="593" name="tag" /><variable citdl="PEAR_Installer_Role.factory()" line="518" name="role" /><variable citdl="file_get_contents()" line="584" name="contents" /><variable citdl="installed_as" line="538" name="final_dest_file" /><variable attributes="__not_yet_defined__" citdl="dirname()" line="533" name="dest_dir" /><variable attributes="__not_yet_defined__" citdl="dest_dir" line="533" name="dest_file" /><variable attributes="__not_yet_defined__" line="533" name="save_destdir" /><variable citdl="pkg.getChannel()" line="510" name="channel" /><variable citdl="int" line="667" name="mode" /></scope><scope doc="&#xA;Add a file operation to the current file transaction.&#xA;See startFileTransaction()&#xA;&lt;string&gt; $type  - This can be one of:&#xA;   - rename:  rename a file ($data has 3 values)&#xA;   - backup:  backup an existing file ($data has 1 value)&#xA;   - removebackup:  clean up backups created during install ($data has 1 value)&#xA;   - chmod:   change permissions on a file ($data has 2 values)&#xA;   - delete:  delete a file ($data has 1 value)&#xA;   - rmdir:   delete a directory if empty ($data has 1 value)&#xA;   - installed_as: mark a file as installed ($data has 4 values).&#xA;&lt;array&gt; $data  - For all file operations, this array must contain the&#xA;   full path to the file or directory that is being operated on.  For&#xA;   the rename command, the first parameter must be the file to rename,&#xA;   the second its new name, the third whether this is a PHP extension.&#xA;   The installed_as operation contains 4 elements in this order:&#xA;   1. Filename as listed in the filelist element from package.xml&#xA;   2. Full path to the installed file&#xA;   3. Full path from the php_dir configuration variable used in this&#xA;      installation&#xA;   4. Relative path from the php_dir that this file is installed in&#xA;" ilk="function" line="732" lineend="746" name="addFileOperation" returns="this.raiseError()" signature="addFileOperation(string $type, array $data)"><variable citdl="string" ilk="argument" line="732" name="type" /><variable citdl="array" ilk="argument" line="732" name="data" /><variable citdl="decoct()" line="740" name="octmode" /></scope><scope doc="&#xA;}}}&#xA;{{{ startFileTransaction()&#xA;" ilk="function" line="751" lineend="757" name="startFileTransaction" signature="startFileTransaction($rollback_in_case = false)"><variable default="false" ilk="argument" line="751" name="rollback_in_case" /></scope><scope doc="&#xA;}}}&#xA;{{{ commitFileTransaction()&#xA;" ilk="function" line="762" lineend="973" name="commitFileTransaction" returns="boolean" signature="commitFileTransaction()"><variable citdl="new.getName()" line="820" name="newPackage" /><variable citdl="string" line="881" name="extra" /><variable line="897" name="perms" /><variable citdl="decoct()" line="916" name="octmode" /><variable citdl="this.pkginfo.getName()" line="818" name="pkginfoName" /><variable citdl="this._registry.checkFileMap()" line="812" name="result" /><variable citdl="array()" line="765" name="errors" /><variable citdl="opendir()" line="932" name="testme" /><variable citdl="array_diff()" line="814" name="res" /><variable citdl="this.file_operations[]" line="766" name="tr" /><variable citdl="file_exists()" line="877" name="test" /><variable citdl="this._registry.getPackage()" line="816" name="new" /><variable attributes="__not_yet_defined__" line="767" name="type" /><variable citdl="boolean" line="795" name="fp" /><variable line="766" name="key" /><variable citdl="new.getChannel()" line="819" name="newChannel" /><variable attributes="__not_yet_defined__" line="767" name="data" /><variable citdl="array()" line="811" name="info" /><variable line="849" name="i" /><variable citdl="count()" line="834" name="m" /><variable citdl="count()" line="831" name="n" /><variable citdl="errors[]" line="836" name="error" /><variable line="933" name="entry" /></scope><variable citdl="array()" line="847" name="_dirtree" /><scope doc="&#xA;}}}&#xA;{{{ rollbackFileTransaction()&#xA;" ilk="function" line="978" lineend="1019" name="rollbackFileTransaction" signature="rollbackFileTransaction()"><variable attributes="__not_yet_defined__" line="983" name="type" /><variable citdl="this.file_operations[]" line="982" name="tr" /><variable attributes="__not_yet_defined__" line="983" name="data" /><variable citdl="count()" line="980" name="n" /></scope><scope doc="&#xA;}}}&#xA;{{{ mkDirHier($dir)&#xA;" ilk="function" line="1024" lineend="1028" name="mkDirHier" signature="mkDirHier($dir)"><variable ilk="argument" line="1024" name="dir" /></scope><scope doc="&#xA;}}}&#xA;{{{ _parsePackageXml()&#xA;" ilk="function" line="1033" lineend="1054" name="_parsePackageXml" returns="this.raiseError()" signature="_parsePackageXml(&amp; $descfile)"><variable ilk="argument" line="1033" name="descfile" /><variable citdl="err" line="1043" name="loglevel" /><variable citdl="pkg.fromAnyFile()" line="1038" name="p" /><variable citdl="PEAR_PackageFile" line="1036" name="pkg" /><variable citdl="p.getUserInfo()[]" line="1042" name="err" /></scope><scope doc="Set the list of PEAR_Downloader_Package objects to allow more sane&#xA;dependency validation&#xA;@param array" ilk="function" line="1062" lineend="1071" name="setDownloadedPackages" returns="err" signature="setDownloadedPackages(&amp; $pkgs)"><variable ilk="argument" line="1062" name="pkgs" /><variable citdl="this.analyzeDependencies()" line="1065" name="err" /></scope><scope doc="Set the list of PEAR_Downloader_Package objects to allow more sane&#xA;dependency validation&#xA;@param array" ilk="function" line="1078" lineend="1081" name="setUninstallPackages" signature="setUninstallPackages(&amp; $pkgs)"><variable ilk="argument" line="1078" name="pkgs" /></scope><scope ilk="function" line="1083" lineend="1086" name="getInstallPackages" returns="this._downloadedPackages" signature="getInstallPackages()" /><scope doc="&#xA;Installs the files within the package file specified.&#xA;&lt;string|pear_downloader_package&gt; $pkgfile  - path to the package file,&#xA;       or a pre-initialized packagefile object&#xA;&lt;array&gt; $options  - &#xA;recognized options:&#xA;- installroot   : optional prefix directory for installation&#xA;- force         : force installation&#xA;- register-only : update registry but don&apos;t install files&#xA;- upgrade       : upgrade existing install&#xA;- soft          : fail silently&#xA;- nodeps        : ignore dependency conflicts/missing dependencies&#xA;- alldeps       : install all dependencies&#xA;- onlyreqdeps   : install only required dependencies&#xA;Returns array|pear_error  - package info if successful&#xA;" ilk="function" line="1108" lineend="1505" name="install" returns="array" signature="array install($pkgfile, array $options = array())"><variable ilk="argument" line="1108" name="pkgfile" /><variable citdl="array" default="array()" ilk="argument" line="1108" name="options" /><variable citdl="substr()" line="1219" name="file2" /><variable citdl="substr()" line="1218" name="basedir" /><variable citdl="string" line="1434" name="installphase" /><variable citdl="Archive_Tar" line="1131" name="tar" /><variable citdl="dirtree[]" line="1460" name="notused" /><variable citdl="strpos()" line="1217" name="pos" /><variable citdl="channel" line="1297" name="usechannel" /><variable citdl="pkgfile.getPackageFile()" line="1114" name="pkg" /><variable line="1209" name="file" /><variable citdl="this.config.get()" line="1154" name="metadata_dir" /><variable citdl="this._prependPath()" line="1162" name="packrootphp_dir" /><variable citdl="test" line="1208" name="tmp" /><variable citdl="pkg.getPackagexmlVersion()" line="1363" name="ver" /><variable citdl="this._installFile()" line="1383" name="res" /><variable citdl="string" line="1274" name="fmt" /><variable citdl="this.config.get()" line="1145" name="php_dir" /><variable citdl="pkgs[]" line="1198" name="param" /><variable line="1414" name="configureoptions" /><variable citdl="this.getInstallPackages()" line="1196" name="pkgs" /><variable citdl="installregistry.packageExists()" line="1190" name="test" /><variable citdl="pkg.getChannel()" line="1138" name="channel" /><variable citdl="pkg.getPackageFile()" line="1116" name="descfile" /><variable line="1404" name="real" /><variable citdl="channel" line="1182" name="testp" /><variable citdl="this._registry" line="1143" name="installregistry" /><variable citdl="PEAR_PackageFile" line="1253" name="pfk" /><variable citdl="dirname()" line="1125" name="tmpdir" /><variable citdl="string" line="1272" name="msg" /><variable citdl="pkg.getVersion()" line="1317" name="v2" /><variable citdl="pkgfile" line="1113" name="dlpkg" /><variable citdl="max()" line="1273" name="longest" /><variable citdl="filelist[]" line="1380" name="atts" /><variable citdl="pfk.fromArray()" line="1254" name="parentpkg" /><variable citdl="tmp[]" line="1209" name="info" /><variable citdl="pkg.getName()" line="1137" name="pkgname" /><variable citdl="installregistry.packageInfo()" line="1316" name="v1" /><variable line="1375" name="dirtree" /><variable citdl="boolean" line="1435" name="oldversion" /><variable citdl="this._prependPath()" line="1152" name="regdir" /><variable citdl="pkg.getInstallationFilelist()" line="1365" name="filelist" /><variable citdl="installregistry.getPackage()" line="1374" name="p" /><variable citdl="installregistry.addPackage2()" line="1433" name="ret" /><variable citdl="err" line="1338" name="backedup" /><variable citdl="installregistry.packageInfo()" line="1207" name="parentreg" /><variable citdl="this._registry.getChannel()" line="1167" name="chanobj" /><variable citdl="boolean" line="1197" name="found" /><variable citdl="pkg.getInstallationFileList()" line="1183" name="instfilelist" /><variable citdl="this.config.get()" line="1349" name="savechannel" /><variable line="1460" name="dir" /><variable citdl="version_compare()" line="1318" name="cmp" /></scope><variable citdl="pkg" line="1345" name="pkginfo" /><variable citdl="int" line="1347" name="source_files" /><scope doc="@param string&#xA;@param PEAR_PackageFile_v1|PEAR_PackageFile_v2&#xA;@param mixed[] $configureoptions" ilk="function" line="1515" lineend="1599" name="_compileSourceFiles" returns="built" signature="_compileSourceFiles($savechannel, &amp; $filelist, $configureoptions)"><variable ilk="argument" line="1515" name="savechannel" /><variable ilk="argument" line="1515" name="filelist" /><variable ilk="argument" line="1515" name="configureoptions" /><variable citdl="bob.build()" line="1521" name="built" /><variable citdl="copyto" line="1550" name="extra" /><variable citdl="ext" line="1543" name="dest" /><variable citdl="basename()" line="1530" name="bn" /><variable citdl="this._prependPath()" line="1549" name="copyto" /><variable attributes="__not_yet_defined__" line="1531" name="_ext_name" /><variable citdl="string" line="1544" name="packagingroot" /><variable citdl="built[]" line="1529" name="ext" /><variable citdl="dirname()" line="1553" name="copydir" /><variable citdl="string" line="1538" name="role" /><variable citdl="int" line="1574" name="mode" /><variable citdl="PEAR_Builder" line="1519" name="bob" /><variable citdl="array()" line="1591" name="data" /><variable attributes="__not_yet_defined__" line="1531" name="_ext_suff" /></scope><scope doc="&#xA;}}}&#xA;" ilk="function" line="1602" lineend="1605" name="getUninstallPackages" returns="this._downloadedPackages" signature="&amp;getUninstallPackages()" /><scope doc="&#xA;Uninstall a package&#xA;This method removes all files installed by the application, and then&#xA;removes any empty directories.&#xA;&lt;string&gt; package  - name&#xA;&lt;array&gt; Command-line  - options. Possibilities include:&#xA;             - installroot: base installation dir, if not the default&#xA;             - register-only : update registry but don&apos;t remove files&#xA;             - nodeps: do not process dependencies of other packages to ensure&#xA;                       uninstallation does not break things&#xA;" ilk="function" line="1621" lineend="1746" name="uninstall" returns="this.raiseError()" signature="uninstall($package, $options = array())"><variable ilk="argument" line="1621" name="package" /><variable default="array()" ilk="argument" line="1621" name="options" /><variable citdl="this._registry.parsePackageName()" line="1635" name="info" /><variable citdl="depchecker.validatePackageUninstall()" line="1669" name="e" /><variable citdl="pkg.getDirTree()" line="1717" name="dirtree" /><variable citdl="PEAR_Dependency2" line="1668" name="depchecker" /><variable citdl="dirtree[]" line="1725" name="notused" /><variable line="1725" name="dir" /><variable citdl="pkg.getFilelist()" line="1660" name="filelist" /><variable line="1623" name="installRoot" /><variable citdl="package" line="1630" name="pkg" /><variable citdl="package.getChannel()" line="1629" name="channel" /><variable citdl="this.config.get()" line="1640" name="savechannel" /></scope><scope doc="&#xA;Sort a list of arrays of array(downloaded packagefilename) by dependency.&#xA;It also removes duplicate dependencies&#xA;&lt;array&gt; an  - array of PEAR_PackageFile_v[1/2] objects&#xA;Returns array|pear_error  - array of array(packagefilename, package.xml contents)&#xA;" ilk="function" line="1755" lineend="1762" name="sortPackagesForUninstall" returns="array" signature="array sortPackagesForUninstall(&amp; $packages)"><variable ilk="argument" line="1755" name="packages" /></scope><variable citdl="PEAR_DependencyDB.singleton()" line="1757" name="_dependencyDB" /><scope ilk="function" line="1764" lineend="1783" name="_sortUninstall" returns="int" signature="_sortUninstall($a, $b)"><variable ilk="argument" line="1764" name="a" /><variable ilk="argument" line="1764" name="b" /></scope><scope doc="&#xA;}}}&#xA;{{{ _sortDirs()&#xA;" ilk="function" line="1787" lineend="1792" name="_sortDirs" returns="int" signature="_sortDirs($a, $b)"><variable ilk="argument" line="1787" name="a" /><variable ilk="argument" line="1787" name="b" /></scope><scope doc="&#xA;{{{ _buildCallback()&#xA;" ilk="function" line="1798" lineend="1804" name="_buildCallback" signature="_buildCallback($what, $data)"><variable ilk="argument" line="1798" name="what" /><variable ilk="argument" line="1798" name="data" /></scope></scope></scope>