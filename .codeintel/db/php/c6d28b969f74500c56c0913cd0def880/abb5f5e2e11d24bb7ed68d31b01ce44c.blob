<scope ilk="blob" lang="PHP" name="Tar.php" src="/usr/share/pear/Archive/Tar.php"><import line="45" module="PEAR.php" /><variable citdl="int" ilk="constant" line="48" name="ARCHIVE_TAR_ATT_SEPARATOR" /><variable citdl="pack()" ilk="constant" line="49" name="ARCHIVE_TAR_END_BLOCK" /><scope ilk="function" line="52" lineend="55" name="gzopen" returns="gzopen64()" signature="gzopen($filename, $mode, $use_include_path = 0)"><variable ilk="argument" line="52" name="filename" /><variable ilk="argument" line="52" name="mode" /><variable default="0" ilk="argument" line="52" name="use_include_path" /></scope><scope ilk="function" line="59" lineend="62" name="gztell" returns="gztell64()" signature="gztell($zp)"><variable ilk="argument" line="59" name="zp" /></scope><scope ilk="function" line="66" lineend="69" name="gzseek" returns="gzseek64()" signature="gzseek($zp, $offset, $whence = SEEK_SET)"><variable ilk="argument" line="66" name="zp" /><variable ilk="argument" line="66" name="offset" /><variable default="SEEK_SET" ilk="argument" line="66" name="whence" /></scope><scope classrefs="PEAR" doc="Creates a (compressed) Tar archive&#xA;&#xA;@package Archive_Tar&#xA;@author  Vincent Blavet &lt;vincent@phpconcept.net&gt;&#xA;@license http://www.opensource.org/licenses/bsd-license.php New BSD License&#xA;@version $Revision$" ilk="class" line="80" lineend="2530" name="Archive_Tar"><variable attributes="public" citdl="string" doc="@var string Name of the Tar" line="85" name="_tarname" /><variable attributes="public" citdl="boolean" doc="@var boolean if true, the Tar file will be gzipped" line="90" name="_compress" /><variable attributes="public" citdl="string" doc="@var string Type of compression : &apos;none&apos;, &apos;gz&apos;, &apos;bz2&apos; or &apos;lzma2&apos;" line="95" name="_compress_type" /><variable attributes="public" citdl="string" doc="@var string Explode separator" line="100" name="_separator" /><variable attributes="public" citdl="file" doc="@var file descriptor" line="105" name="_file" /><variable attributes="public" citdl="string" doc="@var string Local Tar name of a remote Tar (http:// or ftp://)" line="110" name="_temp_tarname" /><variable attributes="public" citdl="string" doc="@var string regular expression for ignoring files or directories" line="115" name="_ignore_regexp" /><variable attributes="public" citdl="this.raiseError()" doc="@var object PEAR_Error object" line="120" name="error_object" /><variable attributes="public" citdl="string" doc="Format for data extraction&#xA;&#xA;@var string" line="127" name="_fmt" /><variable attributes="protected" citdl="int" doc="@var int Length of the read buffer in bytes" line="132" name="buffer_length" /><scope attributes="public __ctor__" doc="&#xA;Archive_Tar Class constructor. This flavour of the constructor only&#xA;declare a new Archive_Tar object, identifying it by the name of the&#xA;tar file.&#xA;If the compress argument is set the tar will be read or created as a&#xA;gzip or bz2 compressed TAR file.&#xA;&lt;string&gt; $p_tarname  - The name of the tar archive to create&#xA;&lt;string&gt; $p_compress  - can be null, &apos;gz&apos;, &apos;bz2&apos; or &apos;lzma2&apos;. This&#xA;              parameter indicates if gzip, bz2 or lzma2 compression&#xA;              is required.  For compatibility reason the&#xA;              boolean value &apos;true&apos; means &apos;gz&apos;.&#xA;&lt;int&gt; $buffer_length  - Length of the read buffer in bytes&#xA;Returns bool &#xA;" ilk="function" line="150" lineend="254" name="__construct" returns="bool" signature="bool __construct(string $p_tarname, string $p_compress = null, int $buffer_length = 512)"><variable citdl="string" ilk="argument" line="150" name="p_tarname" /><variable citdl="string" default="null" ilk="argument" line="150" name="p_compress" /><variable citdl="int" default="512" ilk="argument" line="150" name="buffer_length" /><variable citdl="fread()" line="160" name="data" /><variable citdl="string" line="217" name="extname" /></scope><scope attributes="public" ilk="function" line="256" lineend="263" name="__destruct" signature="__destruct()" /><scope attributes="public" doc="&#xA;This method creates the archive file and add the files / directories&#xA;that are listed in $p_filelist.&#xA;If a file with the same name exist and is writable, it is replaced&#xA;by the new tar.&#xA;The method return false and a PEAR error text.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;For each directory added in the archive, the files and&#xA;sub-directories are also added.&#xA;See also createModify() method for more details.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory names, or a&#xA;             single string with names separated by a single&#xA;             blank space.&#xA;Returns true  - on success, false on error.&#xA;See    createModify()&#xA;" ilk="function" line="286" lineend="289" name="create" returns="true" signature="true create(array $p_filelist)"><variable citdl="array" ilk="argument" line="286" name="p_filelist" /></scope><scope attributes="public" doc="&#xA;This method add the files / directories that are listed in $p_filelist in&#xA;the archive. If the archive does not exist it is created.&#xA;The method return false and a PEAR error text.&#xA;The files and directories listed are only added at the end of the archive,&#xA;even if a file with the same name is already archived.&#xA;See also createModify() method for more details.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory names, or a&#xA;             single string with names separated by a single&#xA;             blank space.&#xA;Returns true  - on success, false on error.&#xA;See    createModify()&#xA;Access public&#xA;" ilk="function" line="307" lineend="310" name="add" returns="true" signature="true add(array $p_filelist)"><variable citdl="array" ilk="argument" line="307" name="p_filelist" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_path  - &#xA;&lt;bool&gt; $p_preserve  - &#xA;&lt;bool&gt; $p_symlinks  - &#xA;Returns bool &#xA;" ilk="function" line="318" lineend="321" name="extract" returns="bool" signature="bool extract(string $p_path = &apos;&apos;, bool $p_preserve = false, bool $p_symlinks = true)"><variable citdl="string" default="&apos;&apos;" ilk="argument" line="318" name="p_path" /><variable citdl="bool" default="false" ilk="argument" line="318" name="p_preserve" /><variable citdl="bool" default="true" ilk="argument" line="318" name="p_symlinks" /></scope><scope attributes="public" doc="&#xA;Returns array|int &#xA;" ilk="function" line="326" lineend="339" name="listContent" returns="array" signature="array listContent()"><variable citdl="array()" line="328" name="v_list_detail" /></scope><scope attributes="public" doc="&#xA;This method creates the archive file and add the files / directories&#xA;that are listed in $p_filelist.&#xA;If the file already exists and is writable, it is replaced by the&#xA;new tar. It is a create and not an add. If the file exists and is&#xA;read-only or is a directory it is not replaced. The method return&#xA;false and a PEAR error text.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;The path indicated in $p_remove_dir will be removed from the&#xA;memorized path of each file / directory listed when this path&#xA;exists. By default nothing is removed (empty path &apos;&apos;)&#xA;The path indicated in $p_add_dir will be added at the beginning of&#xA;the memorized path of each file / directory listed. However it can&#xA;be set to empty &apos;&apos;. The adding of a path is done after the removing&#xA;of path.&#xA;The path add/remove ability enables the user to prepare an archive&#xA;for extraction in a different path than the origin files are.&#xA;See also addModify() method for file adding properties.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory names,&#xA;                            or a single string with names separated by&#xA;                            a single blank space.&#xA;&lt;string&gt; $p_add_dir  - A string which contains a path to be added&#xA;                            to the memorized path of each element in&#xA;                            the list.&#xA;&lt;string&gt; $p_remove_dir  - A string which contains a path to be&#xA;                            removed from the memorized path of each&#xA;                            element in the list, when relevant.&#xA;Returns boolean  - true on success, false on error.&#xA;See addModify()&#xA;" ilk="function" line="376" lineend="406" name="createModify" returns="boolean" signature="boolean createModify(array $p_filelist, string $p_add_dir, string $p_remove_dir = &apos;&apos;)"><variable citdl="array" ilk="argument" line="376" name="p_filelist" /><variable citdl="string" ilk="argument" line="376" name="p_add_dir" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="376" name="p_remove_dir" /><variable citdl="boolean" line="378" name="v_result" /><variable citdl="p_filelist" line="386" name="v_list" /></scope><scope attributes="public" doc="&#xA;This method add the files / directories listed in $p_filelist at the&#xA;end of the existing archive. If the archive does not yet exists it&#xA;is created.&#xA;The $p_filelist parameter can be an array of string, each string&#xA;representing a filename or a directory name with their path if&#xA;needed. It can also be a single string with names separated by a&#xA;single blank.&#xA;The path indicated in $p_remove_dir will be removed from the&#xA;memorized path of each file / directory listed when this path&#xA;exists. By default nothing is removed (empty path &apos;&apos;)&#xA;The path indicated in $p_add_dir will be added at the beginning of&#xA;the memorized path of each file / directory listed. However it can&#xA;be set to empty &apos;&apos;. The adding of a path is done after the removing&#xA;of path.&#xA;The path add/remove ability enables the user to prepare an archive&#xA;for extraction in a different path than the origin files are.&#xA;If a file/dir is already in the archive it will only be added at the&#xA;end of the archive. There is no update of the existing archived&#xA;file/dir. However while extracting the archive, the last file will&#xA;replace the first one. This results in a none optimization of the&#xA;archive size.&#xA;If a file/dir does not exist the file/dir is ignored. However an&#xA;error text is send to PEAR error.&#xA;If a file/dir is not readable the file/dir is ignored. However an&#xA;error text is send to PEAR error.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory&#xA;                            names, or a single string with names&#xA;                            separated by a single blank space.&#xA;&lt;string&gt; $p_add_dir  - A string which contains a path to be&#xA;                            added to the memorized path of each&#xA;                            element in the list.&#xA;&lt;string&gt; $p_remove_dir  - A string which contains a path to be&#xA;                            removed from the memorized path of&#xA;                            each element in the list, when&#xA;                            relevant.&#xA;Returns true  - on success, false on error.&#xA;" ilk="function" line="448" lineend="472" name="addModify" returns="true" signature="true addModify(array $p_filelist, string $p_add_dir, string $p_remove_dir = &apos;&apos;)"><variable citdl="array" ilk="argument" line="448" name="p_filelist" /><variable citdl="string" ilk="argument" line="448" name="p_add_dir" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="448" name="p_remove_dir" /><variable citdl="boolean" line="450" name="v_result" /><variable citdl="p_filelist" line="460" name="v_list" /></scope><scope attributes="public" doc="&#xA;This method add a single string as a file at the&#xA;end of the existing archive. If the archive does not yet exists it&#xA;is created.&#xA;&lt;string&gt; $p_filename  - A string which contains the full&#xA;                          filename path that will be associated&#xA;                          with the string.&#xA;&lt;string&gt; $p_string  - The content of the file added in&#xA;                          the archive.&#xA;&lt;bool|int&gt; $p_datetime  - A custom date/time (unix timestamp)&#xA;                          for the file (optional).&#xA;&lt;array&gt; $p_params  - An array of optional params:&#xA;                              stamp =&gt; the datetime (replaces&#xA;                                  datetime above if it exists)&#xA;                              mode =&gt; the permissions on the&#xA;                                  file (600 by default)&#xA;                              type =&gt; is this a link?  See the&#xA;                                  tar specification for details.&#xA;                                  (default = regular file)&#xA;                              uid =&gt; the user ID of the file&#xA;                                  (default = 0 = root)&#xA;                              gid =&gt; the group ID of the file&#xA;                                  (default = 0 = root)&#xA;Returns true  - on success, false on error.&#xA;" ilk="function" line="501" lineend="529" name="addString" returns="true" signature="true addString(string $p_filename, string $p_string, $p_datetime = false, array $p_params = array())"><variable citdl="string" ilk="argument" line="501" name="p_filename" /><variable citdl="string" ilk="argument" line="501" name="p_string" /><variable default="false" ilk="argument" line="501" name="p_datetime" /><variable citdl="array" default="array()" ilk="argument" line="501" name="p_params" /><variable line="506" name="p_uid" /><variable line="507" name="p_gid" /><variable line="505" name="p_type" /><variable citdl="boolean" line="508" name="v_result" /><variable line="503" name="p_stamp" /><variable line="504" name="p_mode" /></scope><scope attributes="public" doc="&#xA;This method extract all the content of the archive in the directory&#xA;indicated by $p_path. When relevant the memorized path of the&#xA;files/dir can be modified by removing the $p_remove_path path at the&#xA;beginning of the file/dir path.&#xA;While extracting a file, if the directory path does not exists it is&#xA;created.&#xA;While extracting a file, if the file already exists it is replaced&#xA;without looking for last modification date.&#xA;While extracting a file, if the file already exists and is write&#xA;protected, the extraction is aborted.&#xA;While extracting a file, if a directory with the same name already&#xA;exists, the extraction is aborted.&#xA;While extracting a directory, if a file with the same name already&#xA;exists, the extraction is aborted.&#xA;While extracting a file/directory if the destination directory exist&#xA;and is write protected, or does not exist but can not be created,&#xA;the extraction is aborted.&#xA;If after extraction an extracted file does not show the correct&#xA;stored file size, the extraction is aborted.&#xA;When the extraction is aborted, a PEAR error text is set and false&#xA;is returned. However the result can be a partial extraction that may&#xA;need to be manually cleaned.&#xA;&lt;string&gt; $p_path  - The path of the directory where the&#xA;                              files/dir need to by extracted.&#xA;&lt;string&gt; $p_remove_path  - Part of the memorized path that can be&#xA;                              removed if present at the beginning of&#xA;                              the file/dir path.&#xA;&lt;boolean&gt; $p_preserve  - Preserve user/group ownership of files&#xA;&lt;boolean&gt; $p_symlinks  - Allow symlinks.&#xA;Returns boolean  - true on success, false on error.&#xA;See    extractList()&#xA;" ilk="function" line="566" lineend="585" name="extractModify" returns="boolean" signature="boolean extractModify(string $p_path, string $p_remove_path, boolean $p_preserve = false, boolean $p_symlinks = true)"><variable citdl="string" ilk="argument" line="566" name="p_path" /><variable citdl="string" ilk="argument" line="566" name="p_remove_path" /><variable citdl="boolean" default="false" ilk="argument" line="566" name="p_preserve" /><variable citdl="boolean" default="true" ilk="argument" line="566" name="p_symlinks" /><variable citdl="boolean" line="568" name="v_result" /><variable citdl="array()" line="569" name="v_list_detail" /></scope><scope attributes="public" doc="&#xA;This method extract from the archive one file identified by $p_filename.&#xA;The return value is a string with the file content, or NULL on error.&#xA;&lt;string&gt; $p_filename  - The path of the file to extract in a string.&#xA;Returns a  - string with the file content or NULL.&#xA;" ilk="function" line="595" lineend="605" name="extractInString" returns="a" signature="a extractInString(string $p_filename)"><variable citdl="string" ilk="argument" line="595" name="p_filename" /><variable citdl="this._extractInString()" line="598" name="v_result" /></scope><scope attributes="public" doc="&#xA;This method extract from the archive only the files indicated in the&#xA;$p_filelist. These files are extracted in the current directory or&#xA;in the directory indicated by the optional $p_path parameter.&#xA;If indicated the $p_remove_path can be used in the same way as it is&#xA;used in extractModify() method.&#xA;&lt;array&gt; $p_filelist  - An array of filenames and directory names,&#xA;                              or a single string with names separated&#xA;                              by a single blank space.&#xA;&lt;string&gt; $p_path  - The path of the directory where the&#xA;                              files/dir need to by extracted.&#xA;&lt;string&gt; $p_remove_path  - Part of the memorized path that can be&#xA;                              removed if present at the beginning of&#xA;                              the file/dir path.&#xA;&lt;boolean&gt; $p_preserve  - Preserve user/group ownership of files&#xA;&lt;boolean&gt; $p_symlinks  - Allow symlinks.&#xA;Returns true  - on success, false on error.&#xA;See    extractModify()&#xA;" ilk="function" line="628" lineend="656" name="extractList" returns="true" signature="true extractList(array $p_filelist, string $p_path = &apos;&apos;, string $p_remove_path = &apos;&apos;, boolean $p_preserve = false, boolean $p_symlinks = true)"><variable citdl="array" ilk="argument" line="628" name="p_filelist" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="628" name="p_path" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="628" name="p_remove_path" /><variable citdl="boolean" default="false" ilk="argument" line="628" name="p_preserve" /><variable citdl="boolean" default="true" ilk="argument" line="628" name="p_symlinks" /><variable citdl="boolean" line="630" name="v_result" /><variable citdl="p_filelist" line="634" name="v_list" /><variable citdl="array()" line="631" name="v_list_detail" /></scope><scope attributes="public" doc="&#xA;This method set specific attributes of the archive. It uses a variable&#xA;list of parameters, in the format attribute code + attribute values :&#xA;$arch-&gt;setAttribute(ARCHIVE_TAR_ATT_SEPARATOR, &apos;,&apos;);&#xA;Returns true  - on success, false on error.&#xA;" ilk="function" line="665" lineend="709" name="setAttribute" returns="true" signature="true setAttribute()"><variable citdl="int" line="678" name="i" /><variable citdl="boolean" line="667" name="v_result" /><variable attributes="__not_yet_defined__" line="679" name="v_size" /><variable citdl="func_get_args()" line="675" name="v_att_list" /></scope><scope attributes="public" doc="&#xA;This method sets the regular expression for ignoring files and directories&#xA;at import, for example:&#xA;$arch-&gt;setIgnoreRegexp(&quot;#CVS|\.svn#&quot;);&#xA;&lt;string&gt; $regexp  - regular expression defining which files or directories to ignore&#xA;" ilk="function" line="718" lineend="721" name="setIgnoreRegexp" signature="setIgnoreRegexp(string $regexp)"><variable citdl="string" ilk="argument" line="718" name="regexp" /></scope><scope attributes="public" doc="&#xA;This method sets the regular expression for ignoring all files and directories&#xA;matching the filenames in the array list at import, for example:&#xA;$arch-&gt;setIgnoreList(array(&apos;CVS&apos;, &apos;.svn&apos;, &apos;bin/tool&apos;));&#xA;&lt;array&gt; $list  - a list of file or directory names to ignore&#xA;Access public&#xA;" ilk="function" line="732" lineend="737" name="setIgnoreList" signature="setIgnoreList(array $list)"><variable citdl="array" ilk="argument" line="732" name="list" /><variable citdl="string" line="735" name="regexp" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_message  - &#xA;" ilk="function" line="742" lineend="745" name="_error" signature="_error(string $p_message)"><variable citdl="string" ilk="argument" line="742" name="p_message" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_message  - &#xA;" ilk="function" line="750" lineend="753" name="_warning" signature="_warning(string $p_message)"><variable citdl="string" ilk="argument" line="750" name="p_message" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_filename  - &#xA;Returns bool &#xA;" ilk="function" line="759" lineend="766" name="_isArchive" returns="bool" signature="bool _isArchive(string $p_filename = null)"><variable citdl="string" default="null" ilk="argument" line="759" name="p_filename" /></scope><scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="771" lineend="804" name="_openWrite" returns="bool" signature="bool _openWrite()" /><scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="809" lineend="875" name="_openRead" returns="bool" signature="bool _openRead()"><variable attributes="__not_yet_defined__" line="832" name="v_file_from" /><variable line="832" name="v_data" /><variable citdl="this._temp_tarname" line="840" name="v_filename" /></scope><scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="880" lineend="921" name="_openReadWrite" returns="bool" signature="bool _openReadWrite()" /><scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="926" lineend="962" name="_close" returns="bool" signature="bool _close()" /><scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="967" lineend="983" name="_cleanFile" returns="bool" signature="bool _cleanFile()" /><scope attributes="public" doc="&#xA;&lt;mixed&gt; $p_binary_data  - &#xA;&lt;integer&gt; $p_len  - &#xA;Returns bool &#xA;" ilk="function" line="990" lineend="1038" name="_writeBlock" returns="bool" signature="bool _writeBlock(mixed $p_binary_data, integer $p_len = null)"><variable citdl="mixed" ilk="argument" line="990" name="p_binary_data" /><variable citdl="integer" default="null" ilk="argument" line="990" name="p_len" /></scope><scope attributes="public" doc="&#xA;Returns null|string &#xA;" ilk="function" line="1043" lineend="1069" name="_readBlock" returns="null" signature="null _readBlock()"><variable line="1045" name="v_block" /></scope><scope attributes="public" doc="&#xA;&lt;null&gt; $p_len  - &#xA;Returns bool &#xA;" ilk="function" line="1075" lineend="1110" name="_jumpBlock" returns="bool" signature="bool _jumpBlock(null $p_len = null)"><variable citdl="null" default="null" ilk="argument" line="1075" name="p_len" /><variable line="1087" name="i" /></scope><scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="1115" lineend="1123" name="_writeFooter" returns="bool" signature="bool _writeFooter()"><variable citdl="pack()" line="1119" name="v_binary_data" /></scope><scope attributes="public" doc="&#xA;&lt;array&gt; $p_list  - &#xA;&lt;string&gt; $p_add_dir  - &#xA;&lt;string&gt; $p_remove_dir  - &#xA;Returns bool &#xA;" ilk="function" line="1131" lineend="1207" name="_addList" returns="bool" signature="bool _addList(array $p_list, string $p_add_dir, string $p_remove_dir)"><variable citdl="array" ilk="argument" line="1131" name="p_list" /><variable citdl="string" ilk="argument" line="1131" name="p_add_dir" /><variable citdl="string" ilk="argument" line="1131" name="p_remove_dir" /><variable attributes="__not_yet_defined__" line="1184" name="p_hdir" /><variable citdl="array()" line="1134" name="v_header" /><variable line="1184" name="p_hitem" /><variable citdl="boolean" line="1133" name="v_result" /><variable attributes="__not_yet_defined__" line="1200" name="p_temp_list" /><variable citdl="p_list[]" line="1149" name="v_filename" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_filename  - &#xA;&lt;mixed&gt; $p_header  - &#xA;&lt;string&gt; $p_add_dir  - &#xA;&lt;string&gt; $p_remove_dir  - &#xA;&lt;null&gt; $v_stored_filename  - &#xA;Returns bool &#xA;" ilk="function" line="1217" lineend="1294" name="_addFile" returns="bool" signature="bool _addFile(string $p_filename, mixed &amp; $p_header, string $p_add_dir, string $p_remove_dir, null $v_stored_filename = null)"><variable citdl="string" ilk="argument" line="1217" name="p_filename" /><variable citdl="mixed" ilk="argument" line="1217" name="p_header" /><variable citdl="string" ilk="argument" line="1217" name="p_add_dir" /><variable citdl="string" ilk="argument" line="1217" name="p_remove_dir" /><variable citdl="null" default="null" ilk="argument" line="1217" name="v_stored_filename" /><variable citdl="pack()" line="1281" name="v_binary_data" /><variable attributes="__not_yet_defined__" line="1273" name="v_file" /><variable citdl="strlen()" line="1274" name="buffer_length" /><variable citdl="sprintf()" line="1277" name="pack_format" /><variable line="1273" name="v_buffer" /><variable line="1276" name="pack_size" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_filename  - &#xA;&lt;string&gt; $p_string  - &#xA;&lt;bool&gt; $p_datetime  - &#xA;&lt;array&gt; $p_params  - &#xA;Returns bool &#xA;" ilk="function" line="1303" lineend="1348" name="_addString" returns="bool" signature="bool _addString(string $p_filename, string $p_string, bool $p_datetime = false, array $p_params = array())"><variable citdl="string" ilk="argument" line="1303" name="p_filename" /><variable citdl="string" ilk="argument" line="1303" name="p_string" /><variable citdl="bool" default="false" ilk="argument" line="1303" name="p_datetime" /><variable citdl="array" default="array()" ilk="argument" line="1303" name="p_params" /><variable citdl="pack()" line="1343" name="v_binary_data" /><variable line="1308" name="p_uid" /><variable line="1309" name="p_gid" /><variable citdl="int" line="1341" name="i" /><variable line="1307" name="p_type" /><variable line="1305" name="p_stamp" /><variable line="1342" name="v_buffer" /><variable line="1306" name="p_mode" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_filename  - &#xA;&lt;string&gt; $p_stored_filename  - &#xA;Returns bool &#xA;" ilk="function" line="1355" lineend="1470" name="_writeHeader" returns="bool" signature="bool _writeHeader(string $p_filename, string $p_stored_filename)"><variable citdl="string" ilk="argument" line="1355" name="p_filename" /><variable citdl="string" ilk="argument" line="1355" name="p_stored_filename" /><variable citdl="pack()" line="1463" name="v_binary_data" /><variable citdl="posix_getgrgid()" line="1405" name="groupinfo" /><variable citdl="lstat()" line="1380" name="v_info" /><variable citdl="sprintf()" line="1384" name="v_mtime" /><variable citdl="string" line="1400" name="v_uname" /><variable citdl="string" line="1399" name="v_version" /><variable citdl="sprintf()" line="1388" name="v_size" /><variable citdl="string" line="1417" name="v_devminor" /><variable citdl="int" line="1444" name="v_checksum" /><variable citdl="sprintf()" line="1382" name="v_gid" /><variable citdl="string" line="1418" name="v_prefix" /><variable citdl="posix_getpwuid()" line="1404" name="userinfo" /><variable citdl="string" line="1387" name="v_typeflag" /><variable citdl="string" line="1398" name="v_magic" /><variable citdl="string" line="1416" name="v_devmajor" /><variable citdl="sprintf()" line="1383" name="v_perms" /><variable citdl="string" line="1369" name="v_linkname" /><variable citdl="pack()" line="1428" name="v_binary_data_first" /><variable line="1446" name="i" /><variable line="1454" name="j" /><variable citdl="sprintf()" line="1381" name="v_uid" /><variable citdl="string" line="1401" name="v_gname" /><variable citdl="pack()" line="1441" name="v_binary_data_last" /><variable citdl="this._pathReduction()" line="1361" name="v_reduced_filename" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_filename  - &#xA;&lt;int&gt; $p_size  - &#xA;&lt;int&gt; $p_mtime  - &#xA;&lt;int&gt; $p_perms  - &#xA;&lt;string&gt; $p_type  - &#xA;&lt;int&gt; $p_uid  - &#xA;&lt;int&gt; $p_gid  - &#xA;Returns bool &#xA;" ilk="function" line="1482" lineend="1590" name="_writeHeaderBlock" returns="bool" signature="bool _writeHeaderBlock(string $p_filename, int $p_size, int $p_mtime = 0, int $p_perms = 0, string $p_type = &apos;&apos;, int $p_uid = 0, int $p_gid = 0)"><variable citdl="string" ilk="argument" line="1482" name="p_filename" /><variable citdl="int" ilk="argument" line="1482" name="p_size" /><variable citdl="int" default="0" ilk="argument" line="1482" name="p_mtime" /><variable citdl="int" default="0" ilk="argument" line="1482" name="p_perms" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="1482" name="p_type" /><variable citdl="int" default="0" ilk="argument" line="1482" name="p_uid" /><variable citdl="int" default="0" ilk="argument" line="1482" name="p_gid" /><variable citdl="pack()" line="1583" name="v_binary_data" /><variable citdl="string" line="1514" name="v_magic" /><variable line="1574" name="j" /><variable citdl="posix_getgrgid()" line="1520" name="groupinfo" /><variable citdl="pack()" line="1561" name="v_binary_data_last" /><variable citdl="string" line="1516" name="v_version" /><variable citdl="pack()" line="1548" name="v_binary_data_first" /><variable line="1566" name="i" /><variable citdl="sprintf()" line="1507" name="v_gid" /><variable citdl="string" line="1534" name="v_devmajor" /><variable citdl="sprintf()" line="1506" name="v_uid" /><variable citdl="int" line="1564" name="v_checksum" /><variable citdl="string" line="1523" name="v_uname" /><variable citdl="string" line="1538" name="v_prefix" /><variable citdl="sprintf()" line="1508" name="v_perms" /><variable citdl="string" line="1524" name="v_gname" /><variable citdl="string" line="1512" name="v_linkname" /><variable citdl="string" line="1536" name="v_devminor" /><variable citdl="sprintf()" line="1501" name="v_size" /><variable citdl="sprintf()" line="1510" name="v_mtime" /><variable citdl="posix_getpwuid()" line="1519" name="userinfo" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_filename  - &#xA;Returns bool &#xA;" ilk="function" line="1596" lineend="1670" name="_writeLongHeader" returns="bool" signature="bool _writeLongHeader(string $p_filename, $is_link = false)"><variable citdl="string" ilk="argument" line="1596" name="p_filename" /><variable default="false" ilk="argument" line="1596" name="is_link" /><variable citdl="pack()" line="1656" name="v_binary_data" /><variable line="1603" name="v_typeflag" /><variable line="1647" name="j" /><variable citdl="pack()" line="1634" name="v_binary_data_last" /><variable citdl="string" line="1606" name="v_version" /><variable citdl="string" line="1605" name="v_magic" /><variable citdl="int" line="1639" name="i" /><variable citdl="sprintf()" line="1599" name="v_gid" /><variable citdl="string" line="1609" name="v_devmajor" /><variable citdl="sprintf()" line="1598" name="v_uid" /><variable citdl="int" line="1637" name="v_checksum" /><variable citdl="string" line="1607" name="v_uname" /><variable citdl="string" line="1611" name="v_prefix" /><variable citdl="pack()" line="1621" name="v_binary_data_first" /><variable citdl="sprintf()" line="1600" name="v_perms" /><variable citdl="string" line="1608" name="v_gname" /><variable line="1664" name="v_buffer" /><variable citdl="string" line="1604" name="v_linkname" /><variable citdl="sprintf()" line="1601" name="v_size" /><variable citdl="sprintf()" line="1602" name="v_mtime" /><variable citdl="string" line="1610" name="v_devminor" /></scope><scope attributes="public" doc="&#xA;&lt;mixed&gt; $v_binary_data  - &#xA;&lt;mixed&gt; $v_header  - &#xA;Returns bool &#xA;" ilk="function" line="1677" lineend="1764" name="_readHeader" returns="bool" signature="bool _readHeader(mixed $v_binary_data, mixed &amp; $v_header)"><variable citdl="mixed" ilk="argument" line="1677" name="v_binary_data" /><variable citdl="mixed" ilk="argument" line="1677" name="v_header" /><variable citdl="str_split()" line="1696" name="v_binary_split" /><variable citdl="unpack()" line="1702" name="v_data" /><variable citdl="trim()" line="1709" name="v_data_checksum" /><variable citdl="int" line="1694" name="v_checksum" /></scope><scope attributes="private" doc="&#xA;Convert Tar record size to actual size&#xA;&lt;string&gt; $tar_size  - &#xA;Returns size  - of tar record in bytes&#xA;" ilk="function" line="1772" lineend="1798" name="_tarRecToSize" returns="size" signature="size _tarRecToSize(string $tar_size)"><variable citdl="string" ilk="argument" line="1772" name="tar_size" /><variable citdl="tar_size" line="1784" name="rec_str" /><variable citdl="ord()" line="1781" name="ch" /><variable line="1789" name="num_ch" /><variable line="1786" name="size" /></scope><scope attributes="private" doc="&#xA;Detect and report a malicious file name&#xA;&lt;string&gt; $file  - &#xA;Returns bool &#xA;" ilk="function" line="1807" lineend="1816" name="_isMaliciousFilename" returns="bool" signature="bool _isMaliciousFilename(string $file)"><variable citdl="string" ilk="argument" line="1807" name="file" /></scope><scope attributes="public" doc="@param $v_header&#xA;@return bool" ilk="function" line="1822" lineend="1854" name="_readLongHeader" returns="bool" signature="bool _readLongHeader(&amp; $v_header)"><variable ilk="argument" line="1822" name="v_header" /><variable citdl="this._readBlock()" line="1837" name="v_binary_data" /><variable citdl="v_header" line="1825" name="v_filesize" /><variable line="1827" name="i" /><variable citdl="floor()" line="1826" name="n" /><variable citdl="this._readBlock()" line="1828" name="v_content" /><variable citdl="string" line="1824" name="v_filename" /></scope><scope attributes="private" doc="&#xA;This method extract from the archive one file identified by $p_filename.&#xA;The return value is a string with the file content, or null on error.&#xA;&lt;string&gt; $p_filename  - The path of the file to extract in a string.&#xA;Returns a  - string with the file content or null.&#xA;" ilk="function" line="1864" lineend="1925" name="_extractInString" returns="a" signature="a _extractInString(string $p_filename)"><variable citdl="string" ilk="argument" line="1864" name="p_filename" /><variable line="1868" name="v_binary_data" /><variable citdl="string" line="1866" name="v_result_str" /><variable line="1906" name="i" /><variable citdl="floor()" line="1905" name="n" /><variable attributes="__not_yet_defined__" line="1877" name="v_header" /><variable citdl="this._readBlock()" line="1910" name="v_content" /><variable citdl="v_header" line="1888" name="v_link_header" /></scope><scope attributes="public" doc="&#xA;&lt;string&gt; $p_path  - &#xA;&lt;string&gt; $p_list_detail  - &#xA;&lt;string&gt; $p_mode  - &#xA;&lt;string&gt; $p_file_list  - &#xA;&lt;string&gt; $p_remove_path  - &#xA;&lt;bool&gt; $p_preserve  - &#xA;&lt;bool&gt; $p_symlinks  - &#xA;Returns bool &#xA;" ilk="function" line="1937" lineend="2267" name="_extractList" returns="bool" signature="bool _extractList(string $p_path, string &amp; $p_list_detail, string $p_mode, string $p_file_list, string $p_remove_path, bool $p_preserve = false, bool $p_symlinks = true)"><variable citdl="string" ilk="argument" line="1937" name="p_path" /><variable citdl="string" ilk="argument" line="1937" name="p_list_detail" /><variable citdl="string" ilk="argument" line="1937" name="p_mode" /><variable citdl="string" ilk="argument" line="1937" name="p_file_list" /><variable citdl="string" ilk="argument" line="1937" name="p_remove_path" /><variable citdl="bool" default="false" ilk="argument" line="1937" name="p_preserve" /><variable citdl="bool" default="true" ilk="argument" line="1937" name="p_symlinks" /><variable line="1986" name="v_binary_data" /><variable citdl="this._readBlock()" line="2188" name="v_content" /><variable citdl="string" line="2253" name="v_file_dir" /><variable line="2028" name="i" /><variable citdl="filesize()" line="2222" name="filesize" /><variable attributes="__not_yet_defined__" line="1998" name="v_header" /><variable citdl="int" line="1948" name="v_nb" /><variable citdl="boolean" line="2134" name="absolute_link" /><variable citdl="str_replace()" line="2141" name="s_linkname" /><variable citdl="boolean" line="1947" name="v_result" /><variable citdl="boolean" line="1987" name="v_extract_file" /><variable citdl="explode()[]" line="2142" name="dir" /><variable citdl="boolean" line="1949" name="v_extract_all" /><variable citdl="strlen()" line="1964" name="p_remove_path_size" /><variable citdl="int" line="1988" name="v_extraction_stopped" /><variable citdl="floor()" line="2186" name="n" /><variable citdl="boolean" line="1950" name="v_listing" /><variable citdl="preg_replace()" line="2140" name="s_filename" /><variable citdl="int" line="2135" name="link_depth" /><variable citdl="v_header" line="2009" name="v_link_header" /><variable citdl="fileperms()" line="2207" name="mode" /></scope><scope attributes="public" doc="&#xA;Returns bool &#xA;" ilk="function" line="2272" lineend="2404" name="_openAppend" returns="bool" signature="bool _openAppend()"><variable citdl="pack()" line="2329" name="v_binary_data" /><variable citdl="int" line="2314" name="end_blocks" /><variable line="2324" name="i" /><variable line="2317" name="v_buffer" /><variable line="2291" name="v_temp_tar" /><variable citdl="filesize()" line="2390" name="v_size" /></scope><scope attributes="public" doc="@param $p_filelist&#xA;@param string $p_add_dir&#xA;@param string $p_remove_dir&#xA;@return bool" ilk="function" line="2412" lineend="2425" name="_append" returns="bool" signature="bool _append($p_filelist, string $p_add_dir = &apos;&apos;, string $p_remove_dir = &apos;&apos;)"><variable ilk="argument" line="2412" name="p_filelist" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="2412" name="p_add_dir" /><variable citdl="string" default="&apos;&apos;" ilk="argument" line="2412" name="p_remove_dir" /></scope><scope attributes="public" doc="&#xA;Check if a directory exists and create it (including parent&#xA;dirs) if not.&#xA;&lt;string&gt; $p_dir  - directory to check&#xA;Returns bool  - true if the directory exists or was created&#xA;" ilk="function" line="2435" lineend="2457" name="_dirCheck" returns="bool" signature="bool _dirCheck(string $p_dir)"><variable citdl="string" ilk="argument" line="2435" name="p_dir" /><variable citdl="dirname()" line="2442" name="p_parent_dir" /></scope><scope attributes="private" doc="&#xA;Compress path by changing for example &quot;/dir/foo/../bar&quot; to &quot;/dir/bar&quot;,&#xA;rand emove double slashes.&#xA;&lt;string&gt; $p_dir  - path to reduce&#xA;Returns string  - reduced path&#xA;" ilk="function" line="2467" lineend="2507" name="_pathReduction" returns="string" signature="string _pathReduction(string $p_dir)"><variable citdl="string" ilk="argument" line="2467" name="p_dir" /><variable citdl="int" line="2477" name="i" /><variable citdl="string" line="2469" name="v_result" /><variable citdl="explode()" line="2474" name="v_list" /></scope><scope attributes="public" doc="@param $p_path&#xA;@param bool $p_remove_disk_letter&#xA;@return string" ilk="function" line="2514" lineend="2529" name="_translateWinPath" returns="string" signature="string _translateWinPath($p_path, bool $p_remove_disk_letter = true)"><variable ilk="argument" line="2514" name="p_path" /><variable citdl="bool" default="true" ilk="argument" line="2514" name="p_remove_disk_letter" /></scope></scope></scope>