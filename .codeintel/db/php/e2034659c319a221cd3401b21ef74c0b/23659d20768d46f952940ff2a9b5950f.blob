<scope ilk="blob" lang="PHP" name="Util.php" src="/usr/share/pear/XML/Util.php"><import line="959" module="PEAR.php" /><variable citdl="int" ilk="constant" line="50" name="XML_UTIL_ERROR_INVALID_CHARS" /><variable citdl="int" ilk="constant" line="55" name="XML_UTIL_ERROR_INVALID_START" /><variable citdl="int" ilk="constant" line="60" name="XML_UTIL_ERROR_NON_SCALAR_CONTENT" /><variable citdl="int" ilk="constant" line="65" name="XML_UTIL_ERROR_NO_TAG_NAME" /><variable citdl="int" ilk="constant" line="70" name="XML_UTIL_REPLACE_ENTITIES" /><variable citdl="int" ilk="constant" line="75" name="XML_UTIL_CDATA_SECTION" /><variable citdl="int" ilk="constant" line="80" name="XML_UTIL_ENTITIES_NONE" /><variable citdl="int" ilk="constant" line="86" name="XML_UTIL_ENTITIES_XML" /><variable citdl="int" ilk="constant" line="92" name="XML_UTIL_ENTITIES_XML_REQUIRED" /><variable citdl="int" ilk="constant" line="98" name="XML_UTIL_ENTITIES_HTML" /><variable citdl="int" ilk="constant" line="103" name="XML_UTIL_COLLAPSE_NONE" /><variable citdl="int" ilk="constant" line="108" name="XML_UTIL_COLLAPSE_ALL" /><variable citdl="int" ilk="constant" line="113" name="XML_UTIL_COLLAPSE_XHTML_ONLY" /><scope doc="Utility class for working with XML documents&#xA;&#xA;@category  XML&#xA;@package   XML_Util&#xA;@author    Stephan Schmidt &lt;schst@php.net&gt;&#xA;@copyright 2003-2008 Stephan Schmidt &lt;schst@php.net&gt;&#xA;@license   http://opensource.org/licenses/bsd-license New BSD License&#xA;@version   Release: 1.4.5&#xA;@link      http://pear.php.net/package/XML_Util" ilk="class" line="126" lineend="962" name="XML_Util"><scope attributes="public static" doc="&#xA;Return API version&#xA;Returns string  - $version API version&#xA;" ilk="function" line="133" lineend="136" name="apiVersion" returns="string" signature="string apiVersion()" /><scope attributes="public static" doc="&#xA;Replace XML entities&#xA;With the optional second parameter, you may select, which&#xA;entities should be replaced.&#xA;&lt;code&gt;&#xA;require_once 'XML/Util.php';&#xA;// replace XML entites:&#xA;$string = XML_Util::replaceEntities('This string contains &lt; &amp; &gt;.');&#xA;&lt;/code&gt;&#xA;With the optional third parameter, you may pass the character encoding&#xA;&lt;code&gt;&#xA;require_once 'XML/Util.php';&#xA;// replace XML entites in UTF-8:&#xA;$string = XML_Util::replaceEntities(&#xA;    'This string contains &lt; &amp; &gt; as well as &#228;, &#246;, &#223;, &#224; and &#234;',&#xA;    XML_UTIL_ENTITIES_HTML,&#xA;    'UTF-8'&#xA;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $string  - string where XML special chars&#xA;                               should be replaced&#xA;&lt;int&gt; $replaceEntities  - setting for entities in attribute values&#xA;                               (one of XML_UTIL_ENTITIES_XML,&#xA;                               XML_UTIL_ENTITIES_XML_REQUIRED,&#xA;                               XML_UTIL_ENTITIES_HTML)&#xA;&lt;string&gt; $encoding  - encoding value (if any)...&#xA;                               must be a valid encoding as determined&#xA;                               by the htmlentities() function&#xA;Returns string  - string with replaced chars&#xA;See    reverseEntities()&#xA;" ilk="function" line="176" lineend="207" name="replaceEntities" returns="string" signature="string replaceEntities(string $string, int $replaceEntities = XML_UTIL_ENTITIES_XML, string $encoding = &apos;ISO-8859-1&apos;)"><variable citdl="string" ilk="argument" line="176" name="string" /><variable citdl="int" default="XML_UTIL_ENTITIES_XML" ilk="argument" line="176" name="replaceEntities" /><variable citdl="string" default="&apos;ISO-8859-1&apos;" ilk="argument" line="176" name="encoding" /></scope><scope attributes="public static" doc="&#xA;Reverse XML entities&#xA;With the optional second parameter, you may select, which&#xA;entities should be reversed.&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// reverse XML entites:&#xA;$string = XML_Util::reverseEntities(&apos;This string contains &amp;lt; &amp;amp; &amp;gt;.&apos;);&#xA;&lt;/code&gt;&#xA;With the optional third parameter, you may pass the character encoding&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// reverse XML entites in UTF-8:&#xA;$string = XML_Util::reverseEntities(&#xA;    &apos;This string contains &amp;lt; &amp;amp; &amp;gt; as well as&apos;&#xA;    . &apos; &amp;auml;, &amp;ouml;, &amp;szlig;, &amp;agrave; and &amp;ecirc;&apos;,&#xA;    XML_UTIL_ENTITIES_HTML,&#xA;    &apos;UTF-8&apos;&#xA;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $string  - string where XML special chars&#xA;                               should be replaced&#xA;&lt;int&gt; $replaceEntities  - setting for entities in attribute values&#xA;                               (one of XML_UTIL_ENTITIES_XML,&#xA;                               XML_UTIL_ENTITIES_XML_REQUIRED,&#xA;                               XML_UTIL_ENTITIES_HTML)&#xA;&lt;string&gt; $encoding  - encoding value (if any)...&#xA;                               must be a valid encoding as determined&#xA;                               by the html_entity_decode() function&#xA;Returns string  - string with replaced chars&#xA;See    replaceEntities()&#xA;" ilk="function" line="248" lineend="279" name="reverseEntities" returns="string" signature="string reverseEntities(string $string, int $replaceEntities = XML_UTIL_ENTITIES_XML, string $encoding = &apos;ISO-8859-1&apos;)"><variable citdl="string" ilk="argument" line="248" name="string" /><variable citdl="int" default="XML_UTIL_ENTITIES_XML" ilk="argument" line="248" name="replaceEntities" /><variable citdl="string" default="&apos;ISO-8859-1&apos;" ilk="argument" line="248" name="encoding" /></scope><scope attributes="public static" doc="&#xA;Build an xml declaration&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// get an XML declaration:&#xA;$xmlDecl = XML_Util::getXMLDeclaration(&apos;1.0&apos;, &apos;UTF-8&apos;, true);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $version  - xml version&#xA;&lt;string&gt; $encoding  - character encoding&#xA;&lt;bool&gt; $standalone  - document is standalone (or not)&#xA;Returns string  - xml declaration&#xA;Uses   attributesToString() to serialize the attributes of the&#xA;        XML declaration&#xA;" ilk="function" line="299" lineend="318" name="getXMLDeclaration" returns="string" signature="string getXMLDeclaration(string $version = &apos;1.0&apos;, string $encoding = null, bool $standalone = null)"><variable citdl="string" default="&apos;1.0&apos;" ilk="argument" line="299" name="version" /><variable citdl="string" default="null" ilk="argument" line="299" name="encoding" /><variable citdl="bool" default="null" ilk="argument" line="299" name="standalone" /><variable citdl="array()" line="304" name="attributes" /></scope><scope attributes="public static" doc="&#xA;Build a document type declaration&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// get a doctype declaration:&#xA;$xmlDecl = XML_Util::getDocTypeDeclaration(&apos;rootTag&apos;,&apos;myDocType.dtd&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $root  - name of the root tag&#xA;&lt;string&gt; $uri  - uri of the doctype definition&#xA;                           (or array with uri and public id)&#xA;&lt;string&gt; $internalDtd  - internal dtd entries&#xA;Returns string  - doctype declaration&#xA;Since  0.2&#xA;" ilk="function" line="338" lineend="354" name="getDocTypeDeclaration" returns="string" signature="string getDocTypeDeclaration(string $root, string $uri = null, string $internalDtd = null)"><variable citdl="string" ilk="argument" line="338" name="root" /><variable citdl="string" default="null" ilk="argument" line="338" name="uri" /><variable citdl="string" default="null" ilk="argument" line="338" name="internalDtd" /><variable citdl="sprintf()" line="342" name="ref" /></scope><scope attributes="public static" doc="&#xA;Create string representation of an attribute list&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// build an attribute string&#xA;$att = array(&#xA;             &apos;foo&apos;   =&gt;  &apos;bar&apos;,&#xA;             &apos;argh&apos;  =&gt;  &apos;tomato&apos;&#xA;           );&#xA;$attList = XML_Util::attributesToString($att);&#xA;&lt;/code&gt;&#xA;&lt;array&gt; $attributes  - attribute array&#xA;&lt;bool|array&gt; $sort  - sort attribute list alphabetically,&#xA;                              may also be an assoc array containing&#xA;                              the keys &apos;sort&apos;, &apos;multiline&apos;, &apos;indent&apos;,&#xA;                              &apos;linebreak&apos; and &apos;entities&apos;&#xA;&lt;bool&gt; $multiline  - use linebreaks, if more than&#xA;                              one attribute is given&#xA;&lt;string&gt; $indent  - string used for indentation of&#xA;                              multiline attributes&#xA;&lt;string&gt; $linebreak  - string used for linebreaks of&#xA;                              multiline attributes&#xA;&lt;int&gt; $entities  - setting for entities in attribute values&#xA;                              (one of XML_UTIL_ENTITIES_NONE,&#xA;                              XML_UTIL_ENTITIES_XML,&#xA;                              XML_UTIL_ENTITIES_XML_REQUIRED,&#xA;                              XML_UTIL_ENTITIES_HTML)&#xA;Returns string  - string representation of the attributes&#xA;Uses   replaceEntities() to replace XML entities in attribute values&#xA;Todo   allow sort also to be an options array&#xA;" ilk="function" line="392" lineend="449" name="attributesToString" returns="string" signature="string attributesToString(array $attributes, $sort = true, bool $multiline = false, string $indent = &apos;    &apos;, string $linebreak = &quot;\n&quot;, int $entities = XML_UTIL_ENTITIES_XML)"><variable citdl="array" ilk="argument" line="392" name="attributes" /><variable default="true" ilk="argument" line="392" name="sort" /><variable citdl="bool" default="false" ilk="argument" line="392" name="multiline" /><variable citdl="string" default="&apos;    &apos;" ilk="argument" line="392" name="indent" /><variable citdl="string" default="&quot;\n&quot;" ilk="argument" line="392" name="linebreak" /><variable citdl="int" default="XML_UTIL_ENTITIES_XML" ilk="argument" line="392" name="entities" /><variable citdl="attributes[]" line="424" name="value" /><variable citdl="string" line="418" name="string" /><variable line="424" name="key" /><variable citdl="boolean" line="434" name="first" /></scope><scope attributes="public static" doc="&#xA;Collapses empty tags.&#xA;&lt;string&gt; $xml  - XML&#xA;&lt;int&gt; $mode  - Whether to collapse all empty tags (XML_UTIL_COLLAPSE_ALL)&#xA;                     or only XHTML (XML_UTIL_COLLAPSE_XHTML_ONLY) ones.&#xA;Returns string  - XML&#xA;" ilk="function" line="460" lineend="503" name="collapseEmptyTags" returns="string" signature="string collapseEmptyTags(string $xml, int $mode = XML_UTIL_COLLAPSE_ALL)"><variable citdl="string" ilk="argument" line="460" name="xml" /><variable citdl="int" default="XML_UTIL_COLLAPSE_ALL" ilk="argument" line="460" name="mode" /><variable citdl="string" line="485" name="preg2" /><variable citdl="string" line="479" name="preg1" /></scope><scope attributes="public static" doc="&#xA;Create a tag&#xA;This method will call XML_Util::createTagFromArray(), which&#xA;is more flexible.&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create an XML tag:&#xA;$tag = XML_Util::createTag(&apos;myNs:myTag&apos;,&#xA;    array(&apos;foo&apos; =&gt; &apos;bar&apos;),&#xA;    &apos;This is inside the tag&apos;,&#xA;    &apos;http://www.w3c.org/myNs#&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $qname  - qualified tagname (including namespace)&#xA;&lt;array&gt; $attributes  - array containg attributes&#xA;&lt;mixed&gt; $content  - the content&#xA;&lt;string&gt; $namespaceUri  - URI of the namespace&#xA;&lt;int&gt; $replaceEntities  - whether to replace XML special chars in&#xA;                               content, embedd it in a CData section&#xA;                               or none of both&#xA;&lt;bool&gt; $multiline  - whether to create a multiline tag where&#xA;                               each attribute gets written to a single line&#xA;&lt;string&gt; $indent  - string used to indent attributes&#xA;                               (_auto indents attributes so they start&#xA;                               at the same column)&#xA;&lt;string&gt; $linebreak  - string used for linebreaks&#xA;&lt;bool&gt; $sortAttributes  - Whether to sort the attributes or not&#xA;&lt;int&gt; $collapseTagMode  - How to handle a content-less, and thus collapseable, tag&#xA;Returns string  - XML tag&#xA;See    createTagFromArray()&#xA;Uses   createTagFromArray() to create the tag&#xA;" ilk="function" line="541" lineend="567" name="createTag" returns="string" signature="string createTag(string $qname, array $attributes = array(), mixed $content = null, string $namespaceUri = null, int $replaceEntities = XML_UTIL_REPLACE_ENTITIES, bool $multiline = false, string $indent = &apos;_auto&apos;, string $linebreak = &quot;\n&quot;, bool $sortAttributes = true, int $collapseTagMode = XML_UTIL_COLLAPSE_ALL)"><variable citdl="string" ilk="argument" line="541" name="qname" /><variable citdl="array" default="array()" ilk="argument" line="541" name="attributes" /><variable citdl="mixed" default="null" ilk="argument" line="541" name="content" /><variable citdl="string" default="null" ilk="argument" line="541" name="namespaceUri" /><variable citdl="int" default="XML_UTIL_REPLACE_ENTITIES" ilk="argument" line="541" name="replaceEntities" /><variable citdl="bool" default="false" ilk="argument" line="541" name="multiline" /><variable citdl="string" default="&apos;_auto&apos;" ilk="argument" line="541" name="indent" /><variable citdl="string" default="&quot;\n&quot;" ilk="argument" line="541" name="linebreak" /><variable citdl="bool" default="true" ilk="argument" line="541" name="sortAttributes" /><variable citdl="int" default="XML_UTIL_COLLAPSE_ALL" ilk="argument" line="541" name="collapseTagMode" /><variable citdl="array()" line="550" name="tag" /></scope><scope attributes="public static" doc="&#xA;Create a tag from an array.&#xA;This method awaits an array in the following format&#xA;&lt;pre&gt;&#xA;array(&#xA;    // qualified name of the tag&#xA;    &apos;qname&apos; =&gt; $qname&#xA;    // namespace prefix (optional, if qname is specified or no namespace)&#xA;    &apos;namespace&apos; =&gt; $namespace&#xA;    // local part of the tagname (optional, if qname is specified)&#xA;    &apos;localpart&apos; =&gt; $localpart,&#xA;    // array containing all attributes (optional)&#xA;    &apos;attributes&apos; =&gt; array(),&#xA;    // tag content (optional)&#xA;    &apos;content&apos; =&gt; $content,&#xA;    // namespaceUri for the given namespace (optional)&#xA;    &apos;namespaceUri&apos; =&gt; $namespaceUri&#xA;)&#xA;&lt;/pre&gt;&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;$tag = array(&#xA;    &apos;qname&apos;        =&gt; &apos;foo:bar&apos;,&#xA;    &apos;namespaceUri&apos; =&gt; &apos;http://foo.com&apos;,&#xA;    &apos;attributes&apos;   =&gt; array(&apos;key&apos; =&gt; &apos;value&apos;, &apos;argh&apos; =&gt; &apos;fruit&amp;vegetable&apos;),&#xA;    &apos;content&apos;      =&gt; &apos;I\&apos;m inside the tag&apos;,&#xA;);&#xA;// creating a tag with qualified name and namespaceUri&#xA;$string = XML_Util::createTagFromArray($tag);&#xA;&lt;/code&gt;&#xA;&lt;array&gt; $tag  - tag definition&#xA;&lt;int&gt; $replaceEntities  - whether to replace XML special chars in&#xA;                               content, embedd it in a CData section&#xA;                               or none of both&#xA;&lt;bool&gt; $multiline  - whether to create a multiline tag where each&#xA;                               attribute gets written to a single line&#xA;&lt;string&gt; $indent  - string used to indent attributes&#xA;                               (_auto indents attributes so they start&#xA;                               at the same column)&#xA;&lt;string&gt; $linebreak  - string used for linebreaks&#xA;&lt;bool&gt; $sortAttributes  - Whether to sort the attributes or not&#xA;&lt;int&gt; $collapseTagMode  - How to handle a content-less, and thus collapseable, tag&#xA;Returns string  - XML tag&#xA;See  createTag()&#xA;Uses attributesToString() to serialize the attributes of the tag&#xA;Uses splitQualifiedName() to get local part and namespace of a qualified name&#xA;Uses createCDataSection()&#xA;Uses collapseEmptyTags()&#xA;Uses raiseError()&#xA;" ilk="function" line="629" lineend="726" name="createTagFromArray" returns="string" signature="string createTagFromArray(array $tag, int $replaceEntities = XML_UTIL_REPLACE_ENTITIES, bool $multiline = false, string $indent = &apos;_auto&apos;, string $linebreak = &quot;\n&quot;, bool $sortAttributes = true, int $collapseTagMode = XML_UTIL_COLLAPSE_ALL)"><variable citdl="array" ilk="argument" line="629" name="tag" /><variable citdl="int" default="XML_UTIL_REPLACE_ENTITIES" ilk="argument" line="629" name="replaceEntities" /><variable citdl="bool" default="false" ilk="argument" line="629" name="multiline" /><variable citdl="string" default="&apos;_auto&apos;" ilk="argument" line="629" name="indent" /><variable citdl="string" default="&quot;\n&quot;" ilk="argument" line="629" name="linebreak" /><variable citdl="bool" default="true" ilk="argument" line="629" name="sortAttributes" /><variable citdl="int" default="XML_UTIL_COLLAPSE_ALL" ilk="argument" line="629" name="collapseTagMode" /><variable citdl="XML_Util.splitQualifiedName()" line="672" name="parts" /><variable line="655" name="ns" /><variable citdl="tag[]" line="655" name="uri" /><variable citdl="XML_Util.attributesToString()" line="706" name="attList" /></scope><scope attributes="public static" doc="&#xA;Create a start element&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create an XML start element:&#xA;$tag = XML_Util::createStartElement(&apos;myNs:myTag&apos;,&#xA;    array(&apos;foo&apos; =&gt; &apos;bar&apos;) ,&apos;http://www.w3c.org/myNs#&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $qname  - qualified tagname (including namespace)&#xA;&lt;array&gt; $attributes  - array containg attributes&#xA;&lt;string&gt; $namespaceUri  - URI of the namespace&#xA;&lt;bool&gt; $multiline  - whether to create a multiline tag where each&#xA;                              attribute gets written to a single line&#xA;&lt;string&gt; $indent  - string used to indent attributes (_auto indents&#xA;                              attributes so they start at the same column)&#xA;&lt;string&gt; $linebreak  - string used for linebreaks&#xA;&lt;bool&gt; $sortAttributes  - Whether to sort the attributes or not&#xA;Returns string  - XML start element&#xA;See    createEndElement(), createTag()&#xA;" ilk="function" line="752" lineend="790" name="createStartElement" returns="string" signature="string createStartElement(string $qname, array $attributes = array(), string $namespaceUri = null, bool $multiline = false, string $indent = &apos;_auto&apos;, string $linebreak = &quot;\n&quot;, bool $sortAttributes = true)"><variable citdl="string" ilk="argument" line="752" name="qname" /><variable citdl="array" default="array()" ilk="argument" line="752" name="attributes" /><variable citdl="string" default="null" ilk="argument" line="752" name="namespaceUri" /><variable citdl="bool" default="false" ilk="argument" line="752" name="multiline" /><variable citdl="string" default="&apos;_auto&apos;" ilk="argument" line="752" name="indent" /><variable citdl="string" default="&quot;\n&quot;" ilk="argument" line="752" name="linebreak" /><variable citdl="bool" default="true" ilk="argument" line="752" name="sortAttributes" /><variable citdl="XML_Util.splitQualifiedName()" line="763" name="parts" /><variable citdl="XML_Util.attributesToString()" line="787" name="attList" /><variable citdl="sprintf()" line="788" name="element" /></scope><scope attributes="public static" doc="&#xA;Create an end element&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create an XML start element:&#xA;$tag = XML_Util::createEndElement(&apos;myNs:myTag&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $qname  - qualified tagname (including namespace)&#xA;Returns string  - XML end element&#xA;See    createStartElement(), createTag()&#xA;" ilk="function" line="807" lineend="811" name="createEndElement" returns="string" signature="string createEndElement(string $qname)"><variable citdl="string" ilk="argument" line="807" name="qname" /><variable citdl="sprintf()" line="809" name="element" /></scope><scope attributes="public static" doc="&#xA;Create an XML comment&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create an XML start element:&#xA;$tag = XML_Util::createComment(&apos;I am a comment&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $content  - content of the comment&#xA;Returns string  - XML comment&#xA;" ilk="function" line="827" lineend="831" name="createComment" returns="string" signature="string createComment(string $content)"><variable citdl="string" ilk="argument" line="827" name="content" /><variable citdl="sprintf()" line="829" name="comment" /></scope><scope attributes="public static" doc="&#xA;Create a CData section&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// create a CData section&#xA;$tag = XML_Util::createCDataSection(&apos;I am content.&apos;);&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $data  - data of the CData section&#xA;Returns string  - CData section with content&#xA;" ilk="function" line="847" lineend="853" name="createCDataSection" returns="string" signature="string createCDataSection(string $data)"><variable citdl="string" ilk="argument" line="847" name="data" /></scope><scope attributes="public static" doc="&#xA;Split qualified name and return namespace and local part&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// split qualified tag&#xA;$parts = XML_Util::splitQualifiedName(&apos;xslt:stylesheet&apos;);&#xA;&lt;/code&gt;&#xA;the returned array will contain two elements:&#xA;&lt;pre&gt;&#xA;array(&#xA;    &apos;namespace&apos; =&gt; &apos;xslt&apos;,&#xA;    &apos;localPart&apos; =&gt; &apos;stylesheet&apos;&#xA;);&#xA;&lt;/pre&gt;&#xA;&lt;string&gt; $qname  - qualified tag name&#xA;&lt;string&gt; $defaultNs  - default namespace (optional)&#xA;Returns array  - array containing namespace and local part&#xA;" ilk="function" line="877" lineend="890" name="splitQualifiedName" returns="array" signature="array splitQualifiedName(string $qname, string $defaultNs = null)"><variable citdl="string" ilk="argument" line="877" name="qname" /><variable citdl="string" default="null" ilk="argument" line="877" name="defaultNs" /><variable citdl="explode()" line="880" name="tmp" /></scope><scope attributes="public static" doc="&#xA;Check, whether string is valid XML name&#xA;&lt;p&gt;XML names are used for tagname, attribute names and various&#xA;other, lesser known entities.&lt;/p&gt;&#xA;&lt;p&gt;An XML name may only consist of alphanumeric characters,&#xA;dashes, undescores and periods, and has to start with a letter&#xA;or an underscore.&lt;/p&gt;&#xA;&lt;code&gt;&#xA;require_once &apos;XML/Util.php&apos;;&#xA;// verify tag name&#xA;$result = XML_Util::isValidName(&apos;invalidTag?&apos;);&#xA;if (is_a($result, &apos;PEAR_Error&apos;)) {&#xA;   print &apos;Invalid XML name: &apos; . $result-&gt;getMessage();&#xA;}&#xA;&lt;/code&gt;&#xA;&lt;string&gt; $string  - string that should be checked&#xA;Returns mixed  - true, if string is a valid XML name, PEAR error otherwise&#xA;Todo support for other charsets&#xA;Todo PEAR CS - unable to avoid 85-char limit on second preg_match&#xA;" ilk="function" line="918" lineend="943" name="isValidName" returns="mixed" signature="mixed isValidName(string $string)"><variable citdl="string" ilk="argument" line="918" name="string" /><variable citdl="preg_match()" line="933" name="match" /></scope><scope attributes="public static" doc="&#xA;Replacement for XML_Util::raiseError&#xA;Avoids the necessity to always require&#xA;PEAR.php&#xA;&lt;string&gt; $msg  - error message&#xA;&lt;int&gt; $code  - error code&#xA;Returns pear_error &#xA;Todo   PEAR CS - should this use include_once instead?&#xA;" ilk="function" line="957" lineend="961" name="raiseError" returns="PEAR_Error" signature="pear_error raiseError(string $msg, int $code)"><variable citdl="string" ilk="argument" line="957" name="msg" /><variable citdl="int" ilk="argument" line="957" name="code" /></scope></scope></scope>