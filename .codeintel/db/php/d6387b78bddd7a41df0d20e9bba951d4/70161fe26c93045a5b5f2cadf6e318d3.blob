<scope ilk="blob" lang="PHP" name="System.php" src="/usr/share/pear/System.php"><import line="19" module="PEAR.php" /><import line="20" module="Console/Getopt.php" /><scope doc="System offers cross platform compatible system functions&#xA;&#xA;Static functions for different operations. Should work under&#xA;Unix and Windows. The names and usage has been taken from its respectively&#xA;GNU commands. The functions will return (bool) false on error and will&#xA;trigger the error with the PHP trigger_error() function (you can silence&#xA;the error by prefixing a &apos;@&apos; sign after the function call, but this&#xA;is not recommended practice.  Instead use an error handler with&#xA;{@link set_error_handler()}).&#xA;&#xA;Documentation on this class you can find in:&#xA;http://pear.php.net/manual/&#xA;&#xA;Example usage:&#xA;if (!@System::rm(&apos;-r file1 dir1&apos;)) {&#xA;   print &quot;could not delete file1 or dir1&quot;;&#xA;}&#xA;&#xA;In case you need to to pass file names with spaces,&#xA;pass the params as an array:&#xA;&#xA;System::rm(array(&apos;-r&apos;, $file1, $dir1));&#xA;&#xA;@category   pear&#xA;@package    System&#xA;@author     Tomas V.V. Cox &lt;cox@idecnet.com&gt;&#xA;@copyright  1997-2006 The PHP Group&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@since      Class available since Release 0.1&#xA;@static" ilk="class" line="58" lineend="628" name="System"><scope attributes="public static" doc="&#xA;returns the commandline arguments of a function&#xA;&lt;string&gt; $argv  - the commandline&#xA;&lt;string&gt; $short_options  - the allowed option short-tags&#xA;&lt;string&gt; $long_options  - the allowed option long-tags&#xA;Returns array  - the given options and there values&#xA;" ilk="function" line="68" lineend="100" name="_parseArgs" returns="array" signature="array _parseArgs(string $argv, string $short_options, string $long_options = null)"><variable citdl="string" ilk="argument" line="68" name="argv" /><variable citdl="string" ilk="argument" line="68" name="short_options" /><variable citdl="string" default="null" ilk="argument" line="68" name="long_options" /><variable citdl="av[]" line="91" name="a" /><variable line="91" name="k" /></scope><scope attributes="protected static" doc="&#xA;Output errors with PHP trigger_error(). You can silence the errors&#xA;with prefixing a &quot;@&quot; sign to the function call: @System::mkdir(..);&#xA;&lt;mixed&gt; $error  - a PEAR error or a string with the error message&#xA;Returns bool  - false&#xA;" ilk="function" line="109" lineend="116" name="raiseError" returns="bool" signature="bool raiseError(mixed $error)"><variable citdl="mixed" ilk="argument" line="109" name="error" /></scope><scope attributes="protected static" doc="&#xA;Creates a nested array representing the structure of a directory&#xA;System::_dirToStruct(&apos;dir1&apos;, 0) =&gt;&#xA;  Array&#xA;   (&#xA;   [dirs] =&gt; Array&#xA;       (&#xA;           [0] =&gt; dir1&#xA;       )&#xA;   [files] =&gt; Array&#xA;       (&#xA;           [0] =&gt; dir1/file2&#xA;           [1] =&gt; dir1/file3&#xA;       )&#xA;   )&#xA;&lt;string&gt; $sPath  - Name of the directory&#xA;&lt;integer&gt; $maxinst  - max. deep of the lookup&#xA;&lt;integer&gt; $aktinst  - starting deep of the lookup&#xA;&lt;bool&gt; $silent  - if true, do not emit errors.&#xA;Returns array  - the structure of the dir&#xA;" ilk="function" line="141" lineend="174" name="_dirToStruct" returns="array" signature="array _dirToStruct(string $sPath, integer $maxinst, integer $aktinst = 0, bool $silent = false)"><variable citdl="string" ilk="argument" line="141" name="sPath" /><variable citdl="integer" ilk="argument" line="141" name="maxinst" /><variable citdl="integer" default="0" ilk="argument" line="141" name="aktinst" /><variable citdl="bool" default="false" ilk="argument" line="141" name="silent" /><variable citdl="System._dirToStruct()" line="165" name="tmp" /><variable citdl="array()" line="143" name="struct" /><variable citdl="list[]" line="162" name="val" /><variable citdl="array()" line="152" name="list" /><variable line="153" name="file" /><variable citdl="sPath" line="163" name="path" /><variable attributes="__not_yet_defined__" line="153" name="dir" /></scope><scope attributes="protected static" doc="&#xA;Creates a nested array representing the structure of a directory and files&#xA;&lt;array&gt; $files  - Array listing files and dirs&#xA;Returns array &#xA;Static&#xA;See System::_dirToStruct()&#xA;" ilk="function" line="184" lineend="199" name="_multipleToStruct" returns="array" signature="array _multipleToStruct(array $files)"><variable citdl="array" ilk="argument" line="184" name="files" /><variable citdl="System._dirToStruct()" line="190" name="tmp" /><variable citdl="array()" line="186" name="struct" /><variable citdl="files[]" line="188" name="file" /></scope><scope attributes="public static" doc="&#xA;The rm command for removing files.&#xA;Supports multiple files and dirs and also recursive deletes&#xA;&lt;string&gt; $args  - the arguments for rm&#xA;Returns mixed  - PEAR_Error or true for success&#xA;Static&#xA;Access   public&#xA;" ilk="function" line="210" lineend="245" name="rm" returns="mixed" signature="mixed rm(string $args)"><variable citdl="string" ilk="argument" line="210" name="args" /><variable citdl="opts[]" line="216" name="opt" /><variable citdl="System._multipleToStruct()" line="223" name="struct" /><variable citdl="struct[]" line="231" name="dir" /><variable citdl="boolean" line="218" name="do_recursive" /><variable citdl="boolean" line="221" name="ret" /><variable citdl="struct[]" line="224" name="file" /><variable citdl="System._parseArgs()" line="212" name="opts" /><variable line="238" name="delete" /></scope><scope attributes="public static" doc="&#xA;Make directories.&#xA;The -p option will create parent directories&#xA;&lt;string&gt; $args  - the name of the director(y|ies) to create&#xA;Returns bool  - True for success&#xA;" ilk="function" line="254" lineend="308" name="mkDir" returns="bool" signature="bool mkDir(string $args)"><variable citdl="string" ilk="argument" line="254" name="args" /><variable citdl="opts[]" line="262" name="opt" /><variable citdl="array()" line="281" name="dirstack" /><variable citdl="boolean" line="264" name="create_parents" /><variable citdl="boolean" line="278" name="ret" /><variable line="288" name="newdir" /><variable citdl="int" line="261" name="mode" /><variable citdl="System._parseArgs()" line="256" name="opts" /><variable citdl="opts[]" line="280" name="dir" /></scope><scope attributes="public static" doc="&#xA;Concatenate files&#xA;Usage:&#xA;1) $var = System::cat(&apos;sample.txt test.txt&apos;);&#xA;2) System::cat(&apos;sample.txt test.txt &gt; final.txt&apos;);&#xA;3) System::cat(&apos;sample.txt test.txt &gt;&gt; final.txt&apos;);&#xA;Note: as the class use fopen, urls should work also&#xA;&lt;string&gt; $args  - the arguments&#xA;Returns boolean  - true on success&#xA;" ilk="function" line="323" lineend="371" name="cat" returns="boolean" signature="boolean &amp;cat(string $args)"><variable citdl="string" ilk="argument" line="323" name="args" /><variable citdl="array()" line="326" name="files" /><variable citdl="args" line="335" name="outputfile" /><variable line="358" name="cont" /><variable citdl="System.raiseError()" line="348" name="err" /><variable line="332" name="i" /><variable citdl="boolean" line="325" name="ret" /><variable attributes="__not_yet_defined__" line="358" name="fd" /><variable citdl="count()" line="331" name="count_args" /><variable citdl="files[]" line="353" name="file" /><variable citdl="boolean" line="345" name="outputfd" /><variable citdl="string" line="334" name="mode" /></scope><scope attributes="public static" doc="&#xA;Creates temporary files or directories. This function will remove&#xA;the created files when the scripts finish its execution.&#xA;Usage:&#xA;  1) $tempfile = System::mktemp(&quot;prefix&quot;);&#xA;  2) $tempdir  = System::mktemp(&quot;-d prefix&quot;);&#xA;  3) $tempfile = System::mktemp();&#xA;  4) $tempfile = System::mktemp(&quot;-t /var/tmp prefix&quot;);&#xA;prefix -&gt; The string that will be prepended to the temp name&#xA;          (defaults to &quot;tmp&quot;).&#xA;-d     -&gt; A temporary dir will be created instead of a file.&#xA;-t     -&gt; The target dir where the temporary (file|dir) will be created. If&#xA;          this param is missing by default the env vars TMP on Windows or&#xA;          TMPDIR in Unix will be used. If these vars are also missing&#xA;          c:\windows\temp or /tmp will be used.&#xA;&lt;string&gt; $args  - The arguments&#xA;Returns mixed  - the full path of the created (file|dir) or false&#xA;See System::tmpdir()&#xA;" ilk="function" line="395" lineend="439" name="mktemp" returns="mixed" signature="mixed mktemp(string $args = null)"><variable citdl="string" default="null" ilk="argument" line="395" name="args" /><variable citdl="opts[]" line="403" name="opt" /><variable citdl="tempnam()" line="420" name="tmp" /><variable citdl="boolean" line="405" name="tmp_is_dir" /><variable line="411" name="prefix" /><variable citdl="System._parseArgs()" line="398" name="opts" /><variable citdl="boolean" line="435" name="first_time" /><variable citdl="opt" line="407" name="tmpdir" /></scope><variable attributes="static" citdl="boolean" line="397" name="first_time" /><scope attributes="public static" doc="&#xA;Remove temporary files created my mkTemp. This function is executed&#xA;at script shutdown time&#xA;" ilk="function" line="445" lineend="453" name="_removeTmpFiles" signature="_removeTmpFiles()"><variable citdl="GLOBALS" line="448" name="delete" /></scope><scope attributes="public static" doc="&#xA;Get the path of the temporal directory set in the system&#xA;by looking in its environments variables.&#xA;Note: php.ini-recommended removes the &quot;E&quot; from the variables_order setting,&#xA;making unavaible the $_ENV array, that s why we do tests with _ENV&#xA;Returns string  - The temporary directory on the system&#xA;" ilk="function" line="463" lineend="484" name="tmpdir" returns="string" signature="string tmpdir()" /><scope attributes="public static" doc="&#xA;The &quot;which&quot; command (show the full path of a command)&#xA;&lt;string&gt; $program  - The command to search for&#xA;&lt;mixed&gt; $fallback  - Value to return if $program is not found&#xA;Returns mixed  - A string with the full path or false if not found&#xA;Author Stig Bakken &lt;ssb@php.net&gt;&#xA;" ilk="function" line="495" lineend="542" name="which" returns="mixed" signature="mixed which(string $program, mixed $fallback = false)"><variable citdl="string" ilk="argument" line="495" name="program" /><variable citdl="mixed" default="false" ilk="argument" line="495" name="fallback" /><variable citdl="exe_suffixes[]" line="527" name="suff" /><variable citdl="getenv()" line="518" name="exe_suffixes" /><variable citdl="explode()" line="512" name="path_elements" /><variable citdl="dir" line="529" name="file" /><variable citdl="getenv()" line="507" name="path" /><variable citdl="path_elements[]" line="528" name="dir" /></scope><scope attributes="public static" doc="&#xA;The &quot;find&quot; command&#xA;Usage:&#xA;System::find($dir);&#xA;System::find(&quot;$dir -type d&quot;);&#xA;System::find(&quot;$dir -type f&quot;);&#xA;System::find(&quot;$dir -name *.php&quot;);&#xA;System::find(&quot;$dir -name *.php -name *.htm*&quot;);&#xA;System::find(&quot;$dir -maxdepth 1&quot;);&#xA;Params implemented:&#xA;$dir            -&gt; Start the search at this directory&#xA;-type d         -&gt; return only directories&#xA;-type f         -&gt; return only files&#xA;-maxdepth &lt;n&gt;   -&gt; max depth of recursion&#xA;-name &lt;pattern&gt; -&gt; search pattern (bash style). Multiple -name param allowed&#xA;&lt;mixed&gt; Either  - array or string with the command line&#xA;Returns array  - Array of found files&#xA;" ilk="function" line="566" lineend="627" name="find" returns="array" signature="array find($args)"><variable ilk="argument" line="566" name="args" /><variable citdl="path" line="606" name="files" /><variable citdl="preg_quote()" line="592" name="name" /><variable line="579" name="i" /><variable citdl="string" line="614" name="pattern" /><variable citdl="array()" line="615" name="ret" /><variable citdl="boolean" line="586" name="do_dirs" /><variable citdl="array()" line="575" name="patterns" /><variable citdl="int" line="576" name="depth" /><variable citdl="basename()" line="619" name="filepart" /><variable citdl="count()" line="616" name="files_count" /><variable citdl="System._dirToStruct()" line="604" name="path" /><variable citdl="preg_quote()" line="613" name="dsq" /><variable citdl="count()" line="578" name="args_count" /><variable citdl="realpath()" line="571" name="dir" /><variable citdl="do_dirs" line="577" name="do_files" /></scope></scope></scope>