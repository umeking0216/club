<scope ilk="blob" lang="PHP" name="PEAR.php" src="/usr/share/pear/PEAR.php"><variable citdl="int" ilk="constant" line="24" name="PEAR_ERROR_RETURN" /><variable citdl="int" ilk="constant" line="25" name="PEAR_ERROR_PRINT" /><variable citdl="int" ilk="constant" line="26" name="PEAR_ERROR_TRIGGER" /><variable citdl="int" ilk="constant" line="27" name="PEAR_ERROR_DIE" /><variable citdl="int" ilk="constant" line="28" name="PEAR_ERROR_CALLBACK" /><variable citdl="int" ilk="constant" line="33" name="PEAR_ERROR_EXCEPTION" /><variable citdl="boolean" ilk="constant" line="37" name="OS_WINDOWS" /><variable citdl="boolean" ilk="constant" line="38" name="OS_UNIX" /><variable citdl="string" ilk="constant" line="39" name="PEAR_OS" /><scope doc="Base class for other PEAR classes.  Provides rudimentary&#xA;emulation of destructors.&#xA;&#xA;If you want a destructor in your class, inherit PEAR and make a&#xA;destructor method called _yourclassname (same name as the&#xA;constructor, but with a &quot;_&quot; prefix).  Also, in your constructor you&#xA;have to call the PEAR constructor: $this-&gt;PEAR();.&#xA;The destructor method will be called without parameters.  Note that&#xA;at in some SAPI implementations (such as Apache), any output during&#xA;the request shutdown (in which destructors are called) seems to be&#xA;discarded.  If you need to get any debug information from your&#xA;destructor, use error_log(), syslog() or something similar.&#xA;&#xA;IMPORTANT! To use the emulated destructors you need to create the&#xA;objects by reference: $obj =&amp; new PEAR_child;&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V.V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Greg Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2006 The PHP Group&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/package/PEAR&#xA;@see        PEAR_Error&#xA;@since      Class available since PHP 4.0.2&#xA;@link        http://pear.php.net/manual/en/core.pear.php#core.pear.pear" ilk="class" line="84" lineend="791" name="PEAR"><variable citdl="bool" doc="Whether to enable internal debug messages.&#xA;&#xA;@var     bool&#xA;@access  private" line="92" name="_debug" /><variable citdl="int" doc="Default error mode for this object.&#xA;&#xA;@var     int&#xA;@access  private" line="100" name="_default_error_mode" /><variable citdl="int" doc="Default error options used for this object when error mode&#xA;is PEAR_ERROR_TRIGGER.&#xA;&#xA;@var     int&#xA;@access  private" line="109" name="_default_error_options" /><variable citdl="string" doc="Default error handler (callback) for this object, if error mode is&#xA;PEAR_ERROR_CALLBACK.&#xA;&#xA;@var     string&#xA;@access  private" line="118" name="_default_error_handler" /><variable citdl="string" doc="Which class to use for error objects.&#xA;&#xA;@var     string&#xA;@access  private" line="126" name="_error_class" /><variable citdl="array" doc="An array of expected errors.&#xA;&#xA;@var     array&#xA;@access  private" line="134" name="_expected_errors" /><variable attributes="protected static" citdl="array" doc="List of methods that can be called both statically and non-statically.&#xA;@var array" line="146" name="bivalentMethods" /><scope attributes="__ctor__" doc="&#xA;Constructor.  Registers this object in&#xA;$_PEAR_destructor_object_list for destructor emulation if a&#xA;destructor object exists.&#xA;&lt;string&gt; $error_class  - (optional) which class to use for&#xA;       error objects, defaults to PEAR_Error.&#xA;Access public&#xA;Returns void &#xA;" ilk="function" line="158" lineend="183" name="__construct" signature="void __construct(string $error_class = null)"><variable citdl="string" default="null" ilk="argument" line="158" name="error_class" /><variable citdl="strtolower()" line="160" name="classname" /><variable attributes="__not_yet_defined__" line="172" name="_PEAR_destructor_object_list" /><variable citdl="string" line="170" name="destructor" /></scope><scope attributes="public __ctor__" doc="&#xA;Only here for backwards compatibility.&#xA;E.g. Archive_Tar calls $this-&gt;PEAR() in its constructor.&#xA;&lt;string&gt; $error_class  - Which class to use for error objects,&#xA;                           defaults to PEAR_Error.&#xA;" ilk="function" line="192" lineend="195" name="PEAR" signature="PEAR(string $error_class = null)"><variable citdl="string" default="null" ilk="argument" line="192" name="error_class" /></scope><scope doc="&#xA;Destructor (the emulated type of...).  Does nothing right now,&#xA;but is included for forward compatibility, so subclass&#xA;destructors should always call it.&#xA;See the note in the class desciption about output from&#xA;destructors.&#xA;Access public&#xA;Returns void &#xA;" ilk="function" line="208" lineend="212" name="_PEAR" signature="void _PEAR()" /><scope attributes="public" ilk="function" line="214" lineend="225" name="__call" returns="call_user_func_array()" signature="__call($method, $arguments)"><variable ilk="argument" line="214" name="method" /><variable ilk="argument" line="214" name="arguments" /></scope><scope attributes="public static" ilk="function" line="227" lineend="238" name="__callStatic" returns="call_user_func_array()" signature="__callStatic($method, $arguments)"><variable ilk="argument" line="227" name="method" /><variable ilk="argument" line="227" name="arguments" /></scope><scope attributes="public static" doc="&#xA;If you have a class that&apos;s mostly/entirely static, and you need static&#xA;properties, you can use this method to simulate them. Eg. in your method(s)&#xA;do this: $myVar = &amp;PEAR::getStaticProperty(&apos;myclass&apos;, &apos;myVar&apos;);&#xA;You MUST use a reference, or they will not persist!&#xA;&lt;string&gt; $class  - The calling classname, to prevent clashes&#xA;&lt;string&gt; $var  - The variable to retrieve.&#xA;Returns mixed  - A reference to the variable. If not set it will be&#xA;                auto initialised to NULL.&#xA;" ilk="function" line="251" lineend="263" name="getStaticProperty" returns="mixed" signature="mixed &amp;getStaticProperty(string $class, string $var)"><variable citdl="string" ilk="argument" line="251" name="class" /><variable citdl="string" ilk="argument" line="251" name="var" /></scope><variable attributes="static" line="253" name="properties" /><scope attributes="public static" doc="&#xA;Use this function to register a shutdown method for static&#xA;classes.&#xA;&lt;mixed&gt; $func  - The function name (or array of class/method) to call&#xA;&lt;mixed&gt; $args  - The arguments to pass to the function&#xA;Returns void &#xA;" ilk="function" line="274" lineend="283" name="registerShutdownFunc" signature="void registerShutdownFunc(mixed $func, mixed $args = array())"><variable citdl="mixed" ilk="argument" line="274" name="func" /><variable citdl="mixed" default="array()" ilk="argument" line="274" name="args" /></scope><scope attributes="public static" doc="&#xA;Tell whether a value is a PEAR error.&#xA;&lt;mixed&gt; $data  - the value to test&#xA;&lt;int&gt; $code  - if $data is an error object, return true&#xA;                       only if $code is a string and&#xA;                       $obj-&gt;getMessage() == $code or&#xA;                       $code is an integer and $obj-&gt;getCode() == $code&#xA;Returns bool  - true if parameter is an error&#xA;" ilk="function" line="296" lineend="309" name="isError" returns="bool" signature="bool isError(mixed $data, int $code = null)"><variable citdl="mixed" ilk="argument" line="296" name="data" /><variable citdl="int" default="null" ilk="argument" line="296" name="code" /></scope><scope attributes="protected static" doc="&#xA;Sets how errors generated by this object should be handled.&#xA;Can be invoked both in objects and statically.  If called&#xA;statically, setErrorHandling sets the default behaviour for all&#xA;PEAR objects.  If called in an object, setErrorHandling sets&#xA;the default behaviour for that object.&#xA;&lt;object&gt; $object  - &#xA;       Object the method was called on (non-static mode)&#xA;&lt;int&gt; $mode  - &#xA;       One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT,&#xA;       PEAR_ERROR_TRIGGER, PEAR_ERROR_DIE,&#xA;       PEAR_ERROR_CALLBACK or PEAR_ERROR_EXCEPTION.&#xA;&lt;mixed&gt; $options  - &#xA;       When $mode is PEAR_ERROR_TRIGGER, this is the error level (one&#xA;       of E_USER_NOTICE, E_USER_WARNING or E_USER_ERROR).&#xA;       When $mode is PEAR_ERROR_CALLBACK, this parameter is expected&#xA;       to be the callback function or method.  A callback&#xA;       function is a string with the name of the function, a&#xA;       callback method is an array of two elements: the element&#xA;       at index 0 is the object, and the element at index 1 is&#xA;       the name of the method to call in the object.&#xA;       When $mode is PEAR_ERROR_PRINT or PEAR_ERROR_DIE, this is&#xA;       a printf format string used when printing the error&#xA;       message.&#xA;Access public&#xA;Returns void &#xA;See PEAR_ERROR_RETURN&#xA;See PEAR_ERROR_PRINT&#xA;See PEAR_ERROR_TRIGGER&#xA;See PEAR_ERROR_DIE&#xA;See PEAR_ERROR_CALLBACK&#xA;See PEAR_ERROR_EXCEPTION&#xA;Since PHP 4.0.5&#xA;" ilk="function" line="352" lineend="388" name="_setErrorHandling" signature="void _setErrorHandling(object $object, int $mode = null, mixed $options = null)"><variable citdl="object" ilk="argument" line="352" name="object" /><variable citdl="int" default="null" ilk="argument" line="352" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="352" name="options" /><variable citdl="options" line="357" name="setoptions" /><variable citdl="mode" line="356" name="setmode" /></scope><scope doc="&#xA;This method is used to tell which errors you expect to get.&#xA;Expected errors are always returned with error mode&#xA;PEAR_ERROR_RETURN.  Expected error codes are stored in a stack,&#xA;and this method pushes a new element onto it.  The list of&#xA;expected errors are in effect until they are popped off the&#xA;stack with the popExpect() method.&#xA;Note that this method can not be called statically&#xA;&lt;mixed&gt; $code  - a single error code or an array of error codes to expect&#xA;Returns int  - the new depth of the &quot;expected errors&quot; stack&#xA;Access public&#xA;" ilk="function" line="405" lineend="413" name="expectError" returns="int" signature="int expectError(mixed $code = &apos;*&apos;)"><variable citdl="mixed" default="&apos;*&apos;" ilk="argument" line="405" name="code" /></scope><scope doc="&#xA;This method pops one element off the expected error codes&#xA;stack.&#xA;Returns array  - the list of error codes that were popped&#xA;" ilk="function" line="421" lineend="424" name="popExpect" returns="array" signature="array popExpect()" /><scope doc="&#xA;This method checks unsets an error code if available&#xA;&lt;mixed&gt; error  - code&#xA;Returns bool  - true if the error code was unset, false otherwise&#xA;Access private&#xA;Since PHP 4.3.0&#xA;" ilk="function" line="434" lineend="450" name="_checkDelExpect" returns="bool" signature="bool _checkDelExpect($error_code)"><variable ilk="argument" line="434" name="error_code" /><variable citdl="boolean" line="436" name="deleted" /><variable citdl="this._expected_errors[]" line="437" name="error_array" /><variable line="437" name="key" /></scope><scope doc="&#xA;This method deletes all occurrences of the specified element from&#xA;the expected error codes stack.&#xA;&lt;mixed&gt; $error_code  - error code that should be deleted&#xA;Returns mixed  - list of error codes that were deleted or error&#xA;Access public&#xA;Since PHP 4.3.0&#xA;" ilk="function" line="461" lineend="483" name="delExpect" returns="mixed" signature="mixed delExpect(mixed $error_code)"><variable citdl="mixed" ilk="argument" line="461" name="error_code" /><variable citdl="boolean" line="463" name="deleted" /><variable line="467" name="key" /><variable citdl="error_code[]" line="467" name="error" /></scope><scope attributes="protected static" doc="&#xA;This method is a wrapper that returns an instance of the&#xA;configured error class with this object&apos;s default error&#xA;handling applied.  If the $mode and $options parameters are not&#xA;specified, the object&apos;s defaults are used.&#xA;&lt;mixed&gt; $message  - a text error message or a PEAR error object&#xA;&lt;int&gt; $code  - a numeric error code (it is up to your class&#xA;                 to define these if you want to use codes)&#xA;&lt;int&gt; $mode  - One of PEAR_ERROR_RETURN, PEAR_ERROR_PRINT,&#xA;                 PEAR_ERROR_TRIGGER, PEAR_ERROR_DIE,&#xA;                 PEAR_ERROR_CALLBACK, PEAR_ERROR_EXCEPTION.&#xA;&lt;mixed&gt; $options  - If $mode is PEAR_ERROR_TRIGGER, this parameter&#xA;                 specifies the PHP-internal error level (one of&#xA;                 E_USER_NOTICE, E_USER_WARNING or E_USER_ERROR).&#xA;                 If $mode is PEAR_ERROR_CALLBACK, this&#xA;                 parameter specifies the callback function or&#xA;                 method.  In other error modes this parameter&#xA;                 is ignored.&#xA;&lt;string&gt; $userinfo  - If you need to pass along for example debug&#xA;                 information, this parameter is meant for that.&#xA;&lt;string&gt; $error_class  - The returned error object will be&#xA;                 instantiated from this class, if specified.&#xA;&lt;bool&gt; $skipmsg  - If true, raiseError will only pass error codes,&#xA;                 the error message parameter will be dropped.&#xA;Returns object  - a PEAR error object&#xA;See PEAR::setErrorHandling&#xA;Since PHP 4.0.5&#xA;" ilk="function" line="521" lineend="581" name="_raiseError" returns="object" signature="object _raiseError($object, mixed $message = null, int $code = null, int $mode = null, mixed $options = null, string $userinfo = null, string $error_class = null, bool $skipmsg = false)"><variable ilk="argument" line="521" name="object" /><variable citdl="mixed" default="null" ilk="argument" line="521" name="message" /><variable citdl="int" default="null" ilk="argument" line="521" name="code" /><variable citdl="int" default="null" ilk="argument" line="521" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="521" name="options" /><variable citdl="string" default="null" ilk="argument" line="521" name="userinfo" /><variable citdl="string" default="null" ilk="argument" line="521" name="error_class" /><variable citdl="bool" default="false" ilk="argument" line="521" name="skipmsg" /><variable line="575" name="a" /><variable attributes="__not_yet_defined__" line="560" name="GLOBALS" /><variable citdl="error_class" line="567" name="ec" /></scope><scope attributes="protected static" doc="&#xA;Simpler form of raiseError with fewer options.  In most cases&#xA;message, code and userinfo are enough.&#xA;&lt;mixed&gt; $message  - a text error message or a PEAR error object&#xA;&lt;int&gt; $code  - a numeric error code (it is up to your class&#xA;                 to define these if you want to use codes)&#xA;&lt;string&gt; $userinfo  - If you need to pass along for example debug&#xA;                 information, this parameter is meant for that.&#xA;Returns object  - a PEAR error object&#xA;See PEAR::raiseError&#xA;" ilk="function" line="598" lineend="607" name="_throwError" returns="object" signature="object _throwError($object, mixed $message = null, int $code = null, string $userinfo = null)"><variable ilk="argument" line="598" name="object" /><variable citdl="mixed" default="null" ilk="argument" line="598" name="message" /><variable citdl="int" default="null" ilk="argument" line="598" name="code" /><variable citdl="string" default="null" ilk="argument" line="598" name="userinfo" /><variable citdl="object.raiseError()" line="601" name="a" /></scope><scope attributes="public static" ilk="function" line="609" lineend="642" name="staticPushErrorHandling" returns="boolean" signature="staticPushErrorHandling($mode, $options = null)"><variable ilk="argument" line="609" name="mode" /><variable default="null" ilk="argument" line="609" name="options" /><variable citdl="mode" line="612" name="def_mode" /><variable citdl="GLOBALS" line="611" name="stack" /><variable citdl="options" line="613" name="def_options" /></scope><scope attributes="public static" ilk="function" line="644" lineend="678" name="staticPopErrorHandling" returns="boolean" signature="staticPopErrorHandling()"><variable citdl="options" line="648" name="setoptions" /><variable attributes="__not_yet_defined__" line="650" name="options" /><variable citdl="GLOBALS" line="646" name="stack" /><variable citdl="mode" line="647" name="setmode" /><variable attributes="__not_yet_defined__" line="650" name="mode" /></scope><scope attributes="protected static" doc="&#xA;Push a new error handler on top of the error handler options stack. With this&#xA;you can easily override the actual error handler for some code and restore&#xA;it later with popErrorHandling.&#xA;&lt;mixed&gt; $mode  - (same as setErrorHandling)&#xA;&lt;mixed&gt; $options  - (same as setErrorHandling)&#xA;Returns bool  - Always true&#xA;See PEAR::setErrorHandling&#xA;" ilk="function" line="692" lineend="711" name="_pushErrorHandling" returns="bool" signature="bool _pushErrorHandling($object, mixed $mode, mixed $options = null)"><variable ilk="argument" line="692" name="object" /><variable citdl="mixed" ilk="argument" line="692" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="692" name="options" /><variable citdl="object._default_error_mode" line="696" name="def_mode" /><variable citdl="GLOBALS" line="694" name="stack" /><variable citdl="object._default_error_options" line="697" name="def_options" /></scope><scope attributes="protected static" doc="&#xA;Pop the last error handler used&#xA;Returns bool  - Always true&#xA;See PEAR::pushErrorHandling&#xA;" ilk="function" line="720" lineend="732" name="_popErrorHandling" returns="bool" signature="bool _popErrorHandling($object)"><variable ilk="argument" line="720" name="object" /><variable attributes="__not_yet_defined__" line="724" name="options" /><variable citdl="GLOBALS" line="722" name="stack" /><variable attributes="__not_yet_defined__" line="724" name="mode" /></scope><scope attributes="public static" doc="&#xA;OS independent PHP extension load. Remember to take care&#xA;on the correct extension name for case sensitive OSes.&#xA;&lt;string&gt; $ext  - The extension name&#xA;Returns bool  - Success or not on the dl() call&#xA;" ilk="function" line="741" lineend="768" name="loadExtension" returns="bool" signature="bool loadExtension(string $ext)"><variable citdl="string" ilk="argument" line="741" name="ext" /><variable citdl="string" line="756" name="suffix" /></scope><scope attributes="static" doc="&#xA;Get SOURCE_DATE_EPOCH environment variable&#xA;See https://reproducible-builds.org/specs/source-date-epoch/&#xA;Returns int &#xA;Access public&#xA;" ilk="function" line="777" lineend="790" name="getSourceDateEpoch" returns="int" signature="int getSourceDateEpoch()" /></scope><scope ilk="function" line="793" lineend="834" name="_PEAR_call_destructors" signature="_PEAR_call_destructors()"><variable citdl="get_class()" line="808" name="classname" /><variable attributes="__not_yet_defined__" citdl="array_reverse()" line="795" name="_PEAR_destructor_object_list" /><variable line="807" name="k" /><variable citdl="GLOBALS[]" line="830" name="value" /><variable citdl="string" line="810" name="destructor" /><variable citdl="_PEAR_destructor_object_list[]" line="807" name="objref" /><variable citdl="PEAR.getStaticProperty()" line="801" name="destructLifoExists" /></scope><scope doc="Standard PEAR error class for PHP 4&#xA;&#xA;This class is supserseded by {@link PEAR_Exception} in PHP 5&#xA;&#xA;@category   pear&#xA;@package    PEAR&#xA;@author     Stig Bakken &lt;ssb@php.net&gt;&#xA;@author     Tomas V.V. Cox &lt;cox@idecnet.com&gt;&#xA;@author     Gregory Beaver &lt;cellog@php.net&gt;&#xA;@copyright  1997-2006 The PHP Group&#xA;@license    http://opensource.org/licenses/bsd-license.php New BSD License&#xA;@version    Release: 1.10.12&#xA;@link       http://pear.php.net/manual/en/core.pear.pear-error.php&#xA;@see        PEAR::raiseError(), PEAR::throwError()&#xA;@since      Class available since PHP 4.0.2" ilk="class" line="853" lineend="1127" name="PEAR_Error"><variable citdl="string" line="855" name="error_message_prefix" /><variable citdl="PEAR_ERROR_RETURN" line="856" name="mode" /><variable citdl="options" line="857" name="level" /><variable citdl="code" line="858" name="code" /><variable citdl="string" line="859" name="message" /><variable citdl="string" line="860" name="userinfo" /><variable citdl="debug_backtrace()" line="861" name="backtrace" /><scope attributes="__ctor__" doc="&#xA;PEAR_Error constructor&#xA;&lt;string&gt; $message  - message&#xA;&lt;int&gt; $code  - (optional) error code&#xA;&lt;int&gt; $mode  - (optional) error mode, one of: PEAR_ERROR_RETURN,&#xA;PEAR_ERROR_PRINT, PEAR_ERROR_DIE, PEAR_ERROR_TRIGGER,&#xA;PEAR_ERROR_CALLBACK or PEAR_ERROR_EXCEPTION&#xA;&lt;mixed&gt; $options  - (optional) error level, _OR_ in the case of&#xA;PEAR_ERROR_CALLBACK, the callback function or object/method&#xA;tuple.&#xA;&lt;string&gt; $userinfo  - (optional) additional user/debug info&#xA;Access public&#xA;" ilk="function" line="883" lineend="951" name="__construct" signature="__construct(string $message = &apos;unknown error&apos;, int $code = null, int $mode = null, mixed $options = null, string $userinfo = null)"><variable citdl="string" default="&apos;unknown error&apos;" ilk="argument" line="883" name="message" /><variable citdl="int" default="null" ilk="argument" line="883" name="code" /><variable citdl="int" default="null" ilk="argument" line="883" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="883" name="options" /><variable citdl="string" default="null" ilk="argument" line="883" name="userinfo" /><variable citdl="this.getMessage()" line="930" name="msg" /><variable citdl="PEAR.getStaticProperty()" line="894" name="skiptrace" /><variable citdl="string" line="917" name="format" /></scope><variable citdl="options" line="905" name="callback" /><scope attributes="public __ctor__" doc="&#xA;Only here for backwards compatibility.&#xA;Class &quot;Cache_Error&quot; still uses it, among others.&#xA;&lt;string&gt; $message  - Message&#xA;&lt;int&gt; $code  - Error code&#xA;&lt;int&gt; $mode  - Error mode&#xA;&lt;mixed&gt; $options  - See __construct()&#xA;&lt;string&gt; $userinfo  - Additional user/debug info&#xA;" ilk="function" line="964" lineend="969" name="PEAR_Error" signature="PEAR_Error(string $message = &apos;unknown error&apos;, int $code = null, int $mode = null, mixed $options = null, string $userinfo = null)"><variable citdl="string" default="&apos;unknown error&apos;" ilk="argument" line="964" name="message" /><variable citdl="int" default="null" ilk="argument" line="964" name="code" /><variable citdl="int" default="null" ilk="argument" line="964" name="mode" /><variable citdl="mixed" default="null" ilk="argument" line="964" name="options" /><variable citdl="string" default="null" ilk="argument" line="964" name="userinfo" /></scope><scope doc="&#xA;Get the error mode from an error object.&#xA;Returns int  - error mode&#xA;Access public&#xA;" ilk="function" line="977" lineend="980" name="getMode" returns="int" signature="int getMode()" /><scope doc="&#xA;Get the callback function/method from an error object.&#xA;Returns mixed  - callback function or object/method array&#xA;Access public&#xA;" ilk="function" line="988" lineend="991" name="getCallback" returns="mixed" signature="mixed getCallback()" /><scope doc="&#xA;Get the error message from an error object.&#xA;Returns string  - full error message&#xA;Access public&#xA;" ilk="function" line="999" lineend="1002" name="getMessage" returns="string" signature="string getMessage()" /><scope doc="&#xA;Get error code from an error object&#xA;Returns int  - error code&#xA;Access public&#xA;" ilk="function" line="1010" lineend="1013" name="getCode" returns="int" signature="int getCode()" /><scope doc="&#xA;Get the name of this error/exception.&#xA;Returns string  - error/exception name (type)&#xA;Access public&#xA;" ilk="function" line="1021" lineend="1024" name="getType" returns="string" signature="string getType()" /><scope doc="&#xA;Get additional user-supplied information.&#xA;Returns string  - user-supplied information&#xA;Access public&#xA;" ilk="function" line="1032" lineend="1035" name="getUserInfo" returns="string" signature="string getUserInfo()" /><scope doc="&#xA;Get additional debug information supplied by the application.&#xA;Returns string  - debug information&#xA;Access public&#xA;" ilk="function" line="1043" lineend="1046" name="getDebugInfo" returns="string" signature="string getDebugInfo()" /><scope doc="&#xA;Get the call backtrace from where the error was generated.&#xA;Supported with PHP 4.3.0 or newer.&#xA;&lt;int&gt; $frame  - (optional) what frame to fetch&#xA;Returns array  - Backtrace, or NULL if not available.&#xA;Access public&#xA;" ilk="function" line="1056" lineend="1065" name="getBacktrace" returns="array" signature="array getBacktrace(int $frame = null)"><variable citdl="int" default="null" ilk="argument" line="1056" name="frame" /></scope><scope ilk="function" line="1067" lineend="1074" name="addUserInfo" signature="addUserInfo($info)"><variable ilk="argument" line="1067" name="info" /></scope><scope ilk="function" line="1076" lineend="1079" name="__toString" returns="this.getMessage()" signature="__toString()" /><scope doc="&#xA;Make a string representation of this object.&#xA;Returns string  - a string with an object summary&#xA;Access public&#xA;" ilk="function" line="1087" lineend="1126" name="toString" returns="string" signature="string toString()"><variable citdl="this.callback" line="1098" name="callback" /><variable citdl="array()" line="1092" name="levels" /><variable citdl="array()" line="1089" name="modes" /></scope></scope></scope>